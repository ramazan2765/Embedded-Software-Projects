
FreeRTOS_Sensor_Node_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d114  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800d2b8  0800d2b8  0000e2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d864  0800d864  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d864  0800d864  0000e864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d86c  0800d86c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d86c  0800d86c  0000e86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d870  0800d870  0000e870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d874  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  200001d8  0800da4c  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f0c  0800da4c  0000ff0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cdb  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000468b  00000000  00000000  0002fee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00034570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000160d  00000000  00000000  000361b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6a0  00000000  00000000  000377c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224cd  00000000  00000000  00053e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0bbe  00000000  00000000  00076332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d28  00000000  00000000  00126f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d29c 	.word	0x0800d29c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d29c 	.word	0x0800d29c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <moving_average>:
#include "filter.h"

// ---------- Moving Average ----------
#define MA_BUFFER_SIZE 10   // Son 10 ölçümün ortalaması alınır

float moving_average(float new_value) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a01 	vstr	s0, [r7, #4]
    static float buffer[MA_BUFFER_SIZE] = {0};
    static int index = 0;
    static int count = 0;
    float sum = 0;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]

    buffer[index] = new_value;
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <moving_average+0xa4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <moving_average+0xa8>)
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
    index = (index + 1) % MA_BUFFER_SIZE;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <moving_average+0xa4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1c59      	adds	r1, r3, #1
 8001054:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <moving_average+0xac>)
 8001056:	fb83 2301 	smull	r2, r3, r3, r1
 800105a:	109a      	asrs	r2, r3, #2
 800105c:	17cb      	asrs	r3, r1, #31
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	1aca      	subs	r2, r1, r3
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <moving_average+0xa4>)
 800106c:	601a      	str	r2, [r3, #0]
    if (count < MA_BUFFER_SIZE) count++;
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <moving_average+0xb0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b09      	cmp	r3, #9
 8001074:	dc04      	bgt.n	8001080 <moving_average+0x50>
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <moving_average+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <moving_average+0xb0>)
 800107e:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < count; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	e00e      	b.n	80010a4 <moving_average+0x74>
        sum += buffer[i];
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <moving_average+0xa8>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ed97 7a03 	vldr	s14, [r7, #12]
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < count; i++) {
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <moving_average+0xb0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbeb      	blt.n	8001086 <moving_average+0x56>
    }

    return sum / count;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <moving_average+0xb0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80010be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	200001f4 	.word	0x200001f4
 80010d8:	200001f8 	.word	0x200001f8
 80010dc:	66666667 	.word	0x66666667
 80010e0:	20000220 	.word	0x20000220

080010e4 <ema_filter>:

// ---------- Exponential Moving Average ----------
float ema_filter(float new_value, float *last_value, float alpha) {
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ee:	60b8      	str	r0, [r7, #8]
 80010f0:	edc7 0a01 	vstr	s1, [r7, #4]
    *last_value = alpha * new_value + (1.0f - alpha) * (*last_value);
 80010f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001104:	edd7 7a01 	vldr	s15, [r7, #4]
 8001108:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	edc3 7a00 	vstr	s15, [r3]
    return *last_value;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	ee07 3a90 	vmov	s15, r3
}
 8001128:	eeb0 0a67 	vmov.f32	s0, s15
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <MPU9250_Init>:
// Registers
#define WHO_AM_I_REG      0x75
#define PWR_MGMT_1        0x6B
#define ACCEL_XOUT_H      0x3B

HAL_StatusTypeDef MPU9250_Init(I2C_HandleTypeDef *hi2c) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b088      	sub	sp, #32
 800113a:	af04      	add	r7, sp, #16
 800113c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    // WHO_AM_I check (0x71 expected)
    if (HAL_I2C_Mem_Read(hi2c, MPU9250_ADDR, WHO_AM_I_REG, 1, &check, 1, 100) != HAL_OK)
 800113e:	2364      	movs	r3, #100	@ 0x64
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 030f 	add.w	r3, r7, #15
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2275      	movs	r2, #117	@ 0x75
 8001150:	21d0      	movs	r1, #208	@ 0xd0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f001 ffe2 	bl	800311c <HAL_I2C_Mem_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MPU9250_Init+0x2c>
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e019      	b.n	8001196 <MPU9250_Init+0x60>
    if (check != 0x71) return HAL_ERROR;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b71      	cmp	r3, #113	@ 0x71
 8001166:	d001      	beq.n	800116c <MPU9250_Init+0x36>
 8001168:	2301      	movs	r3, #1
 800116a:	e014      	b.n	8001196 <MPU9250_Init+0x60>

    // Wake up device (clear sleep bit)
    data = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Mem_Write(hi2c, MPU9250_ADDR, PWR_MGMT_1, 1, &data, 1, 100) != HAL_OK)
 8001170:	2364      	movs	r3, #100	@ 0x64
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2301      	movs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	f107 030e 	add.w	r3, r7, #14
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	226b      	movs	r2, #107	@ 0x6b
 8001182:	21d0      	movs	r1, #208	@ 0xd0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 fecf 	bl	8002f28 <HAL_I2C_Mem_Write>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MPU9250_Init+0x5e>
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <MPU9250_Init+0x60>

    return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MPU9250_ReadAccelX>:

HAL_StatusTypeDef MPU9250_ReadAccelX(I2C_HandleTypeDef *hi2c, float *ax) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    uint8_t rawData[2];
    int16_t rawAccelX;

    if (HAL_I2C_Mem_Read(hi2c, MPU9250_ADDR, ACCEL_XOUT_H, 1, rawData, 2, 100) != HAL_OK)
 80011aa:	2364      	movs	r3, #100	@ 0x64
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	223b      	movs	r2, #59	@ 0x3b
 80011bc:	21d0      	movs	r1, #208	@ 0xd0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 ffac 	bl	800311c <HAL_I2C_Mem_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MPU9250_ReadAccelX+0x2e>
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e015      	b.n	80011fa <MPU9250_ReadAccelX+0x5a>

    rawAccelX = (int16_t)((rawData[0] << 8) | rawData[1]);
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	81fb      	strh	r3, [r7, #14]
    *ax = ((float)rawAccelX) / 16384.0f;  // ±2g range
 80011de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ea:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001204 <MPU9250_ReadAccelX+0x64>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	46800000 	.word	0x46800000

08001208 <packet_build_json>:
 * @param outsize         Size of the output buffer
 * @return int            Number of characters written to the buffer
 */

int packet_build_json(const SensorPacket* p, char* output_buffer, int outsize)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    int number_of_character = 0;   // How many chars have been written
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    int wrote_character = 0;       // Whether a field has already been written
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]

    // Start JSON object
    number_of_character += snprintf(output_buffer + number_of_character,
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	18d0      	adds	r0, r2, r3
                                    outsize - number_of_character,
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	1ad3      	subs	r3, r2, r3
    number_of_character += snprintf(output_buffer + number_of_character,
 8001228:	4a7a      	ldr	r2, [pc, #488]	@ (8001414 <packet_build_json+0x20c>)
 800122a:	4619      	mov	r1, r3
 800122c:	f008 fb62 	bl	80098f4 <sniprintf>
 8001230:	4602      	mov	r2, r0
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
                                    "{");

    // Temperature field
    if (p->valid & V_TEMP) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d021      	beq.n	800128a <packet_build_json+0x82>
        number_of_character += snprintf(output_buffer + number_of_character,
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	18d4      	adds	r4, r2, r3
                                        outsize - number_of_character,
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 8001252:	461e      	mov	r6, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <packet_build_json+0x56>
 800125a:	4d6f      	ldr	r5, [pc, #444]	@ (8001418 <packet_build_json+0x210>)
 800125c:	e000      	b.n	8001260 <packet_build_json+0x58>
 800125e:	4d6f      	ldr	r5, [pc, #444]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"temperature\":%.2f",
                                        wrote_character ? "," : "",
                                        p->temperature);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
        number_of_character += snprintf(output_buffer + number_of_character,
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f977 	bl	8000558 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9cd 2300 	strd	r2, r3, [sp]
 8001272:	462b      	mov	r3, r5
 8001274:	4a6a      	ldr	r2, [pc, #424]	@ (8001420 <packet_build_json+0x218>)
 8001276:	4631      	mov	r1, r6
 8001278:	4620      	mov	r0, r4
 800127a:	f008 fb3b 	bl	80098f4 <sniprintf>
 800127e:	4602      	mov	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
        wrote_character = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
    }

    // Acceleration X field
    if (p->valid & V_ACCEL_X) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d021      	beq.n	80012dc <packet_build_json+0xd4>
        number_of_character += snprintf(output_buffer + number_of_character,
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	18d4      	adds	r4, r2, r3
                                        outsize - number_of_character,
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 80012a4:	461e      	mov	r6, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <packet_build_json+0xa8>
 80012ac:	4d5a      	ldr	r5, [pc, #360]	@ (8001418 <packet_build_json+0x210>)
 80012ae:	e000      	b.n	80012b2 <packet_build_json+0xaa>
 80012b0:	4d5a      	ldr	r5, [pc, #360]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"acceleration_x\":%.3f",
                                        wrote_character ? "," : "",
                                        p->acceleration_x);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
        number_of_character += snprintf(output_buffer + number_of_character,
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f94e 	bl	8000558 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9cd 2300 	strd	r2, r3, [sp]
 80012c4:	462b      	mov	r3, r5
 80012c6:	4a57      	ldr	r2, [pc, #348]	@ (8001424 <packet_build_json+0x21c>)
 80012c8:	4631      	mov	r1, r6
 80012ca:	4620      	mov	r0, r4
 80012cc:	f008 fb12 	bl	80098f4 <sniprintf>
 80012d0:	4602      	mov	r2, r0
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        wrote_character = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
    }

    // Sound level field
    if (p->valid & V_SOUND) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d019      	beq.n	800131e <packet_build_json+0x116>
        number_of_character += snprintf(output_buffer + number_of_character,
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	18d0      	adds	r0, r2, r3
                                        outsize - number_of_character,
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 80012f6:	4619      	mov	r1, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <packet_build_json+0xfa>
 80012fe:	4a46      	ldr	r2, [pc, #280]	@ (8001418 <packet_build_json+0x210>)
 8001300:	e000      	b.n	8001304 <packet_build_json+0xfc>
 8001302:	4a46      	ldr	r2, [pc, #280]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"sound_level\":%u",
                                        wrote_character ? "," : "",
                                        (unsigned)p->sound_level);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	891b      	ldrh	r3, [r3, #8]
        number_of_character += snprintf(output_buffer + number_of_character,
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <packet_build_json+0x220>)
 800130e:	f008 faf1 	bl	80098f4 <sniprintf>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4413      	add	r3, r2
 8001318:	617b      	str	r3, [r7, #20]
        wrote_character = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
    }

    // Humidity field
    if (p->valid & V_HUMIDITY) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d019      	beq.n	8001360 <packet_build_json+0x158>
        number_of_character += snprintf(output_buffer + number_of_character,
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	18d0      	adds	r0, r2, r3
                                        outsize - number_of_character,
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 8001338:	4619      	mov	r1, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <packet_build_json+0x13c>
 8001340:	4a35      	ldr	r2, [pc, #212]	@ (8001418 <packet_build_json+0x210>)
 8001342:	e000      	b.n	8001346 <packet_build_json+0x13e>
 8001344:	4a35      	ldr	r2, [pc, #212]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"humidity\":%u",
                                        wrote_character ? "," : "",
                                        (unsigned)p->humidity);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7a9b      	ldrb	r3, [r3, #10]
        number_of_character += snprintf(output_buffer + number_of_character,
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4613      	mov	r3, r2
 800134e:	4a37      	ldr	r2, [pc, #220]	@ (800142c <packet_build_json+0x224>)
 8001350:	f008 fad0 	bl	80098f4 <sniprintf>
 8001354:	4602      	mov	r2, r0
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
        wrote_character = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
    }



    // Timestamp field
    if (p->valid & V_TIME) {
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <packet_build_json+0x19a>
        number_of_character += snprintf(output_buffer + number_of_character,
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	18d0      	adds	r0, r2, r3
                                        outsize - number_of_character,
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 800137a:	4619      	mov	r1, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <packet_build_json+0x17e>
 8001382:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <packet_build_json+0x210>)
 8001384:	e000      	b.n	8001388 <packet_build_json+0x180>
 8001386:	4a25      	ldr	r2, [pc, #148]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"timestamp_ms\":%lu",
                                        wrote_character ? "," : "",
                                        (unsigned long)p->timestamp_ms);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68db      	ldr	r3, [r3, #12]
        number_of_character += snprintf(output_buffer + number_of_character,
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4613      	mov	r3, r2
 8001390:	4a27      	ldr	r2, [pc, #156]	@ (8001430 <packet_build_json+0x228>)
 8001392:	f008 faaf 	bl	80098f4 <sniprintf>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

        wrote_character = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
    }

    // Timestamp (RTC string)
    if (p->valid & V_TIME && p->timestamp_str[0] != '\0') {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01d      	beq.n	80013ec <packet_build_json+0x1e4>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	7c1b      	ldrb	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d019      	beq.n	80013ec <packet_build_json+0x1e4>
        number_of_character += snprintf(output_buffer + number_of_character,
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	18d0      	adds	r0, r2, r3
                                        outsize - number_of_character,
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
        number_of_character += snprintf(output_buffer + number_of_character,
 80013c4:	4619      	mov	r1, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <packet_build_json+0x1c8>
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <packet_build_json+0x210>)
 80013ce:	e000      	b.n	80013d2 <packet_build_json+0x1ca>
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <packet_build_json+0x214>)
                                        "%s\"timestamp_date\":\"%s\"",
                                        wrote_character ? "," : "",
                                        p->timestamp_str);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3310      	adds	r3, #16
        number_of_character += snprintf(output_buffer + number_of_character,
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	4a16      	ldr	r2, [pc, #88]	@ (8001434 <packet_build_json+0x22c>)
 80013dc:	f008 fa8a 	bl	80098f4 <sniprintf>
 80013e0:	4602      	mov	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
        wrote_character = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
    }

    // Close JSON object
    number_of_character += snprintf(output_buffer + number_of_character,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	18d0      	adds	r0, r2, r3
                                    outsize - number_of_character,
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
    number_of_character += snprintf(output_buffer + number_of_character,
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <packet_build_json+0x230>)
 80013fa:	4619      	mov	r1, r3
 80013fc:	f008 fa7a 	bl	80098f4 <sniprintf>
 8001400:	4602      	mov	r2, r0
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
                                    "}\n");

    return number_of_character;
 8001408:	697b      	ldr	r3, [r7, #20]
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001412:	bf00      	nop
 8001414:	0800d2b8 	.word	0x0800d2b8
 8001418:	0800d2bc 	.word	0x0800d2bc
 800141c:	0800d2c0 	.word	0x0800d2c0
 8001420:	0800d2c4 	.word	0x0800d2c4
 8001424:	0800d2dc 	.word	0x0800d2dc
 8001428:	0800d2f4 	.word	0x0800d2f4
 800142c:	0800d308 	.word	0x0800d308
 8001430:	0800d318 	.word	0x0800d318
 8001434:	0800d330 	.word	0x0800d330
 8001438:	0800d348 	.word	0x0800d348

0800143c <RTC_GetTimestamp>:
  * @param  buffer : çıktı string
  * @param  bufsize: buffer boyutu
  * @retval none
  */
void RTC_GetTimestamp(char *buffer, uint16_t bufsize)
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	b08f      	sub	sp, #60	@ 0x3c
 8001440:	af06      	add	r7, sp, #24
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	480f      	ldr	r0, [pc, #60]	@ (8001490 <RTC_GetTimestamp+0x54>)
 8001452:	f003 fade 	bl	8004a12 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	@ (8001490 <RTC_GetTimestamp+0x54>)
 8001460:	f003 fbb9 	bl	8004bd6 <HAL_RTC_GetDate>

    snprintf(buffer, bufsize,
 8001464:	8879      	ldrh	r1, [r7, #2]
             "%04d-%02d-%02d %02d:%02d:%02d",
             2000 + sDate.Year,
 8001466:	7afb      	ldrb	r3, [r7, #11]
    snprintf(buffer, bufsize,
 8001468:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
             sDate.Month,
 800146c:	7a7a      	ldrb	r2, [r7, #9]
             sDate.Date,
 800146e:	7ab8      	ldrb	r0, [r7, #10]
             sTime.Hours,
 8001470:	7b3c      	ldrb	r4, [r7, #12]
             sTime.Minutes,
 8001472:	7b7d      	ldrb	r5, [r7, #13]
             sTime.Seconds);
 8001474:	7bbe      	ldrb	r6, [r7, #14]
    snprintf(buffer, bufsize,
 8001476:	9604      	str	r6, [sp, #16]
 8001478:	9503      	str	r5, [sp, #12]
 800147a:	9402      	str	r4, [sp, #8]
 800147c:	9001      	str	r0, [sp, #4]
 800147e:	9200      	str	r2, [sp, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <RTC_GetTimestamp+0x58>)
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f008 fa36 	bl	80098f4 <sniprintf>
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	@ 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	200002c0 	.word	0x200002c0
 8001494:	0800d34c 	.word	0x0800d34c

08001498 <TMP102_ReadTemperature>:

#include"tmp102.h"

HAL_StatusTypeDef TMP102_ReadTemperature(I2C_HandleTypeDef *hi2c, float *temperature)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];

	HAL_StatusTypeDef status;

	// TMP102 register 0x00 = temperature
	status = HAL_I2C_Mem_Read(hi2c, TMP102_I2C_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 80014a2:	2364      	movs	r3, #100	@ 0x64
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2302      	movs	r3, #2
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2200      	movs	r2, #0
 80014b4:	2190      	movs	r1, #144	@ 0x90
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fe30 	bl	800311c <HAL_I2C_Mem_Read>
 80014bc:	4603      	mov	r3, r0
 80014be:	737b      	strb	r3, [r7, #13]

	if(status == HAL_OK){
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d121      	bne.n	800150a <TMP102_ReadTemperature+0x72>
		int16_t raw = (buffer[0] <<4 | (buffer[1] >>4));
 80014c6:	7a3b      	ldrb	r3, [r7, #8]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	7a7b      	ldrb	r3, [r7, #9]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	81fb      	strh	r3, [r7, #14]

	// Negative temperature check (12-bit two’s complement)
	if(raw & 0x800) {
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <TMP102_ReadTemperature+0x58>

		raw |= 0xF000;
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80014ea:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80014ee:	81fb      	strh	r3, [r7, #14]
	}

	*temperature = raw * 0.0625f;
 80014f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001514 <TMP102_ReadTemperature+0x7c>
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	edc3 7a00 	vstr	s15, [r3]
	}

	return status;
 800150a:	7b7b      	ldrb	r3, [r7, #13]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	3d800000 	.word	0x3d800000

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fe8b 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f875 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fa17 	bl	8001958 <MX_GPIO_Init>
  MX_I2C1_Init();
 800152a:	f000 f92d 	bl	8001788 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800152e:	f000 f9e9 	bl	8001904 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001532:	f000 f9b1 	bl	8001898 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001536:	f000 f8d5 	bl	80016e4 <MX_ADC1_Init>
  MX_RTC_Init();
 800153a:	f000 f953 	bl	80017e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MPU9250_Init(&hi2c1);
 800153e:	482b      	ldr	r0, [pc, #172]	@ (80015ec <main+0xd4>)
 8001540:	f7ff fdf9 	bl	8001136 <MPU9250_Init>

  uartMutex = xSemaphoreCreateMutex();
 8001544:	2001      	movs	r0, #1
 8001546:	f004 fdac 	bl	80060a2 <xQueueCreateMutex>
 800154a:	4603      	mov	r3, r0
 800154c:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <main+0xd8>)
 800154e:	6013      	str	r3, [r2, #0]
  configASSERT(uartMutex != NULL);
 8001550:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <main+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10b      	bne.n	8001570 <main+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Create Queue
	sensorQueue = xQueueCreate(8, sizeof(SensorPacket));
 8001570:	2200      	movs	r2, #0
 8001572:	2128      	movs	r1, #40	@ 0x28
 8001574:	2008      	movs	r0, #8
 8001576:	f004 fd1c 	bl	8005fb2 <xQueueGenericCreate>
 800157a:	4603      	mov	r3, r0
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <main+0xdc>)
 800157e:	6013      	str	r3, [r2, #0]
	if (sensorQueue == NULL) {
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <main+0xdc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d117      	bne.n	80015b8 <main+0xa0>
		char err[] = "Queue not created!\r\n";
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <main+0xe0>)
 800158a:	1d3c      	adds	r4, r7, #4
 800158c:	461d      	mov	r5, r3
 800158e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001592:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001596:	6020      	str	r0, [r4, #0]
 8001598:	3404      	adds	r4, #4
 800159a:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) err, strlen(err), HAL_MAX_DELAY);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe6e 	bl	8000280 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	1d39      	adds	r1, r7, #4
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	4813      	ldr	r0, [pc, #76]	@ (80015fc <main+0xe4>)
 80015b0:	f003 ff64 	bl	800547c <HAL_UART_Transmit>
		while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <main+0x9c>
			; // kilitlen
	}

	//CreateTask
	xTaskCreate(SensorTask, "Sensor", 512, NULL, tskIDLE_PRIORITY+2, NULL);
 80015b8:	2300      	movs	r3, #0
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c6:	490e      	ldr	r1, [pc, #56]	@ (8001600 <main+0xe8>)
 80015c8:	480e      	ldr	r0, [pc, #56]	@ (8001604 <main+0xec>)
 80015ca:	f005 fafb 	bl	8006bc4 <xTaskCreate>
	xTaskCreate(UartTxTask, "UART",   512, NULL, tskIDLE_PRIORITY+3, NULL);
 80015ce:	2300      	movs	r3, #0
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2303      	movs	r3, #3
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2300      	movs	r3, #0
 80015d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015dc:	490a      	ldr	r1, [pc, #40]	@ (8001608 <main+0xf0>)
 80015de:	480b      	ldr	r0, [pc, #44]	@ (800160c <main+0xf4>)
 80015e0:	f005 faf0 	bl	8006bc4 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 80015e4:	f005 fc82 	bl	8006eec <vTaskStartScheduler>

	while (1) {
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <main+0xd0>
 80015ec:	2000026c 	.word	0x2000026c
 80015f0:	20000384 	.word	0x20000384
 80015f4:	20000380 	.word	0x20000380
 80015f8:	0800d388 	.word	0x0800d388
 80015fc:	20000338 	.word	0x20000338
 8001600:	0800d378 	.word	0x0800d378
 8001604:	08001a11 	.word	0x08001a11
 8001608:	0800d380 	.word	0x0800d380
 800160c:	08001ba1 	.word	0x08001ba1

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	@ 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	@ 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f008 fa03 	bl	8009a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <SystemClock_Config+0xcc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <SystemClock_Config+0xd0>)
 800165a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800166c:	230a      	movs	r3, #10
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001674:	2310      	movs	r3, #16
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001684:	2308      	movs	r3, #8
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001688:	2348      	movs	r3, #72	@ 0x48
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168c:	2302      	movs	r3, #2
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001690:	2304      	movs	r3, #4
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fb25 	bl	8003ce8 <HAL_RCC_OscConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016a4:	f000 fab4 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a8:	230f      	movs	r3, #15
 80016aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ac:	2302      	movs	r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2102      	movs	r1, #2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fd87 	bl	80041d8 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016d0:	f000 fa9e 	bl	8001c10 <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3750      	adds	r7, #80	@ 0x50
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_ADC1_Init+0x98>)
 80016f8:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <MX_ADC1_Init+0x9c>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MX_ADC1_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_ADC1_Init+0x98>)
 8001710:	2201      	movs	r2, #1
 8001712:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_ADC1_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_ADC1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_ADC1_Init+0x98>)
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <MX_ADC1_Init+0xa0>)
 8001726:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_ADC1_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_ADC1_Init+0x98>)
 8001730:	2201      	movs	r2, #1
 8001732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_ADC1_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_ADC1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001742:	480e      	ldr	r0, [pc, #56]	@ (800177c <MX_ADC1_Init+0x98>)
 8001744:	f000 fdba 	bl	80022bc <HAL_ADC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 fa5f 	bl	8001c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_ADC1_Init+0x98>)
 8001764:	f000 fdee 	bl	8002344 <HAL_ADC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800176e:	f000 fa4f 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000224 	.word	0x20000224
 8001780:	40012000 	.word	0x40012000
 8001784:	0f000001 	.word	0x0f000001

08001788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x50>)
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <MX_I2C1_Init+0x54>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C1_Init+0x50>)
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <MX_I2C1_Init+0x58>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017c6:	f001 fa6b 	bl	8002ca0 <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f000 fa1e 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000026c 	.word	0x2000026c
 80017dc:	40005400 	.word	0x40005400
 80017e0:	000186a0 	.word	0x000186a0

080017e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_RTC_Init+0xac>)
 80017fe:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <MX_RTC_Init+0xb0>)
 8001800:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <MX_RTC_Init+0xac>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_RTC_Init+0xac>)
 800180a:	227f      	movs	r2, #127	@ 0x7f
 800180c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MX_RTC_Init+0xac>)
 8001810:	22ff      	movs	r2, #255	@ 0xff
 8001812:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MX_RTC_Init+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_RTC_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <MX_RTC_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001826:	481a      	ldr	r0, [pc, #104]	@ (8001890 <MX_RTC_Init+0xac>)
 8001828:	f002 ffd8 	bl	80047dc <HAL_RTC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 f9ed 	bl	8001c10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8001836:	2310      	movs	r3, #16
 8001838:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 800183a:	2315      	movs	r3, #21
 800183c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800183e:	2300      	movs	r3, #0
 8001840:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	480f      	ldr	r0, [pc, #60]	@ (8001890 <MX_RTC_Init+0xac>)
 8001852:	f003 f844 	bl	80048de <HAL_RTC_SetTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 f9d8 	bl	8001c10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001860:	2302      	movs	r3, #2
 8001862:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001864:	2310      	movs	r3, #16
 8001866:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x14;
 8001868:	2314      	movs	r3, #20
 800186a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x25;
 800186c:	2325      	movs	r3, #37	@ 0x25
 800186e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <MX_RTC_Init+0xac>)
 8001878:	f003 f929 	bl	8004ace <HAL_RTC_SetDate>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001882:	f000 f9c5 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002c0 	.word	0x200002c0
 8001894:	40002800 	.word	0x40002800

08001898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <MX_SPI1_Init+0x64>)
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <MX_SPI1_Init+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018e4:	220a      	movs	r2, #10
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_SPI1_Init+0x64>)
 80018ea:	f003 fa81 	bl	8004df0 <HAL_SPI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018f4:	f000 f98c 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200002e0 	.word	0x200002e0
 8001900:	40013000 	.word	0x40013000

08001904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <MX_USART1_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800193c:	f003 fd4e 	bl	80053dc <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001946:	f000 f963 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000338 	.word	0x20000338
 8001954:	40011000 	.word	0x40011000

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a24      	ldr	r2, [pc, #144]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_GPIO_Init+0xb0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2116      	movs	r1, #22
 80019c6:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <MX_GPIO_Init+0xb4>)
 80019c8:	f001 f950 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 80019cc:	2316      	movs	r3, #22
 80019ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <MX_GPIO_Init+0xb4>)
 80019e4:	f000 ffbe 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 80019e8:	2308      	movs	r3, #8
 80019ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_GPIO_Init+0xb4>)
 80019fc:	f000 ffb2 	bl	8002964 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <SensorTask>:
    }
}*/



void SensorTask(void *pvParameters) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	@ 0x40
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

    // --- EMA için state (son değer saklama) ---
    static float acc_x_last = 0.0f;

    for (;;) {
        memset(&packet, 0, sizeof(packet));  // tüm alanları temizle
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2228      	movs	r2, #40	@ 0x28
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 f802 	bl	8009a2a <memset>

        // --- Temperature (TMP102) ---
        float temp_raw = 0.0f;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
        if (TMP102_ReadTemperature(&hi2c1, &temp_raw) == HAL_OK) {
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	4832      	ldr	r0, [pc, #200]	@ (8001afc <SensorTask+0xec>)
 8001a34:	f7ff fd30 	bl	8001498 <TMP102_ReadTemperature>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d111      	bne.n	8001a62 <SensorTask+0x52>
            float temp_filtered = moving_average(temp_raw);  // filtre uygula
 8001a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	f7ff faf3 	bl	8001030 <moving_average>
 8001a4a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
            packet.temperature = temp_filtered;
 8001a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a50:	613b      	str	r3, [r7, #16]
            packet.valid |= V_TEMP;
 8001a52:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001a60:	e002      	b.n	8001a68 <SensorTask+0x58>
        } else {
            uart_safe_print("Temperature (TMP102) read failed!\r\n");
 8001a62:	4827      	ldr	r0, [pc, #156]	@ (8001b00 <SensorTask+0xf0>)
 8001a64:	f000 f88a 	bl	8001b7c <uart_safe_print>
        }

        // --- Timestamp ---
        packet.timestamp_ms = HAL_GetTick();
 8001a68:	f000 fc1c 	bl	80022a4 <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	61fb      	str	r3, [r7, #28]
        RTC_GetTimestamp(packet.timestamp_str, sizeof(packet.timestamp_str));
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	3310      	adds	r3, #16
 8001a76:	2114      	movs	r1, #20
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fcdf 	bl	800143c <RTC_GetTimestamp>
        packet.valid |= V_TIME;
 8001a7e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

        // --- Accelerometer X (MPU9250) ---
        float acc_x_raw = 0.0f;
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
        if (MPU9250_ReadAccelX(&hi2c1, &acc_x_raw) == HAL_OK) {
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4619      	mov	r1, r3
 8001a98:	4818      	ldr	r0, [pc, #96]	@ (8001afc <SensorTask+0xec>)
 8001a9a:	f7ff fb81 	bl	80011a0 <MPU9250_ReadAccelX>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d114      	bne.n	8001ace <SensorTask+0xbe>
            float acc_x_filtered = ema_filter(acc_x_raw, &acc_x_last, 0.1f);
 8001aa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001b04 <SensorTask+0xf4>
 8001aac:	4816      	ldr	r0, [pc, #88]	@ (8001b08 <SensorTask+0xf8>)
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	f7ff fb17 	bl	80010e4 <ema_filter>
 8001ab6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
            packet.acceleration_x = acc_x_filtered;
 8001aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001abc:	617b      	str	r3, [r7, #20]
            packet.valid |= V_ACCEL_X;
 8001abe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001acc:	e002      	b.n	8001ad4 <SensorTask+0xc4>
        } else {
            uart_safe_print("MPU9250 accel X read failed!\r\n");
 8001ace:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <SensorTask+0xfc>)
 8001ad0:	f000 f854 	bl	8001b7c <uart_safe_print>
        }

        // --- Kuyruğa gönder ---
        if (xQueueSend(sensorQueue, &packet, portMAX_DELAY) != pdPASS) {
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <SensorTask+0x100>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f107 0110 	add.w	r1, r7, #16
 8001adc:	2300      	movs	r3, #0
 8001ade:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae2:	f004 faf7 	bl	80060d4 <xQueueGenericSend>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d002      	beq.n	8001af2 <SensorTask+0xe2>
            uart_safe_print("SensorTask: Queue send failed!\r\n");
 8001aec:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <SensorTask+0x104>)
 8001aee:	f000 f845 	bl	8001b7c <uart_safe_print>
        }

        // --- Delay ---
        vTaskDelay(pdMS_TO_TICKS(2000)); // 2 saniyede bir ölçüm
 8001af2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001af6:	f005 f9c3 	bl	8006e80 <vTaskDelay>
    for (;;) {
 8001afa:	e78d      	b.n	8001a18 <SensorTask+0x8>
 8001afc:	2000026c 	.word	0x2000026c
 8001b00:	0800d3a0 	.word	0x0800d3a0
 8001b04:	3dcccccd 	.word	0x3dcccccd
 8001b08:	20000388 	.word	0x20000388
 8001b0c:	0800d3c4 	.word	0x0800d3c4
 8001b10:	20000380 	.word	0x20000380
 8001b14:	0800d3e4 	.word	0x0800d3e4

08001b18 <uart_safe_write>:
/* ------------------------------------------------------------------ */
/* UartTxTask: reads values from the queue and sends over UART    */
/* ------------------------------------------------------------------ */

static void uart_safe_write(const uint8_t *data, uint16_t len, TickType_t timeoutTicks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	460b      	mov	r3, r1
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	817b      	strh	r3, [r7, #10]
	if(uartMutex == NULL){
 8001b26:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <uart_safe_write+0x5c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d107      	bne.n	8001b3e <uart_safe_write+0x26>
		// fallback (mutex yoksa yine de yaz)
		HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001b2e:	897a      	ldrh	r2, [r7, #10]
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <uart_safe_write+0x60>)
 8001b38:	f003 fca0 	bl	800547c <HAL_UART_Transmit>
		return;
 8001b3c:	e016      	b.n	8001b6c <uart_safe_write+0x54>
	}

	if(xSemaphoreTake(uartMutex, timeoutTicks) == pdTRUE){
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <uart_safe_write+0x5c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fd47 	bl	80065d8 <xQueueSemaphoreTake>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <uart_safe_write+0x54>
		HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	4807      	ldr	r0, [pc, #28]	@ (8001b78 <uart_safe_write+0x60>)
 8001b5a:	f003 fc8f 	bl	800547c <HAL_UART_Transmit>
		xSemaphoreGive(uartMutex);
 8001b5e:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <uart_safe_write+0x5c>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	f004 fab4 	bl	80060d4 <xQueueGenericSend>
	}else {
		// İsteğe bağlı: burada bir “missed log” sayacı tutabilirsin
	}
}
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000384 	.word	0x20000384
 8001b78:	20000338 	.word	0x20000338

08001b7c <uart_safe_print>:

static void uart_safe_print(const char *s)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	uart_safe_write((const uint8_t*)s, (uint16_t)strlen(s), pdMS_TO_TICKS(20));
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fb7b 	bl	8000280 <strlen>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2214      	movs	r2, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffc0 	bl	8001b18 <uart_safe_write>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <UartTxTask>:


void UartTxTask(void *pvParameters) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	char buffer[128];
	int len;

	for (;;) {
		// Queue’dan paket bekle
		if (xQueueReceive(sensorQueue, &packet, portMAX_DELAY) == pdTRUE) {
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <UartTxTask+0x48>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fc2d 	bl	8006414 <xQueueReceive>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d1f3      	bne.n	8001ba8 <UartTxTask+0x8>
			len = packet_build_json(&packet, buffer, sizeof(buffer));
 8001bc0:	f107 010c 	add.w	r1, r7, #12
 8001bc4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fb1c 	bl	8001208 <packet_build_json>
 8001bd0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
			uart_safe_write((uint8_t*)buffer, (uint16_t)len, pdMS_TO_TICKS(50));
 8001bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	2232      	movs	r2, #50	@ 0x32
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff99 	bl	8001b18 <uart_safe_write>
		if (xQueueReceive(sensorQueue, &packet, portMAX_DELAY) == pdTRUE) {
 8001be6:	e7df      	b.n	8001ba8 <UartTxTask+0x8>
 8001be8:	20000380 	.word	0x20000380

08001bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001bfe:	f000 fb3d 	bl	800227c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <Error_Handler+0x8>

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_MspInit+0x54>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	f06f 0001 	mvn.w	r0, #1
 8001c62:	f000 fe55 	bl	8002910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_ADC_MspInit+0x7c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d127      	bne.n	8001ce6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <HAL_ADC_MspInit+0x80>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <HAL_ADC_MspInit+0x84>)
 8001ce2:	f000 fe3f 	bl	8002964 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_I2C_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d3a:	23c0      	movs	r3, #192	@ 0xc0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3e:	2312      	movs	r3, #18
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <HAL_I2C_MspInit+0x8c>)
 8001d56:	f000 fe05 	bl	8002964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	@ 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_RTC_MspInit+0x50>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001db0:	2302      	movs	r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fc1c 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dca:	f7ff ff21 	bl	8001c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <HAL_RTC_MspInit+0x54>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40002800 	.word	0x40002800
 8001de0:	42470e3c 	.word	0x42470e3c

08001de4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_SPI_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e3e:	23e0      	movs	r3, #224	@ 0xe0
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e5a:	f000 fd83 	bl	8002964 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_UART_MspInit+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12c      	bne.n	8001ef0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_UART_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ece:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <HAL_UART_MspInit+0x8c>)
 8001eec:	f000 fd3a 	bl	8002964 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	@ 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_InitTick+0xd0>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <HAL_InitTick+0xd0>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_InitTick+0xd0>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f30:	f107 020c 	add.w	r2, r7, #12
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fb2c 	bl	8004598 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f40:	f002 fb16 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8001f44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f48:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_InitTick+0xd4>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	3b01      	subs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f56:	4a22      	ldr	r2, [pc, #136]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f58:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f7a:	4818      	ldr	r0, [pc, #96]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f7c:	f002 ffc1 	bl	8004f02 <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f8e:	4813      	ldr	r0, [pc, #76]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f90:	f003 f810 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d111      	bne.n	8001fc6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f000 fcd0 	bl	8002948 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d808      	bhi.n	8001fc0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	2019      	movs	r0, #25
 8001fb4:	f000 fcac 	bl	8002910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_InitTick+0xe0>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e002      	b.n	8001fc6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3730      	adds	r7, #48	@ 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	2000038c 	.word	0x2000038c
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <NMI_Handler+0x4>

08001ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <MemManage_Handler+0x4>

08002000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <UsageFault_Handler+0x4>

08002010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002026:	f003 f827 	bl	8005078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000038c 	.word	0x2000038c

08002034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_kill>:

int _kill(int pid, int sig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204e:	f007 fd9d 	bl	8009b8c <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	2216      	movs	r2, #22
 8002056:	601a      	str	r2, [r3, #0]
  return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_exit>:

void _exit (int status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffe7 	bl	8002044 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002076:	bf00      	nop
 8002078:	e7fd      	b.n	8002076 <_exit+0x12>

0800207a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e00a      	b.n	80020a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208c:	f3af 8000 	nop.w
 8002090:	4601      	mov	r1, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbf0      	blt.n	800208c <_read+0x12>
  }

  return len;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e009      	b.n	80020da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	60ba      	str	r2, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbf1      	blt.n	80020c6 <_write+0x12>
  }
  return len;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_close>:

int _close(int file)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002114:	605a      	str	r2, [r3, #4]
  return 0;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_isatty>:

int _isatty(int file)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f007 fd02 	bl	8009b8c <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20020000 	.word	0x20020000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	200003d4 	.word	0x200003d4
 80021bc:	20004f10 	.word	0x20004f10

080021c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SystemInit+0x20>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <SystemInit+0x20>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e8:	f7ff ffea 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f007 fcc1 	bl	8009b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002216:	f7ff f97f 	bl	8001518 <main>
  bx  lr    
 800221a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800221c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002228:	0800d874 	.word	0x0800d874
  ldr r2, =_sbss
 800222c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002230:	20004f0c 	.word	0x20004f0c

08002234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <HAL_Init+0x40>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_Init+0x40>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_Init+0x40>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 fb4a 	bl	80028fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	200f      	movs	r0, #15
 8002268:	f7ff fe4c 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fcd6 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	200003d8 	.word	0x200003d8

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200003d8 	.word	0x200003d8

080022bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e033      	b.n	800233a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fcca 	bl	8001c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002302:	f023 0302 	bic.w	r3, r3, #2
 8002306:	f043 0202 	orr.w	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f94a 	bl	80025a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
 800232a:	e001      	b.n	8002330 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c>
 800235c:	2302      	movs	r3, #2
 800235e:	e113      	b.n	8002588 <HAL_ADC_ConfigChannel+0x244>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b09      	cmp	r3, #9
 800236e:	d925      	bls.n	80023bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	3b1e      	subs	r3, #30
 8002386:	2207      	movs	r2, #7
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43da      	mvns	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	400a      	ands	r2, r1
 8002394:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68d9      	ldr	r1, [r3, #12]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4403      	add	r3, r0
 80023ae:	3b1e      	subs	r3, #30
 80023b0:	409a      	lsls	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	e022      	b.n	8002402 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6919      	ldr	r1, [r3, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	2207      	movs	r2, #7
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4403      	add	r3, r0
 80023f8:	409a      	lsls	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b06      	cmp	r3, #6
 8002408:	d824      	bhi.n	8002454 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b05      	subs	r3, #5
 800241c:	221f      	movs	r2, #31
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b05      	subs	r3, #5
 8002446:	fa00 f203 	lsl.w	r2, r0, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
 8002452:	e04c      	b.n	80024ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d824      	bhi.n	80024a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b23      	subs	r3, #35	@ 0x23
 800246e:	221f      	movs	r2, #31
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43da      	mvns	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	400a      	ands	r2, r1
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3b23      	subs	r3, #35	@ 0x23
 8002498:	fa00 f203 	lsl.w	r2, r0, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a4:	e023      	b.n	80024ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b41      	subs	r3, #65	@ 0x41
 80024b8:	221f      	movs	r2, #31
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	400a      	ands	r2, r1
 80024c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b41      	subs	r3, #65	@ 0x41
 80024e2:	fa00 f203 	lsl.w	r2, r0, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ee:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_ADC_ConfigChannel+0x250>)
 80024f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a28      	ldr	r2, [pc, #160]	@ (8002598 <HAL_ADC_ConfigChannel+0x254>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10f      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1d8>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b12      	cmp	r3, #18
 8002502:	d10b      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <HAL_ADC_ConfigChannel+0x254>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d12b      	bne.n	800257e <HAL_ADC_ConfigChannel+0x23a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1c      	ldr	r2, [pc, #112]	@ (800259c <HAL_ADC_ConfigChannel+0x258>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x1f4>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b11      	cmp	r3, #17
 8002536:	d122      	bne.n	800257e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_ADC_ConfigChannel+0x258>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d111      	bne.n	800257e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_ADC_ConfigChannel+0x25c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_ADC_ConfigChannel+0x260>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	0c9a      	lsrs	r2, r3, #18
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002570:	e002      	b.n	8002578 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3b01      	subs	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40012300 	.word	0x40012300
 8002598:	40012000 	.word	0x40012000
 800259c:	10000012 	.word	0x10000012
 80025a0:	20000000 	.word	0x20000000
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b0:	4b79      	ldr	r3, [pc, #484]	@ (8002798 <ADC_Init+0x1f0>)
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	4a58      	ldr	r2, [pc, #352]	@ (800279c <ADC_Init+0x1f4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	e00f      	b.n	80026a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0202 	bic.w	r2, r2, #2
 80026b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7e1b      	ldrb	r3, [r3, #24]
 80026c0:	005a      	lsls	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	3b01      	subs	r3, #1
 8002700:	035a      	lsls	r2, r3, #13
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	e007      	b.n	800271c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	3b01      	subs	r3, #1
 8002738:	051a      	lsls	r2, r3, #20
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800275e:	025a      	lsls	r2, r3, #9
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	029a      	lsls	r2, r3, #10
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40012300 	.word	0x40012300
 800279c:	0f000001 	.word	0x0f000001

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	@ (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	@ 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff4c 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002922:	f7ff ff61 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 8002926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f7ff ffb1 	bl	8002894 <NVIC_EncodePriority>
 8002932:	4602      	mov	r2, r0
 8002934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff80 	bl	8002840 <__NVIC_SetPriority>
}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff54 	bl	8002804 <__NVIC_EnableIRQ>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e159      	b.n	8002c34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	f040 8148 	bne.w	8002c2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d005      	beq.n	80029b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d130      	bne.n	8002a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 0201 	and.w	r2, r3, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d017      	beq.n	8002a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d123      	bne.n	8002aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	08da      	lsrs	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3208      	adds	r2, #8
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a2 	beq.w	8002c2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b57      	ldr	r3, [pc, #348]	@ (8002c4c <HAL_GPIO_Init+0x2e8>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_GPIO_Init+0x2e8>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b54      	ldr	r3, [pc, #336]	@ (8002c4c <HAL_GPIO_Init+0x2e8>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b06:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_GPIO_Init+0x2ec>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a49      	ldr	r2, [pc, #292]	@ (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x202>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a48      	ldr	r2, [pc, #288]	@ (8002c58 <HAL_GPIO_Init+0x2f4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x1fe>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a47      	ldr	r2, [pc, #284]	@ (8002c5c <HAL_GPIO_Init+0x2f8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x1fa>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a46      	ldr	r2, [pc, #280]	@ (8002c60 <HAL_GPIO_Init+0x2fc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x1f6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a45      	ldr	r2, [pc, #276]	@ (8002c64 <HAL_GPIO_Init+0x300>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x1f2>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	@ (8002c50 <HAL_GPIO_Init+0x2ec>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b86:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002baa:	4a2f      	ldr	r2, [pc, #188]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd4:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bda:	4b23      	ldr	r3, [pc, #140]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <HAL_GPIO_Init+0x304>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f aea2 	bls.w	8002980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	@ 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12b      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff f818 	bl	8001cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 fc20 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a81      	ldr	r2, [pc, #516]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a80      	ldr	r2, [pc, #512]	@ (8002f18 <HAL_I2C_Init+0x278>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7d      	ldr	r2, [pc, #500]	@ (8002f1c <HAL_I2C_Init+0x27c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0e7      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	@ (8002f20 <HAL_I2C_Init+0x280>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_I2C_Init+0x284>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	495c      	ldr	r1, [pc, #368]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d819      	bhi.n	8002ddc <HAL_I2C_Init+0x13c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_I2C_Init+0x138>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	e051      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e04f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_I2C_Init+0x168>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e012      	b.n	8002e2e <HAL_I2C_Init+0x18e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x196>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_Init+0x1bc>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e58      	subs	r0, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6911      	ldr	r1, [r2, #16]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	000186a0 	.word	0x000186a0
 8002f18:	001e847f 	.word	0x001e847f
 8002f1c:	003d08ff 	.word	0x003d08ff
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7ff f9af 	bl	80022a4 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	f040 80d9 	bne.w	8003108 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2319      	movs	r3, #25
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	496d      	ldr	r1, [pc, #436]	@ (8003114 <HAL_I2C_Mem_Write+0x1ec>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc8b 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0cc      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Mem_Write+0x56>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0c5      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d007      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2221      	movs	r2, #33	@ 0x21
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a4d      	ldr	r2, [pc, #308]	@ (8003118 <HAL_I2C_Mem_Write+0x1f0>)
 8002fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe6:	88f8      	ldrh	r0, [r7, #6]
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fac2 	bl	8003580 <I2C_RequestMemoryWrite>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d052      	beq.n	80030a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e081      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fd50 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	2b04      	cmp	r3, #4
 800301c:	d107      	bne.n	800302e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_I2C_Mem_Write+0x180>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1aa      	bne.n	8003006 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fd43 	bl	8003b40 <I2C_WaitOnBTFFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d107      	bne.n	80030d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e016      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000

0800311c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	@ 0x30
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003136:	f7ff f8b5 	bl	80022a4 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	f040 8214 	bne.w	8003572 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2319      	movs	r3, #25
 8003150:	2201      	movs	r2, #1
 8003152:	497b      	ldr	r1, [pc, #492]	@ (8003340 <HAL_I2C_Mem_Read+0x224>)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb91 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	e207      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_I2C_Mem_Read+0x56>
 800316e:	2302      	movs	r3, #2
 8003170:	e200      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d007      	beq.n	8003198 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2222      	movs	r2, #34	@ 0x22
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003344 <HAL_I2C_Mem_Read+0x228>)
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031da:	88f8      	ldrh	r0, [r7, #6]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4603      	mov	r3, r0
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa5e 	bl	80036ac <I2C_RequestMemoryRead>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1bc      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d113      	bne.n	800322a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e190      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	2b01      	cmp	r3, #1
 8003230:	d11b      	bne.n	800326a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e170      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	2b02      	cmp	r3, #2
 8003270:	d11b      	bne.n	80032aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003280:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	e150      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032c0:	e144      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f200 80f1 	bhi.w	80034ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d123      	bne.n	800331c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fc79 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e145      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800331a:	e117      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	2b02      	cmp	r3, #2
 8003322:	d14e      	bne.n	80033c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332a:	2200      	movs	r2, #0
 800332c:	4906      	ldr	r1, [pc, #24]	@ (8003348 <HAL_I2C_Mem_Read+0x22c>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 faa4 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e11a      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
 800333e:	bf00      	nop
 8003340:	00100002 	.word	0x00100002
 8003344:	ffff0000 	.word	0xffff0000
 8003348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c0:	e0c4      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	2200      	movs	r2, #0
 80033ca:	496c      	ldr	r1, [pc, #432]	@ (800357c <HAL_I2C_Mem_Read+0x460>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa55 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0cb      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	2200      	movs	r2, #0
 8003426:	4955      	ldr	r1, [pc, #340]	@ (800357c <HAL_I2C_Mem_Read+0x460>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fa27 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e09d      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034ac:	e04e      	b.n	800354c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fb8c 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e058      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d124      	bne.n	800354c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003518:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f aeb6 	bne.w	80032c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	@ 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010004 	.word	0x00010004

08003580 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	817b      	strh	r3, [r7, #10]
 8003592:	460b      	mov	r3, r1
 8003594:	813b      	strh	r3, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f960 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d0:	d103      	bne.n	80035da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e05f      	b.n	800369e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	492d      	ldr	r1, [pc, #180]	@ (80036a8 <I2C_RequestMemoryWrite+0x128>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9bb 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e04c      	b.n	800369e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa46 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e02b      	b.n	800369e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e021      	b.n	800369c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa20 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	2b04      	cmp	r3, #4
 800367c:	d107      	bne.n	800368e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e005      	b.n	800369e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	00010002 	.word	0x00010002

080036ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	817b      	strh	r3, [r7, #10]
 80036be:	460b      	mov	r3, r1
 80036c0:	813b      	strh	r3, [r7, #8]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8c2 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800370c:	d103      	bne.n	8003716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0aa      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	4952      	ldr	r1, [pc, #328]	@ (8003878 <I2C_RequestMemoryRead+0x1cc>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f91d 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e097      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003758:	6a39      	ldr	r1, [r7, #32]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f9a8 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	2b04      	cmp	r3, #4
 800376c:	d107      	bne.n	800377e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e076      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003788:	893b      	ldrh	r3, [r7, #8]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e021      	b.n	80037d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003794:	893b      	ldrh	r3, [r7, #8]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b29b      	uxth	r3, r3
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a4:	6a39      	ldr	r1, [r7, #32]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f982 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d107      	bne.n	80037ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e050      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ce:	893b      	ldrh	r3, [r7, #8]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	6a39      	ldr	r1, [r7, #32]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f967 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d107      	bne.n	8003800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e035      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2200      	movs	r2, #0
 800381c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f82b 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383a:	d103      	bne.n	8003844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e013      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	4906      	ldr	r1, [pc, #24]	@ (8003878 <I2C_RequestMemoryRead+0x1cc>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f886 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	00010002 	.word	0x00010002

0800387c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	e048      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d044      	beq.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe fd05 	bl	80022a4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d139      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10d      	bne.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	e00c      	b.n	80038ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d116      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e023      	b.n	8003968 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10d      	bne.n	8003946 <I2C_WaitOnFlagUntilTimeout+0xca>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	e00c      	b.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	429a      	cmp	r2, r3
 8003964:	d093      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397e:	e071      	b.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398e:	d123      	bne.n	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e067      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d041      	beq.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fe fc60 	bl	80022a4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d136      	bne.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10c      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e00b      	b.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e021      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10c      	bne.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	43da      	mvns	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e00b      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af6d 	bne.w	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003abc:	e034      	b.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f8e3 	bl	8003c8a <I2C_IsAcknowledgeFailed>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e034      	b.n	8003b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d028      	beq.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fbe5 	bl	80022a4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d1c3      	bne.n	8003abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	e034      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f89b 	bl	8003c8a <I2C_IsAcknowledgeFailed>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e034      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d028      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe fb9d 	bl	80022a4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d016      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1c3      	bne.n	8003b4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bdc:	e049      	b.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d119      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0210 	mvn.w	r2, #16
 8003bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e030      	b.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fe fb40 	bl	80022a4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d016      	beq.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b40      	cmp	r3, #64	@ 0x40
 8003c7e:	d1ae      	bne.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca0:	d11b      	bne.n	8003cda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003caa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e267      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d06:	4b88      	ldr	r3, [pc, #544]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e242      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b76      	ldr	r3, [pc, #472]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a75      	ldr	r2, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b70      	ldr	r3, [pc, #448]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6d      	ldr	r3, [pc, #436]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6c      	ldr	r2, [pc, #432]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b69      	ldr	r3, [pc, #420]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a68      	ldr	r2, [pc, #416]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a65      	ldr	r2, [pc, #404]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fa80 	bl	80022a4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fa7c 	bl	80022a4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e207      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fa6c 	bl	80022a4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fa68 	bl	80022a4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1f3      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b51      	ldr	r3, [pc, #324]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b47      	ldr	r3, [pc, #284]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b44      	ldr	r3, [pc, #272]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4937      	ldr	r1, [pc, #220]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b34      	ldr	r3, [pc, #208]	@ (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fa21 	bl	80022a4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fe fa1d 	bl	80022a4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1a8      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b2b      	ldr	r3, [pc, #172]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4925      	ldr	r1, [pc, #148]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fa00 	bl	80022a4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fe f9fc 	bl	80022a4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e187      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b1b      	ldr	r3, [pc, #108]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d036      	beq.n	8003f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f9e0 	bl	80022a4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe f9dc 	bl	80022a4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e167      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
 8003f06:	e01b      	b.n	8003f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f08:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe f9c9 	bl	80022a4 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	e00e      	b.n	8003f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe f9c5 	bl	80022a4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d907      	bls.n	8003f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e150      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	4b88      	ldr	r3, [pc, #544]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ea      	bne.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8097 	beq.w	800407c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f52:	4b81      	ldr	r3, [pc, #516]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b7d      	ldr	r3, [pc, #500]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a7c      	ldr	r2, [pc, #496]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b77      	ldr	r3, [pc, #476]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b74      	ldr	r3, [pc, #464]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a73      	ldr	r2, [pc, #460]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe f985 	bl	80022a4 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe f981 	bl	80022a4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e10c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ea>
 8003fc4:	4b64      	ldr	r3, [pc, #400]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4a63      	ldr	r2, [pc, #396]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x30c>
 8003fda:	4b5f      	ldr	r3, [pc, #380]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	4a5e      	ldr	r2, [pc, #376]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a5b      	ldr	r2, [pc, #364]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003ff4:	4b58      	ldr	r3, [pc, #352]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	4a57      	ldr	r2, [pc, #348]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004000:	4b55      	ldr	r3, [pc, #340]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a54      	ldr	r2, [pc, #336]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe f946 	bl	80022a4 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe f942 	bl	80022a4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0cb      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ee      	beq.n	800401c <HAL_RCC_OscConfig+0x334>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe f930 	bl	80022a4 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe f92c 	bl	80022a4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b5      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	4b3e      	ldr	r3, [pc, #248]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ee      	bne.n	8004048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	4a38      	ldr	r2, [pc, #224]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800407a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a1 	beq.w	80041c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004086:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d05c      	beq.n	800414c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d141      	bne.n	800411e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe f900 	bl	80022a4 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe f8fc 	bl	80022a4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e087      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	491b      	ldr	r1, [pc, #108]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe f8d5 	bl	80022a4 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe f8d1 	bl	80022a4 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e05c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x416>
 800411c:	e054      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe f8be 	bl	80022a4 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f8ba 	bl	80022a4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e038      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
 8004160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x4ec>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d028      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d121      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d11a      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800419a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0cc      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b68      	ldr	r3, [pc, #416]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d90c      	bls.n	8004214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b65      	ldr	r3, [pc, #404]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a58      	ldr	r2, [pc, #352]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a52      	ldr	r2, [pc, #328]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800424e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d119      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d003      	beq.n	8004296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b3f      	ldr	r3, [pc, #252]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e06f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e067      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4934      	ldr	r1, [pc, #208]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7fd ffec 	bl	80022a4 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fd ffe8 	bl	80022a4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e04f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d20c      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434a:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	@ (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fdc0 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023c00 	.word	0x40023c00
 8004394:	40023800 	.word	0x40023800
 8004398:	0800d420 	.word	0x0800d420
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004

080043a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b090      	sub	sp, #64	@ 0x40
 80043aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043bc:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d00d      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x40>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	f200 80a1 	bhi.w	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x34>
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x3a>
 80043d6:	e09b      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043dc:	e09b      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043de:	4b53      	ldr	r3, [pc, #332]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043e2:	e098      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d028      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	2200      	movs	r2, #0
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	627a      	str	r2, [r7, #36]	@ 0x24
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800440c:	2100      	movs	r1, #0
 800440e:	4b47      	ldr	r3, [pc, #284]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 8004410:	fb03 f201 	mul.w	r2, r3, r1
 8004414:	2300      	movs	r3, #0
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	4413      	add	r3, r2
 800441c:	4a43      	ldr	r2, [pc, #268]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 800441e:	fba0 1202 	umull	r1, r2, r0, r2
 8004422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004424:	460a      	mov	r2, r1
 8004426:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800442a:	4413      	add	r3, r2
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	2200      	movs	r2, #0
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	61fa      	str	r2, [r7, #28]
 8004436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800443e:	f7fc fc2b 	bl	8000c98 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4613      	mov	r3, r2
 8004448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800444a:	e053      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4b35      	ldr	r3, [pc, #212]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	2200      	movs	r2, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	617a      	str	r2, [r7, #20]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800445e:	f04f 0b00 	mov.w	fp, #0
 8004462:	4652      	mov	r2, sl
 8004464:	465b      	mov	r3, fp
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	ebb2 080a 	subs.w	r8, r2, sl
 800447e:	eb63 090b 	sbc.w	r9, r3, fp
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800448e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004492:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004496:	ebb2 0408 	subs.w	r4, r2, r8
 800449a:	eb63 0509 	sbc.w	r5, r3, r9
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	00eb      	lsls	r3, r5, #3
 80044a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ac:	00e2      	lsls	r2, r4, #3
 80044ae:	4614      	mov	r4, r2
 80044b0:	461d      	mov	r5, r3
 80044b2:	eb14 030a 	adds.w	r3, r4, sl
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	eb45 030b 	adc.w	r3, r5, fp
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ca:	4629      	mov	r1, r5
 80044cc:	028b      	lsls	r3, r1, #10
 80044ce:	4621      	mov	r1, r4
 80044d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d4:	4621      	mov	r1, r4
 80044d6:	028a      	lsls	r2, r1, #10
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	2200      	movs	r2, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	60fa      	str	r2, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	f7fc fbd6 	bl	8000c98 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	3301      	adds	r3, #1
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800450e:	e002      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004510:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004518:	4618      	mov	r0, r3
 800451a:	3740      	adds	r7, #64	@ 0x40
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	00f42400 	.word	0x00f42400
 800452c:	017d7840 	.word	0x017d7840

08004530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800454c:	f7ff fff0 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0a9b      	lsrs	r3, r3, #10
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	@ (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	0800d430 	.word	0x0800d430

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004574:	f7ff ffdc 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	0800d430 	.word	0x0800d430

08004598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	220f      	movs	r2, #15
 80045a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045a8:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0203 	and.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045b4:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045c0:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <HAL_RCC_GetClockConfig+0x60>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0207 	and.w	r2, r3, #7
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40023c00 	.word	0x40023c00

080045fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004620:	2b00      	cmp	r3, #0
 8004622:	d038      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004624:	4b68      	ldr	r3, [pc, #416]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800462a:	f7fd fe3b 	bl	80022a4 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004632:	f7fd fe37 	bl	80022a4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0bd      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004644:	4b61      	ldr	r3, [pc, #388]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	019b      	lsls	r3, r3, #6
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	495a      	ldr	r1, [pc, #360]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800466a:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004670:	f7fd fe18 	bl	80022a4 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004678:	f7fd fe14 	bl	80022a4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e09a      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8083 	beq.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	4b48      	ldr	r3, [pc, #288]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	4a47      	ldr	r2, [pc, #284]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b4:	4b45      	ldr	r3, [pc, #276]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046c0:	4b43      	ldr	r3, [pc, #268]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a42      	ldr	r2, [pc, #264]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd fdea 	bl	80022a4 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d4:	f7fd fde6 	bl	80022a4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e06c      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046e6:	4b3a      	ldr	r3, [pc, #232]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f2:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02f      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d028      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004710:	4b2e      	ldr	r3, [pc, #184]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004718:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800471a:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004720:	4b2c      	ldr	r3, [pc, #176]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004726:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800472c:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d114      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd fdb4 	bl	80022a4 <HAL_GetTick>
 800473c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd fdb0 	bl	80022a4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e034      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ee      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800476a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800476e:	d10d      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004770:	4b16      	ldr	r3, [pc, #88]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004784:	4911      	ldr	r1, [pc, #68]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
 800478a:	e005      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800478c:	4b0f      	ldr	r3, [pc, #60]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a0e      	ldr	r2, [pc, #56]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004796:	6093      	str	r3, [r2, #8]
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a4:	4909      	ldr	r1, [pc, #36]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7d1a      	ldrb	r2, [r3, #20]
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80047bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	42470068 	.word	0x42470068
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42470e40 	.word	0x42470e40
 80047d8:	424711e0 	.word	0x424711e0

080047dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e073      	b.n	80048d6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7f5b      	ldrb	r3, [r3, #29]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fac4 	bl	8001d8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d055      	beq.n	80048c4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	22ca      	movs	r2, #202	@ 0xca
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2253      	movs	r2, #83	@ 0x53
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa49 	bl	8004cc0 <RTC_EnterInitMode>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d12c      	bne.n	8004892 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800484a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6919      	ldr	r1, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	041a      	lsls	r2, r3, #16
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa50 	bl	8004d2e <RTC_ExitInitMode>
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d110      	bne.n	80048ba <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	22ff      	movs	r2, #255	@ 0xff
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80048c2:	e001      	b.n	80048c8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048de:	b590      	push	{r4, r7, lr}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	7f1b      	ldrb	r3, [r3, #28]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_RTC_SetTime+0x1c>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e087      	b.n	8004a0a <HAL_RTC_SetTime+0x12c>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2202      	movs	r2, #2
 8004904:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d126      	bne.n	800495a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fa27 	bl	8004d78 <RTC_ByteToBcd2>
 800492a:	4603      	mov	r3, r0
 800492c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fa20 	bl	8004d78 <RTC_ByteToBcd2>
 8004938:	4603      	mov	r3, r0
 800493a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800493c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fa18 	bl	8004d78 <RTC_ByteToBcd2>
 8004948:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800494a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	78db      	ldrb	r3, [r3, #3]
 8004952:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e018      	b.n	800498c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800497a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004980:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	22ca      	movs	r2, #202	@ 0xca
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2253      	movs	r2, #83	@ 0x53
 800499a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f98f 	bl	8004cc0 <RTC_EnterInitMode>
 80049a2:	4603      	mov	r3, r0
 80049a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d120      	bne.n	80049ee <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80049b6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80049ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f9a2 	bl	8004d2e <RTC_ExitInitMode>
 80049ea:	4603      	mov	r3, r0
 80049ec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	22ff      	movs	r2, #255	@ 0xff
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	771a      	strb	r2, [r3, #28]

  return status;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}

08004a12 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004a44:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a48:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	0d9b      	lsrs	r3, r3, #22
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11a      	bne.n	8004ac4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f98e 	bl	8004db4 <RTC_Bcd2ToByte>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f985 	bl	8004db4 <RTC_Bcd2ToByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	789b      	ldrb	r3, [r3, #2]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f97c 	bl	8004db4 <RTC_Bcd2ToByte>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ace:	b590      	push	{r4, r7, lr}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	7f1b      	ldrb	r3, [r3, #28]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_RTC_SetDate+0x1c>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e071      	b.n	8004bce <HAL_RTC_SetDate+0x100>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10e      	bne.n	8004b1a <HAL_RTC_SetDate+0x4c>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	330a      	adds	r3, #10
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11c      	bne.n	8004b5a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f927 	bl	8004d78 <RTC_ByteToBcd2>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f920 	bl	8004d78 <RTC_ByteToBcd2>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b3c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	789b      	ldrb	r3, [r3, #2]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f918 	bl	8004d78 <RTC_ByteToBcd2>
 8004b48:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b4a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e00e      	b.n	8004b78 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	78db      	ldrb	r3, [r3, #3]
 8004b5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b66:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	22ca      	movs	r2, #202	@ 0xca
 8004b7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2253      	movs	r2, #83	@ 0x53
 8004b86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f899 	bl	8004cc0 <RTC_EnterInitMode>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ba6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8c0 	bl	8004d2e <RTC_ExitInitMode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]

  return status;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}

08004bd6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bf0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0b5b      	lsrs	r3, r3, #13
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11a      	bne.n	8004c6a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	78db      	ldrb	r3, [r3, #3]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f8bb 	bl	8004db4 <RTC_Bcd2ToByte>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f8b2 	bl	8004db4 <RTC_Bcd2ToByte>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	789b      	ldrb	r3, [r3, #2]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f8a9 	bl	8004db4 <RTC_Bcd2ToByte>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a0d      	ldr	r2, [pc, #52]	@ (8004cbc <HAL_RTC_WaitForSynchro+0x48>)
 8004c86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c88:	f7fd fb0c 	bl	80022a4 <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c8e:	e009      	b.n	8004ca4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c90:	f7fd fb08 	bl	80022a4 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e007      	b.n	8004cb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ee      	beq.n	8004c90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00013f5f 	.word	0x00013f5f

08004cc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d122      	bne.n	8004d24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cee:	f7fd fad9 	bl	80022a4 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cf4:	e00c      	b.n	8004d10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf6:	f7fd fad5 	bl	80022a4 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d04:	d904      	bls.n	8004d10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <RTC_EnterInitMode+0x64>
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d1e8      	bne.n	8004cf6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ff8b 	bl	8004c74 <HAL_RTC_WaitForSynchro>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2204      	movs	r2, #4
 8004d68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004d86:	e005      	b.n	8004d94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	3b0a      	subs	r3, #10
 8004d92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	2b09      	cmp	r3, #9
 8004d98:	d8f6      	bhi.n	8004d88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	b2db      	uxtb	r3, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07b      	b.n	8004efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e12:	d009      	beq.n	8004e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	61da      	str	r2, [r3, #28]
 8004e1a:	e005      	b.n	8004e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc ffce 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	ea42 0103 	orr.w	r1, r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f003 0104 	and.w	r1, r3, #4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f003 0210 	and.w	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e041      	b.n	8004f98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f839 	bl	8004fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f000 f9b1 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e044      	b.n	8005056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x6c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d013      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8005068 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x6c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a19      	ldr	r2, [pc, #100]	@ (800506c <HAL_TIM_Base_Start_IT+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <HAL_TIM_Base_Start_IT+0xbc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <HAL_TIM_Base_Start_IT+0xc0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d111      	bne.n	8005044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b06      	cmp	r3, #6
 8005030:	d010      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005042:	e007      	b.n	8005054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800
 8005070:	40000c00 	.word	0x40000c00
 8005074:	40014000 	.word	0x40014000

08005078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0202 	mvn.w	r2, #2
 80050ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8d2 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8c4 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8d5 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0204 	mvn.w	r2, #4
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8ac 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f89e 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8af 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0208 	mvn.w	r2, #8
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f886 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f878 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f889 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	d020      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0210 	mvn.w	r2, #16
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2208      	movs	r2, #8
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f860 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f852 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f863 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0201 	mvn.w	r2, #1
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fd04 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8e0 	bl	80053c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f834 	bl	8005294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0220 	mvn.w	r2, #32
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8b2 	bl	80053b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a37      	ldr	r2, [pc, #220]	@ (8005398 <TIM_Base_SetConfig+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a34      	ldr	r2, [pc, #208]	@ (800539c <TIM_Base_SetConfig+0xf4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a33      	ldr	r2, [pc, #204]	@ (80053a0 <TIM_Base_SetConfig+0xf8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a32      	ldr	r2, [pc, #200]	@ (80053a4 <TIM_Base_SetConfig+0xfc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a28      	ldr	r2, [pc, #160]	@ (8005398 <TIM_Base_SetConfig+0xf0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a25      	ldr	r2, [pc, #148]	@ (800539c <TIM_Base_SetConfig+0xf4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a24      	ldr	r2, [pc, #144]	@ (80053a0 <TIM_Base_SetConfig+0xf8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a23      	ldr	r2, [pc, #140]	@ (80053a4 <TIM_Base_SetConfig+0xfc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <TIM_Base_SetConfig+0x100>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <TIM_Base_SetConfig+0x104>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a20      	ldr	r2, [pc, #128]	@ (80053b0 <TIM_Base_SetConfig+0x108>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a0c      	ldr	r2, [pc, #48]	@ (8005398 <TIM_Base_SetConfig+0xf0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d103      	bne.n	8005372 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800

080053b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e042      	b.n	8005474 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fd36 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	@ 0x24
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800541e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f973 	bl	800570c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	@ 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	d175      	bne.n	8005588 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_UART_Transmit+0x2c>
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e06e      	b.n	800558a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2221      	movs	r2, #33	@ 0x21
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ba:	f7fc fef3 	bl	80022a4 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d4:	d108      	bne.n	80054e8 <HAL_UART_Transmit+0x6c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	e003      	b.n	80054f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054f0:	e02e      	b.n	8005550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2180      	movs	r1, #128	@ 0x80
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f848 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e03a      	b.n	800558a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	3302      	adds	r3, #2
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e007      	b.n	8005542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1cb      	bne.n	80054f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	2140      	movs	r1, #64	@ 0x40
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f814 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e006      	b.n	800558a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	e03b      	b.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d037      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ac:	f7fc fe7a 	bl	80022a4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e03a      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b80      	cmp	r3, #128	@ 0x80
 80055d8:	d020      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b40      	cmp	r3, #64	@ 0x40
 80055de:	d01d      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d116      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f81d 	bl	8005644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2208      	movs	r2, #8
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e00f      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	429a      	cmp	r2, r3
 8005638:	d0b4      	beq.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b095      	sub	sp, #84	@ 0x54
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800566c:	643a      	str	r2, [r7, #64]	@ 0x40
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3314      	adds	r3, #20
 8005686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3314      	adds	r3, #20
 800569e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d119      	bne.n	80056f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056dc:	61ba      	str	r2, [r7, #24]
 80056de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6979      	ldr	r1, [r7, #20]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056fe:	bf00      	nop
 8005700:	3754      	adds	r7, #84	@ 0x54
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b0c0      	sub	sp, #256	@ 0x100
 8005712:	af00      	add	r7, sp, #0
 8005714:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	68d9      	ldr	r1, [r3, #12]
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	ea40 0301 	orr.w	r3, r0, r1
 8005734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	431a      	orrs	r2, r3
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005764:	f021 010c 	bic.w	r1, r1, #12
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005772:	430b      	orrs	r3, r1
 8005774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	6999      	ldr	r1, [r3, #24]
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	ea40 0301 	orr.w	r3, r0, r1
 8005792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b8f      	ldr	r3, [pc, #572]	@ (80059d8 <UART_SetConfig+0x2cc>)
 800579c:	429a      	cmp	r2, r3
 800579e:	d005      	beq.n	80057ac <UART_SetConfig+0xa0>
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <UART_SetConfig+0x2d0>)
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d104      	bne.n	80057b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fe fee0 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 80057b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057b4:	e003      	b.n	80057be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057b6:	f7fe fec7 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 80057ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c8:	f040 810c 	bne.w	80059e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	1891      	adds	r1, r2, r2
 80057e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057e6:	415b      	adcs	r3, r3
 80057e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057ee:	4621      	mov	r1, r4
 80057f0:	eb12 0801 	adds.w	r8, r2, r1
 80057f4:	4629      	mov	r1, r5
 80057f6:	eb43 0901 	adc.w	r9, r3, r1
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800580e:	4690      	mov	r8, r2
 8005810:	4699      	mov	r9, r3
 8005812:	4623      	mov	r3, r4
 8005814:	eb18 0303 	adds.w	r3, r8, r3
 8005818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800581c:	462b      	mov	r3, r5
 800581e:	eb49 0303 	adc.w	r3, r9, r3
 8005822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005832:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800583a:	460b      	mov	r3, r1
 800583c:	18db      	adds	r3, r3, r3
 800583e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005840:	4613      	mov	r3, r2
 8005842:	eb42 0303 	adc.w	r3, r2, r3
 8005846:	657b      	str	r3, [r7, #84]	@ 0x54
 8005848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800584c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005850:	f7fb fa22 	bl	8000c98 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4b61      	ldr	r3, [pc, #388]	@ (80059e0 <UART_SetConfig+0x2d4>)
 800585a:	fba3 2302 	umull	r2, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	011c      	lsls	r4, r3, #4
 8005862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005866:	2200      	movs	r2, #0
 8005868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800586c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	1891      	adds	r1, r2, r2
 800587a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800587c:	415b      	adcs	r3, r3
 800587e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005884:	4641      	mov	r1, r8
 8005886:	eb12 0a01 	adds.w	sl, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb43 0b01 	adc.w	fp, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800589c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a4:	4692      	mov	sl, r2
 80058a6:	469b      	mov	fp, r3
 80058a8:	4643      	mov	r3, r8
 80058aa:	eb1a 0303 	adds.w	r3, sl, r3
 80058ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b2:	464b      	mov	r3, r9
 80058b4:	eb4b 0303 	adc.w	r3, fp, r3
 80058b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058d0:	460b      	mov	r3, r1
 80058d2:	18db      	adds	r3, r3, r3
 80058d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d6:	4613      	mov	r3, r2
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058e6:	f7fb f9d7 	bl	8000c98 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	4b3b      	ldr	r3, [pc, #236]	@ (80059e0 <UART_SetConfig+0x2d4>)
 80058f2:	fba3 2301 	umull	r2, r3, r3, r1
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2264      	movs	r2, #100	@ 0x64
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005906:	4b36      	ldr	r3, [pc, #216]	@ (80059e0 <UART_SetConfig+0x2d4>)
 8005908:	fba3 2302 	umull	r2, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005914:	441c      	add	r4, r3
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005920:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	1891      	adds	r1, r2, r2
 800592e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005930:	415b      	adcs	r3, r3
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005938:	4641      	mov	r1, r8
 800593a:	1851      	adds	r1, r2, r1
 800593c:	6339      	str	r1, [r7, #48]	@ 0x30
 800593e:	4649      	mov	r1, r9
 8005940:	414b      	adcs	r3, r1
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005950:	4659      	mov	r1, fp
 8005952:	00cb      	lsls	r3, r1, #3
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595a:	4651      	mov	r1, sl
 800595c:	00ca      	lsls	r2, r1, #3
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	4603      	mov	r3, r0
 8005964:	4642      	mov	r2, r8
 8005966:	189b      	adds	r3, r3, r2
 8005968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800596c:	464b      	mov	r3, r9
 800596e:	460a      	mov	r2, r1
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005984:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800598c:	460b      	mov	r3, r1
 800598e:	18db      	adds	r3, r3, r3
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005992:	4613      	mov	r3, r2
 8005994:	eb42 0303 	adc.w	r3, r2, r3
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800599e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059a2:	f7fb f979 	bl	8000c98 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <UART_SetConfig+0x2d4>)
 80059ac:	fba3 1302 	umull	r1, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	2164      	movs	r1, #100	@ 0x64
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	3332      	adds	r3, #50	@ 0x32
 80059be:	4a08      	ldr	r2, [pc, #32]	@ (80059e0 <UART_SetConfig+0x2d4>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	f003 0207 	and.w	r2, r3, #7
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4422      	add	r2, r4
 80059d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059d4:	e106      	b.n	8005be4 <UART_SetConfig+0x4d8>
 80059d6:	bf00      	nop
 80059d8:	40011000 	.word	0x40011000
 80059dc:	40011400 	.word	0x40011400
 80059e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059f6:	4642      	mov	r2, r8
 80059f8:	464b      	mov	r3, r9
 80059fa:	1891      	adds	r1, r2, r2
 80059fc:	6239      	str	r1, [r7, #32]
 80059fe:	415b      	adcs	r3, r3
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a06:	4641      	mov	r1, r8
 8005a08:	1854      	adds	r4, r2, r1
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	eb43 0501 	adc.w	r5, r3, r1
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	00eb      	lsls	r3, r5, #3
 8005a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a1e:	00e2      	lsls	r2, r4, #3
 8005a20:	4614      	mov	r4, r2
 8005a22:	461d      	mov	r5, r3
 8005a24:	4643      	mov	r3, r8
 8005a26:	18e3      	adds	r3, r4, r3
 8005a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	eb45 0303 	adc.w	r3, r5, r3
 8005a32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a52:	4629      	mov	r1, r5
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	4621      	mov	r1, r4
 8005a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	008a      	lsls	r2, r1, #2
 8005a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a64:	f7fb f918 	bl	8000c98 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <UART_SetConfig+0x4e4>)
 8005a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	011c      	lsls	r4, r3, #4
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	61b9      	str	r1, [r7, #24]
 8005a90:	415b      	adcs	r3, r3
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6139      	str	r1, [r7, #16]
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005acc:	464b      	mov	r3, r9
 8005ace:	460a      	mov	r2, r1
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ae2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005af0:	4649      	mov	r1, r9
 8005af2:	008b      	lsls	r3, r1, #2
 8005af4:	4641      	mov	r1, r8
 8005af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afa:	4641      	mov	r1, r8
 8005afc:	008a      	lsls	r2, r1, #2
 8005afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b02:	f7fb f8c9 	bl	8000c98 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4b38      	ldr	r3, [pc, #224]	@ (8005bf0 <UART_SetConfig+0x4e4>)
 8005b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2264      	movs	r2, #100	@ 0x64
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	1acb      	subs	r3, r1, r3
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	3332      	adds	r3, #50	@ 0x32
 8005b20:	4a33      	ldr	r2, [pc, #204]	@ (8005bf0 <UART_SetConfig+0x4e4>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b2c:	441c      	add	r4, r3
 8005b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b32:	2200      	movs	r2, #0
 8005b34:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b36:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	1891      	adds	r1, r2, r2
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	415b      	adcs	r3, r3
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	1851      	adds	r1, r2, r1
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	4649      	mov	r1, r9
 8005b54:	414b      	adcs	r3, r1
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b64:	4659      	mov	r1, fp
 8005b66:	00cb      	lsls	r3, r1, #3
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6e:	4651      	mov	r1, sl
 8005b70:	00ca      	lsls	r2, r1, #3
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	4642      	mov	r2, r8
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b7e:	464b      	mov	r3, r9
 8005b80:	460a      	mov	r2, r1
 8005b82:	eb42 0303 	adc.w	r3, r2, r3
 8005b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b92:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bb2:	f7fb f871 	bl	8000c98 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <UART_SetConfig+0x4e4>)
 8005bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	2164      	movs	r1, #100	@ 0x64
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	3332      	adds	r3, #50	@ 0x32
 8005bce:	4a08      	ldr	r2, [pc, #32]	@ (8005bf0 <UART_SetConfig+0x4e4>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 020f 	and.w	r2, r3, #15
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4422      	add	r2, r4
 8005be2:	609a      	str	r2, [r3, #8]
}
 8005be4:	bf00      	nop
 8005be6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bea:	46bd      	mov	sp, r7
 8005bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf0:	51eb851f 	.word	0x51eb851f

08005bf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <SysTick_Handler+0x1c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005bfc:	f001 fdda 	bl	80077b4 <xTaskGetSchedulerState>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d001      	beq.n	8005c0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c06:	f002 fccf 	bl	80085a8 <xPortSysTickHandler>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010

08005c14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a07      	ldr	r2, [pc, #28]	@ (8005c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a06      	ldr	r2, [pc, #24]	@ (8005c44 <vApplicationGetIdleTaskMemory+0x30>)
 8005c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200003dc 	.word	0x200003dc
 8005c44:	20000484 	.word	0x20000484

08005c48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a07      	ldr	r2, [pc, #28]	@ (8005c74 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4a06      	ldr	r2, [pc, #24]	@ (8005c78 <vApplicationGetTimerTaskMemory+0x30>)
 8005c5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c66:	601a      	str	r2, [r3, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000684 	.word	0x20000684
 8005c78:	2000072c 	.word	0x2000072c

08005c7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0208 	add.w	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f103 0208 	add.w	r2, r3, #8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f103 0208 	add.w	r2, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e00c      	b.n	8005d58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3308      	adds	r3, #8
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e002      	b.n	8005d4c <vListInsert+0x2e>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d2f6      	bcs.n	8005d46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6892      	ldr	r2, [r2, #8]
 8005da6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d103      	bne.n	8005dc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1e5a      	subs	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <xQueueGenericReset+0x2c>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60bb      	str	r3, [r7, #8]
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e10:	f002 fb3a 	bl	8008488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	3b01      	subs	r3, #1
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	22ff      	movs	r2, #255	@ 0xff
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	22ff      	movs	r2, #255	@ 0xff
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d114      	bne.n	8005e90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01a      	beq.n	8005ea4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3310      	adds	r3, #16
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fad8 	bl	8007428 <xTaskRemoveFromEventList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <xQueueGenericReset+0xd0>)
 8005e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	e009      	b.n	8005ea4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3310      	adds	r3, #16
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fef1 	bl	8005c7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3324      	adds	r3, #36	@ 0x24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff feec 	bl	8005c7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ea4:	f002 fb22 	bl	80084ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ea8:	2301      	movs	r3, #1
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	@ 0x38
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <xQueueGenericCreateStatic+0x56>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <xQueueGenericCreateStatic+0x5a>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <xQueueGenericCreateStatic+0x5c>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	623b      	str	r3, [r7, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <xQueueGenericCreateStatic+0x84>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <xQueueGenericCreateStatic+0x88>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <xQueueGenericCreateStatic+0x8a>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	61fb      	str	r3, [r7, #28]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f5e:	2350      	movs	r3, #80	@ 0x50
 8005f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b50      	cmp	r3, #80	@ 0x50
 8005f66:	d00b      	beq.n	8005f80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	61bb      	str	r3, [r7, #24]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f840 	bl	8006028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3730      	adds	r7, #48	@ 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	@ 0x28
 8005fb6:	af02      	add	r7, sp, #8
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10b      	bne.n	8005fde <xQueueGenericCreate+0x2c>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	613b      	str	r3, [r7, #16]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	3350      	adds	r3, #80	@ 0x50
 8005fec:	4618      	mov	r0, r3
 8005fee:	f002 fb6d 	bl	80086cc <pvPortMalloc>
 8005ff2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d011      	beq.n	800601e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3350      	adds	r3, #80	@ 0x50
 8006002:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800600c:	79fa      	ldrb	r2, [r7, #7]
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f805 	bl	8006028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800601e:	69bb      	ldr	r3, [r7, #24]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e002      	b.n	800604a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006056:	2101      	movs	r1, #1
 8006058:	69b8      	ldr	r0, [r7, #24]
 800605a:	f7ff fec3 	bl	8005de4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00e      	beq.n	800609a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800608e:	2300      	movs	r3, #0
 8006090:	2200      	movs	r2, #0
 8006092:	2100      	movs	r1, #0
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f81d 	bl	80060d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	4603      	mov	r3, r0
 80060aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060ac:	2301      	movs	r3, #1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6939      	ldr	r1, [r7, #16]
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7ff ff79 	bl	8005fb2 <xQueueGenericCreate>
 80060c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff ffd3 	bl	800606e <prvInitialiseMutex>

		return xNewQueue;
 80060c8:	68fb      	ldr	r3, [r7, #12]
	}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	@ 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060e2:	2300      	movs	r3, #0
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <xQueueGenericSend+0x34>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <xQueueGenericSend+0x42>
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <xQueueGenericSend+0x46>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSend+0x48>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <xQueueGenericSend+0x64>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d103      	bne.n	8006146 <xQueueGenericSend+0x72>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <xQueueGenericSend+0x76>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericSend+0x78>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericSend+0x94>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006168:	f001 fb24 	bl	80077b4 <xTaskGetSchedulerState>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <xQueueGenericSend+0xa4>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <xQueueGenericSend+0xa8>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <xQueueGenericSend+0xaa>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <xQueueGenericSend+0xc6>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61fb      	str	r3, [r7, #28]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800619a:	f002 f975 	bl	8008488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <xQueueGenericSend+0xdc>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d129      	bne.n	8006204 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b6:	f000 fb37 	bl	8006828 <prvCopyDataToQueue>
 80061ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d010      	beq.n	80061e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	3324      	adds	r3, #36	@ 0x24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f92d 	bl	8007428 <xTaskRemoveFromEventList>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061d4:	4b3f      	ldr	r3, [pc, #252]	@ (80062d4 <xQueueGenericSend+0x200>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	e00a      	b.n	80061fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061ec:	4b39      	ldr	r3, [pc, #228]	@ (80062d4 <xQueueGenericSend+0x200>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061fc:	f002 f976 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 8006200:	2301      	movs	r3, #1
 8006202:	e063      	b.n	80062cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800620a:	f002 f96f 	bl	80084ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800620e:	2300      	movs	r3, #0
 8006210:	e05c      	b.n	80062cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006218:	f107 0314 	add.w	r3, r7, #20
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f967 	bl	80074f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006222:	2301      	movs	r3, #1
 8006224:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006226:	f002 f961 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800622a:	f000 fecf 	bl	8006fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800622e:	f002 f92b 	bl	8008488 <vPortEnterCritical>
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006238:	b25b      	sxtb	r3, r3
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d103      	bne.n	8006248 <xQueueGenericSend+0x174>
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800624e:	b25b      	sxtb	r3, r3
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d103      	bne.n	800625e <xQueueGenericSend+0x18a>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800625e:	f002 f945 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006262:	1d3a      	adds	r2, r7, #4
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f956 	bl	800751c <xTaskCheckForTimeOut>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d124      	bne.n	80062c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006276:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006278:	f000 fbce 	bl	8006a18 <prvIsQueueFull>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	3310      	adds	r3, #16
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f87a 	bl	8007384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006292:	f000 fb59 	bl	8006948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006296:	f000 fea7 	bl	8006fe8 <xTaskResumeAll>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f af7c 	bne.w	800619a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062a2:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <xQueueGenericSend+0x200>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	e772      	b.n	800619a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062b6:	f000 fb47 	bl	8006948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ba:	f000 fe95 	bl	8006fe8 <xTaskResumeAll>
 80062be:	e76c      	b.n	800619a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062c2:	f000 fb41 	bl	8006948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062c6:	f000 fe8f 	bl	8006fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3738      	adds	r7, #56	@ 0x38
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b090      	sub	sp, #64	@ 0x40
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <xQueueGenericSendFromISR+0x3e>
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <xQueueGenericSendFromISR+0x42>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <xQueueGenericSendFromISR+0x44>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d103      	bne.n	8006346 <xQueueGenericSendFromISR+0x6e>
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <xQueueGenericSendFromISR+0x72>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <xQueueGenericSendFromISR+0x74>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	623b      	str	r3, [r7, #32]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006368:	f002 f96e 	bl	8008648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800636c:	f3ef 8211 	mrs	r2, BASEPRI
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	61fa      	str	r2, [r7, #28]
 8006382:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006384:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <xQueueGenericSendFromISR+0xc2>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d12f      	bne.n	80063fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063b0:	f000 fa3a 	bl	8006828 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d112      	bne.n	80063e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	3324      	adds	r3, #36	@ 0x24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f82c 	bl	8007428 <xTaskRemoveFromEventList>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e007      	b.n	80063f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063e8:	3301      	adds	r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	b25a      	sxtb	r2, r3
 80063ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063f4:	2301      	movs	r3, #1
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80063f8:	e001      	b.n	80063fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800640a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800640c:	4618      	mov	r0, r3
 800640e:	3740      	adds	r7, #64	@ 0x40
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	@ 0x30
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006420:	2300      	movs	r3, #0
 8006422:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xQueueReceive+0x32>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	623b      	str	r3, [r7, #32]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <xQueueReceive+0x40>
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <xQueueReceive+0x44>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <xQueueReceive+0x46>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <xQueueReceive+0x62>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	61fb      	str	r3, [r7, #28]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006476:	f001 f99d 	bl	80077b4 <xTaskGetSchedulerState>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <xQueueReceive+0x72>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <xQueueReceive+0x76>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <xQueueReceive+0x78>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <xQueueReceive+0x94>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	61bb      	str	r3, [r7, #24]
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a8:	f001 ffee 	bl	8008488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01f      	beq.n	80064f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064bc:	f000 fa1e 	bl	80068fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c2:	1e5a      	subs	r2, r3, #1
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00f      	beq.n	80064f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	3310      	adds	r3, #16
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 ffa7 	bl	8007428 <xTaskRemoveFromEventList>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064e0:	4b3c      	ldr	r3, [pc, #240]	@ (80065d4 <xQueueReceive+0x1c0>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064f0:	f001 fffc 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e069      	b.n	80065cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064fe:	f001 fff5 	bl	80084ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006502:	2300      	movs	r3, #0
 8006504:	e062      	b.n	80065cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800650c:	f107 0310 	add.w	r3, r7, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f000 ffed 	bl	80074f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006516:	2301      	movs	r3, #1
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800651a:	f001 ffe7 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800651e:	f000 fd55 	bl	8006fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006522:	f001 ffb1 	bl	8008488 <vPortEnterCritical>
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800652c:	b25b      	sxtb	r3, r3
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d103      	bne.n	800653c <xQueueReceive+0x128>
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006542:	b25b      	sxtb	r3, r3
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d103      	bne.n	8006552 <xQueueReceive+0x13e>
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006552:	f001 ffcb 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006556:	1d3a      	adds	r2, r7, #4
 8006558:	f107 0310 	add.w	r3, r7, #16
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f000 ffdc 	bl	800751c <xTaskCheckForTimeOut>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d123      	bne.n	80065b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800656a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800656c:	f000 fa3e 	bl	80069ec <prvIsQueueEmpty>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d017      	beq.n	80065a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	3324      	adds	r3, #36	@ 0x24
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 ff00 	bl	8007384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006586:	f000 f9df 	bl	8006948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800658a:	f000 fd2d 	bl	8006fe8 <xTaskResumeAll>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d189      	bne.n	80064a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006594:	4b0f      	ldr	r3, [pc, #60]	@ (80065d4 <xQueueReceive+0x1c0>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	e780      	b.n	80064a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a8:	f000 f9ce 	bl	8006948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ac:	f000 fd1c 	bl	8006fe8 <xTaskResumeAll>
 80065b0:	e77a      	b.n	80064a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b4:	f000 f9c8 	bl	8006948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b8:	f000 fd16 	bl	8006fe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065be:	f000 fa15 	bl	80069ec <prvIsQueueEmpty>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f43f af6f 	beq.w	80064a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	@ 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	@ 0x38
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	623b      	str	r3, [r7, #32]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	61fb      	str	r3, [r7, #28]
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800662c:	f001 f8c2 	bl	80077b4 <xTaskGetSchedulerState>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <xQueueSemaphoreTake+0x64>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <xQueueSemaphoreTake+0x68>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <xQueueSemaphoreTake+0x6a>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61bb      	str	r3, [r7, #24]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800665e:	f001 ff13 	bl	8008488 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d024      	beq.n	80066b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	1e5a      	subs	r2, r3, #1
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800667e:	f001 fa13 	bl	8007aa8 <pvTaskIncrementMutexHeldCount>
 8006682:	4602      	mov	r2, r0
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00f      	beq.n	80066b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	3310      	adds	r3, #16
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fec7 	bl	8007428 <xTaskRemoveFromEventList>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066a0:	4b54      	ldr	r3, [pc, #336]	@ (80067f4 <xQueueSemaphoreTake+0x21c>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066b0:	f001 ff1c 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e098      	b.n	80067ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d112      	bne.n	80066e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	617b      	str	r3, [r7, #20]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066dc:	f001 ff06 	bl	80084ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e082      	b.n	80067ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fefe 	bl	80074f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066f4:	2301      	movs	r3, #1
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066f8:	f001 fef8 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066fc:	f000 fc66 	bl	8006fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006700:	f001 fec2 	bl	8008488 <vPortEnterCritical>
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800670a:	b25b      	sxtb	r3, r3
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d103      	bne.n	800671a <xQueueSemaphoreTake+0x142>
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006720:	b25b      	sxtb	r3, r3
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d103      	bne.n	8006730 <xQueueSemaphoreTake+0x158>
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006730:	f001 fedc 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006734:	463a      	mov	r2, r7
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f000 feed 	bl	800751c <xTaskCheckForTimeOut>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d132      	bne.n	80067ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800674a:	f000 f94f 	bl	80069ec <prvIsQueueEmpty>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d026      	beq.n	80067a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800675c:	f001 fe94 	bl	8008488 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4618      	mov	r0, r3
 8006766:	f001 f843 	bl	80077f0 <xTaskPriorityInherit>
 800676a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800676c:	f001 febe 	bl	80084ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	3324      	adds	r3, #36	@ 0x24
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	4611      	mov	r1, r2
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fe03 	bl	8007384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800677e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006780:	f000 f8e2 	bl	8006948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006784:	f000 fc30 	bl	8006fe8 <xTaskResumeAll>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	f47f af67 	bne.w	800665e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006790:	4b18      	ldr	r3, [pc, #96]	@ (80067f4 <xQueueSemaphoreTake+0x21c>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	e75d      	b.n	800665e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067a4:	f000 f8d0 	bl	8006948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a8:	f000 fc1e 	bl	8006fe8 <xTaskResumeAll>
 80067ac:	e757      	b.n	800665e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067b0:	f000 f8ca 	bl	8006948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067b4:	f000 fc18 	bl	8006fe8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067ba:	f000 f917 	bl	80069ec <prvIsQueueEmpty>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f43f af4c 	beq.w	800665e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00d      	beq.n	80067e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80067cc:	f001 fe5c 	bl	8008488 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067d2:	f000 f811 	bl	80067f8 <prvGetDisinheritPriorityAfterTimeout>
 80067d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f8de 	bl	80079a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067e4:	f001 fe82 	bl	80084ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3738      	adds	r7, #56	@ 0x38
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e001      	b.n	800681a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800681a:	68fb      	ldr	r3, [r7, #12]
	}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d14d      	bne.n	80068ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f834 	bl	80078c0 <xTaskPriorityDisinherit>
 8006858:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	e043      	b.n	80068ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d119      	bne.n	800689c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6858      	ldr	r0, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	461a      	mov	r2, r3
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	f003 f9b7 	bl	8009be6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	429a      	cmp	r2, r3
 8006890:	d32b      	bcc.n	80068ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	e026      	b.n	80068ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68d8      	ldr	r0, [r3, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	461a      	mov	r2, r3
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	f003 f99d 	bl	8009be6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	425b      	negs	r3, r3
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d207      	bcs.n	80068d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	425b      	negs	r3, r3
 80068d2:	441a      	add	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d105      	bne.n	80068ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068f2:	697b      	ldr	r3, [r7, #20]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	441a      	add	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d303      	bcc.n	8006930 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68d9      	ldr	r1, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	461a      	mov	r2, r3
 800693a:	6838      	ldr	r0, [r7, #0]
 800693c:	f003 f953 	bl	8009be6 <memcpy>
	}
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006950:	f001 fd9a 	bl	8008488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800695a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800695c:	e011      	b.n	8006982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d012      	beq.n	800698c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3324      	adds	r3, #36	@ 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fd5c 	bl	8007428 <xTaskRemoveFromEventList>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006976:	f000 fe35 	bl	80075e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	3b01      	subs	r3, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	dce9      	bgt.n	800695e <prvUnlockQueue+0x16>
 800698a:	e000      	b.n	800698e <prvUnlockQueue+0x46>
					break;
 800698c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	22ff      	movs	r2, #255	@ 0xff
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006996:	f001 fda9 	bl	80084ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800699a:	f001 fd75 	bl	8008488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069a6:	e011      	b.n	80069cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3310      	adds	r3, #16
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fd37 	bl	8007428 <xTaskRemoveFromEventList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069c0:	f000 fe10 	bl	80075e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dce9      	bgt.n	80069a8 <prvUnlockQueue+0x60>
 80069d4:	e000      	b.n	80069d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	22ff      	movs	r2, #255	@ 0xff
 80069dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069e0:	f001 fd84 	bl	80084ec <vPortExitCritical>
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f4:	f001 fd48 	bl	8008488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e001      	b.n	8006a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0a:	f001 fd6f 	bl	80084ec <vPortExitCritical>

	return xReturn;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a20:	f001 fd32 	bl	8008488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d102      	bne.n	8006a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e001      	b.n	8006a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f001 fd57 	bl	80084ec <vPortExitCritical>

	return xReturn;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	e014      	b.n	8006a82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a58:	4a0f      	ldr	r2, [pc, #60]	@ (8006a98 <vQueueAddToRegistry+0x50>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a64:	490c      	ldr	r1, [pc, #48]	@ (8006a98 <vQueueAddToRegistry+0x50>)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a98 <vQueueAddToRegistry+0x50>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	4413      	add	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a7a:	e006      	b.n	8006a8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b07      	cmp	r3, #7
 8006a86:	d9e7      	bls.n	8006a58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000b2c 	.word	0x20000b2c

08006a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aac:	f001 fcec 	bl	8008488 <vPortEnterCritical>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab6:	b25b      	sxtb	r3, r3
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d103      	bne.n	8006ac6 <vQueueWaitForMessageRestricted+0x2a>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006acc:	b25b      	sxtb	r3, r3
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d103      	bne.n	8006adc <vQueueWaitForMessageRestricted+0x40>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006adc:	f001 fd06 	bl	80084ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3324      	adds	r3, #36	@ 0x24
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fc6d 	bl	80073d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f7ff ff26 	bl	8006948 <prvUnlockQueue>
	}
 8006afc:	bf00      	nop
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08e      	sub	sp, #56	@ 0x38
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	61fb      	str	r3, [r7, #28]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b4e:	23a8      	movs	r3, #168	@ 0xa8
 8006b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b56:	d00b      	beq.n	8006b70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61bb      	str	r3, [r7, #24]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01e      	beq.n	8006bb6 <xTaskCreateStatic+0xb2>
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01b      	beq.n	8006bb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b90:	2300      	movs	r3, #0
 8006b92:	9303      	str	r3, [sp, #12]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	9302      	str	r3, [sp, #8]
 8006b98:	f107 0314 	add.w	r3, r7, #20
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f851 	bl	8006c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bb0:	f000 f8f6 	bl	8006da0 <prvAddNewTaskToReadyList>
 8006bb4:	e001      	b.n	8006bba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bba:	697b      	ldr	r3, [r7, #20]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3728      	adds	r7, #40	@ 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	@ 0x30
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 fd77 	bl	80086cc <pvPortMalloc>
 8006bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006be6:	20a8      	movs	r0, #168	@ 0xa8
 8006be8:	f001 fd70 	bl	80086cc <pvPortMalloc>
 8006bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bfa:	e005      	b.n	8006c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bfc:	6978      	ldr	r0, [r7, #20]
 8006bfe:	f001 fe33 	bl	8008868 <vPortFree>
 8006c02:	e001      	b.n	8006c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d017      	beq.n	8006c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	9302      	str	r3, [sp, #8]
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f80f 	bl	8006c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c32:	69f8      	ldr	r0, [r7, #28]
 8006c34:	f000 f8b4 	bl	8006da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	e002      	b.n	8006c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c44:	69bb      	ldr	r3, [r7, #24]
	}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	461a      	mov	r2, r3
 8006c68:	21a5      	movs	r1, #165	@ 0xa5
 8006c6a:	f002 fede 	bl	8009a2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	617b      	str	r3, [r7, #20]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01f      	beq.n	8006cf0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	e012      	b.n	8006cdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	7819      	ldrb	r1, [r3, #0]
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3334      	adds	r3, #52	@ 0x34
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d006      	beq.n	8006ce4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d9e9      	bls.n	8006cb6 <prvInitialiseNewTask+0x66>
 8006ce2:	e000      	b.n	8006ce6 <prvInitialiseNewTask+0x96>
			{
				break;
 8006ce4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cee:	e003      	b.n	8006cf8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	2b37      	cmp	r3, #55	@ 0x37
 8006cfc:	d901      	bls.n	8006d02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cfe:	2337      	movs	r3, #55	@ 0x37
 8006d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	2200      	movs	r2, #0
 8006d12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe ffcf 	bl	8005cbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	3318      	adds	r3, #24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe ffca 	bl	8005cbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	3354      	adds	r3, #84	@ 0x54
 8006d52:	224c      	movs	r2, #76	@ 0x4c
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f002 fe67 	bl	8009a2a <memset>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <prvInitialiseNewTask+0x144>)
 8006d60:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	4a0c      	ldr	r2, [pc, #48]	@ (8006d98 <prvInitialiseNewTask+0x148>)
 8006d66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d9c <prvInitialiseNewTask+0x14c>)
 8006d6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	68f9      	ldr	r1, [r7, #12]
 8006d72:	69b8      	ldr	r0, [r7, #24]
 8006d74:	f001 fa5a 	bl	800822c <pxPortInitialiseStack>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20004dc0 	.word	0x20004dc0
 8006d98:	20004e28 	.word	0x20004e28
 8006d9c:	20004e90 	.word	0x20004e90

08006da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da8:	f001 fb6e 	bl	8008488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dac:	4b2d      	ldr	r3, [pc, #180]	@ (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	4a2c      	ldr	r2, [pc, #176]	@ (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006db6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dc4:	4b27      	ldr	r3, [pc, #156]	@ (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d110      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dcc:	f000 fc2e 	bl	800762c <prvInitialiseTaskLists>
 8006dd0:	e00d      	b.n	8006dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dd2:	4b26      	ldr	r3, [pc, #152]	@ (8006e6c <prvAddNewTaskToReadyList+0xcc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dda:	4b23      	ldr	r3, [pc, #140]	@ (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d802      	bhi.n	8006dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dee:	4b20      	ldr	r3, [pc, #128]	@ (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006df6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006df8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e04:	4b1b      	ldr	r3, [pc, #108]	@ (8006e74 <prvAddNewTaskToReadyList+0xd4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d903      	bls.n	8006e14 <prvAddNewTaskToReadyList+0x74>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	4a18      	ldr	r2, [pc, #96]	@ (8006e74 <prvAddNewTaskToReadyList+0xd4>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a15      	ldr	r2, [pc, #84]	@ (8006e78 <prvAddNewTaskToReadyList+0xd8>)
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fe ff53 	bl	8005cd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e30:	f001 fb5c 	bl	80084ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e34:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <prvAddNewTaskToReadyList+0xcc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00e      	beq.n	8006e5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d207      	bcs.n	8006e5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <prvAddNewTaskToReadyList+0xdc>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20001040 	.word	0x20001040
 8006e68:	20000b6c 	.word	0x20000b6c
 8006e6c:	2000104c 	.word	0x2000104c
 8006e70:	2000105c 	.word	0x2000105c
 8006e74:	20001048 	.word	0x20001048
 8006e78:	20000b70 	.word	0x20000b70
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d018      	beq.n	8006ec4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <vTaskDelay+0x64>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <vTaskDelay+0x32>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006eb2:	f000 f88b 	bl	8006fcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fe09 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ebe:	f000 f893 	bl	8006fe8 <xTaskResumeAll>
 8006ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006eca:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <vTaskDelay+0x68>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20001068 	.word	0x20001068
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08a      	sub	sp, #40	@ 0x28
 8006ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006efa:	463a      	mov	r2, r7
 8006efc:	1d39      	adds	r1, r7, #4
 8006efe:	f107 0308 	add.w	r3, r7, #8
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fe86 	bl	8005c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	9202      	str	r2, [sp, #8]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	2300      	movs	r3, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	2300      	movs	r3, #0
 8006f18:	460a      	mov	r2, r1
 8006f1a:	4924      	ldr	r1, [pc, #144]	@ (8006fac <vTaskStartScheduler+0xc0>)
 8006f1c:	4824      	ldr	r0, [pc, #144]	@ (8006fb0 <vTaskStartScheduler+0xc4>)
 8006f1e:	f7ff fdf1 	bl	8006b04 <xTaskCreateStatic>
 8006f22:	4603      	mov	r3, r0
 8006f24:	4a23      	ldr	r2, [pc, #140]	@ (8006fb4 <vTaskStartScheduler+0xc8>)
 8006f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f28:	4b22      	ldr	r3, [pc, #136]	@ (8006fb4 <vTaskStartScheduler+0xc8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f30:	2301      	movs	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e001      	b.n	8006f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d102      	bne.n	8006f46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f40:	f000 fe1a 	bl	8007b78 <xTimerCreateTimerTask>
 8006f44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d11b      	bne.n	8006f84 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	613b      	str	r3, [r7, #16]
}
 8006f5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f60:	4b15      	ldr	r3, [pc, #84]	@ (8006fb8 <vTaskStartScheduler+0xcc>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3354      	adds	r3, #84	@ 0x54
 8006f66:	4a15      	ldr	r2, [pc, #84]	@ (8006fbc <vTaskStartScheduler+0xd0>)
 8006f68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f6a:	4b15      	ldr	r3, [pc, #84]	@ (8006fc0 <vTaskStartScheduler+0xd4>)
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f72:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <vTaskStartScheduler+0xd8>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <vTaskStartScheduler+0xdc>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f7e:	f001 f9df 	bl	8008340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f82:	e00f      	b.n	8006fa4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d10b      	bne.n	8006fa4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <vTaskStartScheduler+0xb4>
}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	0800d408 	.word	0x0800d408
 8006fb0:	080075fd 	.word	0x080075fd
 8006fb4:	20001064 	.word	0x20001064
 8006fb8:	20000b6c 	.word	0x20000b6c
 8006fbc:	2000001c 	.word	0x2000001c
 8006fc0:	20001060 	.word	0x20001060
 8006fc4:	2000104c 	.word	0x2000104c
 8006fc8:	20001044 	.word	0x20001044

08006fcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fd0:	4b04      	ldr	r3, [pc, #16]	@ (8006fe4 <vTaskSuspendAll+0x18>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a03      	ldr	r2, [pc, #12]	@ (8006fe4 <vTaskSuspendAll+0x18>)
 8006fd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20001068 	.word	0x20001068

08006fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ff6:	4b42      	ldr	r3, [pc, #264]	@ (8007100 <xTaskResumeAll+0x118>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <xTaskResumeAll+0x2e>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	603b      	str	r3, [r7, #0]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007016:	f001 fa37 	bl	8008488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xTaskResumeAll+0x118>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a37      	ldr	r2, [pc, #220]	@ (8007100 <xTaskResumeAll+0x118>)
 8007022:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007024:	4b36      	ldr	r3, [pc, #216]	@ (8007100 <xTaskResumeAll+0x118>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d162      	bne.n	80070f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800702c:	4b35      	ldr	r3, [pc, #212]	@ (8007104 <xTaskResumeAll+0x11c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d05e      	beq.n	80070f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007034:	e02f      	b.n	8007096 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007036:	4b34      	ldr	r3, [pc, #208]	@ (8007108 <xTaskResumeAll+0x120>)
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3318      	adds	r3, #24
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fea4 	bl	8005d90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fe9f 	bl	8005d90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	4b2d      	ldr	r3, [pc, #180]	@ (800710c <xTaskResumeAll+0x124>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <xTaskResumeAll+0x7e>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a2a      	ldr	r2, [pc, #168]	@ (800710c <xTaskResumeAll+0x124>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4a27      	ldr	r2, [pc, #156]	@ (8007110 <xTaskResumeAll+0x128>)
 8007074:	441a      	add	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe fe2a 	bl	8005cd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4b23      	ldr	r3, [pc, #140]	@ (8007114 <xTaskResumeAll+0x12c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007090:	4b21      	ldr	r3, [pc, #132]	@ (8007118 <xTaskResumeAll+0x130>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007096:	4b1c      	ldr	r3, [pc, #112]	@ (8007108 <xTaskResumeAll+0x120>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1cb      	bne.n	8007036 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070a4:	f000 fb66 	bl	8007774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070a8:	4b1c      	ldr	r3, [pc, #112]	@ (800711c <xTaskResumeAll+0x134>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d010      	beq.n	80070d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070b4:	f000 f846 	bl	8007144 <xTaskIncrementTick>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070be:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <xTaskResumeAll+0x130>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f1      	bne.n	80070b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070d0:	4b12      	ldr	r3, [pc, #72]	@ (800711c <xTaskResumeAll+0x134>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070d6:	4b10      	ldr	r3, [pc, #64]	@ (8007118 <xTaskResumeAll+0x130>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <xTaskResumeAll+0x138>)
 80070e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070f2:	f001 f9fb 	bl	80084ec <vPortExitCritical>

	return xAlreadyYielded;
 80070f6:	68bb      	ldr	r3, [r7, #8]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20001068 	.word	0x20001068
 8007104:	20001040 	.word	0x20001040
 8007108:	20001000 	.word	0x20001000
 800710c:	20001048 	.word	0x20001048
 8007110:	20000b70 	.word	0x20000b70
 8007114:	20000b6c 	.word	0x20000b6c
 8007118:	20001054 	.word	0x20001054
 800711c:	20001050 	.word	0x20001050
 8007120:	e000ed04 	.word	0xe000ed04

08007124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800712a:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <xTaskGetTickCount+0x1c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007130:	687b      	ldr	r3, [r7, #4]
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20001044 	.word	0x20001044

08007144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714e:	4b4f      	ldr	r3, [pc, #316]	@ (800728c <xTaskIncrementTick+0x148>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 8090 	bne.w	8007278 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007158:	4b4d      	ldr	r3, [pc, #308]	@ (8007290 <xTaskIncrementTick+0x14c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007160:	4a4b      	ldr	r2, [pc, #300]	@ (8007290 <xTaskIncrementTick+0x14c>)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d121      	bne.n	80071b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800716c:	4b49      	ldr	r3, [pc, #292]	@ (8007294 <xTaskIncrementTick+0x150>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	603b      	str	r3, [r7, #0]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xTaskIncrementTick+0x46>
 800718e:	4b41      	ldr	r3, [pc, #260]	@ (8007294 <xTaskIncrementTick+0x150>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	4b40      	ldr	r3, [pc, #256]	@ (8007298 <xTaskIncrementTick+0x154>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3e      	ldr	r2, [pc, #248]	@ (8007294 <xTaskIncrementTick+0x150>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	4a3e      	ldr	r2, [pc, #248]	@ (8007298 <xTaskIncrementTick+0x154>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4b3e      	ldr	r3, [pc, #248]	@ (800729c <xTaskIncrementTick+0x158>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	4a3c      	ldr	r2, [pc, #240]	@ (800729c <xTaskIncrementTick+0x158>)
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	f000 fae2 	bl	8007774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071b0:	4b3b      	ldr	r3, [pc, #236]	@ (80072a0 <xTaskIncrementTick+0x15c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d349      	bcc.n	800724e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ba:	4b36      	ldr	r3, [pc, #216]	@ (8007294 <xTaskIncrementTick+0x150>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d104      	bne.n	80071ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c4:	4b36      	ldr	r3, [pc, #216]	@ (80072a0 <xTaskIncrementTick+0x15c>)
 80071c6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ca:	601a      	str	r2, [r3, #0]
					break;
 80071cc:	e03f      	b.n	800724e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ce:	4b31      	ldr	r3, [pc, #196]	@ (8007294 <xTaskIncrementTick+0x150>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d203      	bcs.n	80071ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071e6:	4a2e      	ldr	r2, [pc, #184]	@ (80072a0 <xTaskIncrementTick+0x15c>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ec:	e02f      	b.n	800724e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fdcc 	bl	8005d90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3318      	adds	r3, #24
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fdc3 	bl	8005d90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720e:	4b25      	ldr	r3, [pc, #148]	@ (80072a4 <xTaskIncrementTick+0x160>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d903      	bls.n	800721e <xTaskIncrementTick+0xda>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	4a22      	ldr	r2, [pc, #136]	@ (80072a4 <xTaskIncrementTick+0x160>)
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4a1f      	ldr	r2, [pc, #124]	@ (80072a8 <xTaskIncrementTick+0x164>)
 800722c:	441a      	add	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3304      	adds	r3, #4
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f7fe fd4e 	bl	8005cd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <xTaskIncrementTick+0x168>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	429a      	cmp	r2, r3
 8007246:	d3b8      	bcc.n	80071ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800724c:	e7b5      	b.n	80071ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800724e:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <xTaskIncrementTick+0x168>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007254:	4914      	ldr	r1, [pc, #80]	@ (80072a8 <xTaskIncrementTick+0x164>)
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d901      	bls.n	800726a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800726a:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <xTaskIncrementTick+0x16c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e004      	b.n	8007282 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007278:	4b0e      	ldr	r3, [pc, #56]	@ (80072b4 <xTaskIncrementTick+0x170>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3301      	adds	r3, #1
 800727e:	4a0d      	ldr	r2, [pc, #52]	@ (80072b4 <xTaskIncrementTick+0x170>)
 8007280:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007282:	697b      	ldr	r3, [r7, #20]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001068 	.word	0x20001068
 8007290:	20001044 	.word	0x20001044
 8007294:	20000ff8 	.word	0x20000ff8
 8007298:	20000ffc 	.word	0x20000ffc
 800729c:	20001058 	.word	0x20001058
 80072a0:	20001060 	.word	0x20001060
 80072a4:	20001048 	.word	0x20001048
 80072a8:	20000b70 	.word	0x20000b70
 80072ac:	20000b6c 	.word	0x20000b6c
 80072b0:	20001054 	.word	0x20001054
 80072b4:	20001050 	.word	0x20001050

080072b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072be:	4b2b      	ldr	r3, [pc, #172]	@ (800736c <vTaskSwitchContext+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007370 <vTaskSwitchContext+0xb8>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072cc:	e047      	b.n	800735e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80072ce:	4b28      	ldr	r3, [pc, #160]	@ (8007370 <vTaskSwitchContext+0xb8>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d4:	4b27      	ldr	r3, [pc, #156]	@ (8007374 <vTaskSwitchContext+0xbc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	e011      	b.n	8007300 <vTaskSwitchContext+0x48>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10b      	bne.n	80072fa <vTaskSwitchContext+0x42>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	e7fd      	b.n	80072f6 <vTaskSwitchContext+0x3e>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	491d      	ldr	r1, [pc, #116]	@ (8007378 <vTaskSwitchContext+0xc0>)
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0e3      	beq.n	80072dc <vTaskSwitchContext+0x24>
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4a16      	ldr	r2, [pc, #88]	@ (8007378 <vTaskSwitchContext+0xc0>)
 8007320:	4413      	add	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3308      	adds	r3, #8
 8007336:	429a      	cmp	r2, r3
 8007338:	d104      	bne.n	8007344 <vTaskSwitchContext+0x8c>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4a0c      	ldr	r2, [pc, #48]	@ (800737c <vTaskSwitchContext+0xc4>)
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	4a09      	ldr	r2, [pc, #36]	@ (8007374 <vTaskSwitchContext+0xbc>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007354:	4b09      	ldr	r3, [pc, #36]	@ (800737c <vTaskSwitchContext+0xc4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3354      	adds	r3, #84	@ 0x54
 800735a:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <vTaskSwitchContext+0xc8>)
 800735c:	6013      	str	r3, [r2, #0]
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20001068 	.word	0x20001068
 8007370:	20001054 	.word	0x20001054
 8007374:	20001048 	.word	0x20001048
 8007378:	20000b70 	.word	0x20000b70
 800737c:	20000b6c 	.word	0x20000b6c
 8007380:	2000001c 	.word	0x2000001c

08007384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60fb      	str	r3, [r7, #12]
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <vTaskPlaceOnEventList+0x48>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3318      	adds	r3, #24
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fe fcb2 	bl	8005d1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073ba:	2101      	movs	r1, #1
 80073bc:	6838      	ldr	r0, [r7, #0]
 80073be:	f000 fb87 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000b6c 	.word	0x20000b6c

080073d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	617b      	str	r3, [r7, #20]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <vTaskPlaceOnEventListRestricted+0x54>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3318      	adds	r3, #24
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7fe fc67 	bl	8005cd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800740e:	f04f 33ff 	mov.w	r3, #4294967295
 8007412:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f000 fb5a 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>
	}
 800741c:	bf00      	nop
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000b6c 	.word	0x20000b6c

08007428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60fb      	str	r3, [r7, #12]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3318      	adds	r3, #24
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fc98 	bl	8005d90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007460:	4b1d      	ldr	r3, [pc, #116]	@ (80074d8 <xTaskRemoveFromEventList+0xb0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11d      	bne.n	80074a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fc8f 	bl	8005d90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007476:	4b19      	ldr	r3, [pc, #100]	@ (80074dc <xTaskRemoveFromEventList+0xb4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d903      	bls.n	8007486 <xTaskRemoveFromEventList+0x5e>
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <xTaskRemoveFromEventList+0xb4>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4a13      	ldr	r2, [pc, #76]	@ (80074e0 <xTaskRemoveFromEventList+0xb8>)
 8007494:	441a      	add	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fe fc1a 	bl	8005cd6 <vListInsertEnd>
 80074a2:	e005      	b.n	80074b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3318      	adds	r3, #24
 80074a8:	4619      	mov	r1, r3
 80074aa:	480e      	ldr	r0, [pc, #56]	@ (80074e4 <xTaskRemoveFromEventList+0xbc>)
 80074ac:	f7fe fc13 	bl	8005cd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <xTaskRemoveFromEventList+0xc0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d905      	bls.n	80074ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <xTaskRemoveFromEventList+0xc4>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e001      	b.n	80074ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074ce:	697b      	ldr	r3, [r7, #20]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20001068 	.word	0x20001068
 80074dc:	20001048 	.word	0x20001048
 80074e0:	20000b70 	.word	0x20000b70
 80074e4:	20001000 	.word	0x20001000
 80074e8:	20000b6c 	.word	0x20000b6c
 80074ec:	20001054 	.word	0x20001054

080074f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074f8:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <vTaskInternalSetTimeOutState+0x24>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007500:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <vTaskInternalSetTimeOutState+0x28>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	20001058 	.word	0x20001058
 8007518:	20001044 	.word	0x20001044

0800751c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	613b      	str	r3, [r7, #16]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007562:	f000 ff91 	bl	8008488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007566:	4b1d      	ldr	r3, [pc, #116]	@ (80075dc <xTaskCheckForTimeOut+0xc0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d102      	bne.n	8007586 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e023      	b.n	80075ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <xTaskCheckForTimeOut+0xc4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d007      	beq.n	80075a2 <xTaskCheckForTimeOut+0x86>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	429a      	cmp	r2, r3
 800759a:	d302      	bcc.n	80075a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e015      	b.n	80075ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d20b      	bcs.n	80075c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ff99 	bl	80074f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e004      	b.n	80075ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075ce:	f000 ff8d 	bl	80084ec <vPortExitCritical>

	return xReturn;
 80075d2:	69fb      	ldr	r3, [r7, #28]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20001044 	.word	0x20001044
 80075e0:	20001058 	.word	0x20001058

080075e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075e8:	4b03      	ldr	r3, [pc, #12]	@ (80075f8 <vTaskMissedYield+0x14>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20001054 	.word	0x20001054

080075fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007604:	f000 f852 	bl	80076ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <prvIdleTask+0x28>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d9f9      	bls.n	8007604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <prvIdleTask+0x2c>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007620:	e7f0      	b.n	8007604 <prvIdleTask+0x8>
 8007622:	bf00      	nop
 8007624:	20000b70 	.word	0x20000b70
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
 8007636:	e00c      	b.n	8007652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a12      	ldr	r2, [pc, #72]	@ (800768c <prvInitialiseTaskLists+0x60>)
 8007644:	4413      	add	r3, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fb18 	bl	8005c7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b37      	cmp	r3, #55	@ 0x37
 8007656:	d9ef      	bls.n	8007638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007658:	480d      	ldr	r0, [pc, #52]	@ (8007690 <prvInitialiseTaskLists+0x64>)
 800765a:	f7fe fb0f 	bl	8005c7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800765e:	480d      	ldr	r0, [pc, #52]	@ (8007694 <prvInitialiseTaskLists+0x68>)
 8007660:	f7fe fb0c 	bl	8005c7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007664:	480c      	ldr	r0, [pc, #48]	@ (8007698 <prvInitialiseTaskLists+0x6c>)
 8007666:	f7fe fb09 	bl	8005c7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800766a:	480c      	ldr	r0, [pc, #48]	@ (800769c <prvInitialiseTaskLists+0x70>)
 800766c:	f7fe fb06 	bl	8005c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007670:	480b      	ldr	r0, [pc, #44]	@ (80076a0 <prvInitialiseTaskLists+0x74>)
 8007672:	f7fe fb03 	bl	8005c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007676:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <prvInitialiseTaskLists+0x78>)
 8007678:	4a05      	ldr	r2, [pc, #20]	@ (8007690 <prvInitialiseTaskLists+0x64>)
 800767a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <prvInitialiseTaskLists+0x7c>)
 800767e:	4a05      	ldr	r2, [pc, #20]	@ (8007694 <prvInitialiseTaskLists+0x68>)
 8007680:	601a      	str	r2, [r3, #0]
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000b70 	.word	0x20000b70
 8007690:	20000fd0 	.word	0x20000fd0
 8007694:	20000fe4 	.word	0x20000fe4
 8007698:	20001000 	.word	0x20001000
 800769c:	20001014 	.word	0x20001014
 80076a0:	2000102c 	.word	0x2000102c
 80076a4:	20000ff8 	.word	0x20000ff8
 80076a8:	20000ffc 	.word	0x20000ffc

080076ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b2:	e019      	b.n	80076e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076b4:	f000 fee8 	bl	8008488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b8:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <prvCheckTasksWaitingTermination+0x50>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe fb63 	bl	8005d90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <prvCheckTasksWaitingTermination+0x54>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007700 <prvCheckTasksWaitingTermination+0x54>)
 80076d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3b01      	subs	r3, #1
 80076da:	4a0a      	ldr	r2, [pc, #40]	@ (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076de:	f000 ff05 	bl	80084ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f810 	bl	8007708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076e8:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e1      	bne.n	80076b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20001014 	.word	0x20001014
 8007700:	20001040 	.word	0x20001040
 8007704:	20001028 	.word	0x20001028

08007708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3354      	adds	r3, #84	@ 0x54
 8007714:	4618      	mov	r0, r3
 8007716:	f002 f9a5 	bl	8009a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007728:	4618      	mov	r0, r3
 800772a:	f001 f89d 	bl	8008868 <vPortFree>
				vPortFree( pxTCB );
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f89a 	bl	8008868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007734:	e019      	b.n	800776a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800773c:	2b01      	cmp	r3, #1
 800773e:	d103      	bne.n	8007748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f891 	bl	8008868 <vPortFree>
	}
 8007746:	e010      	b.n	800776a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800774e:	2b02      	cmp	r3, #2
 8007750:	d00b      	beq.n	800776a <prvDeleteTCB+0x62>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60fb      	str	r3, [r7, #12]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <prvDeleteTCB+0x5e>
	}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <prvResetNextTaskUnblockTime+0x38>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007784:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007786:	f04f 32ff 	mov.w	r2, #4294967295
 800778a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800778c:	e008      	b.n	80077a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778e:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <prvResetNextTaskUnblockTime+0x38>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <prvResetNextTaskUnblockTime+0x3c>)
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000ff8 	.word	0x20000ff8
 80077b0:	20001060 	.word	0x20001060

080077b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077ba:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <xTaskGetSchedulerState+0x34>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077c2:	2301      	movs	r3, #1
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	e008      	b.n	80077da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c8:	4b08      	ldr	r3, [pc, #32]	@ (80077ec <xTaskGetSchedulerState+0x38>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077d0:	2302      	movs	r3, #2
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	e001      	b.n	80077da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077d6:	2300      	movs	r3, #0
 80077d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077da:	687b      	ldr	r3, [r7, #4]
	}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	2000104c 	.word	0x2000104c
 80077ec:	20001068 	.word	0x20001068

080077f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d051      	beq.n	80078aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780a:	4b2a      	ldr	r3, [pc, #168]	@ (80078b4 <xTaskPriorityInherit+0xc4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d241      	bcs.n	8007898 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	db06      	blt.n	800782a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800781c:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <xTaskPriorityInherit+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6959      	ldr	r1, [r3, #20]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a1f      	ldr	r2, [pc, #124]	@ (80078b8 <xTaskPriorityInherit+0xc8>)
 800783c:	4413      	add	r3, r2
 800783e:	4299      	cmp	r1, r3
 8007840:	d122      	bne.n	8007888 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	3304      	adds	r3, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe faa2 	bl	8005d90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800784c:	4b19      	ldr	r3, [pc, #100]	@ (80078b4 <xTaskPriorityInherit+0xc4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785a:	4b18      	ldr	r3, [pc, #96]	@ (80078bc <xTaskPriorityInherit+0xcc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d903      	bls.n	800786a <xTaskPriorityInherit+0x7a>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007866:	4a15      	ldr	r2, [pc, #84]	@ (80078bc <xTaskPriorityInherit+0xcc>)
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4a10      	ldr	r2, [pc, #64]	@ (80078b8 <xTaskPriorityInherit+0xc8>)
 8007878:	441a      	add	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7fe fa28 	bl	8005cd6 <vListInsertEnd>
 8007886:	e004      	b.n	8007892 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007888:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <xTaskPriorityInherit+0xc4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007892:	2301      	movs	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e008      	b.n	80078aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800789c:	4b05      	ldr	r3, [pc, #20]	@ (80078b4 <xTaskPriorityInherit+0xc4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d201      	bcs.n	80078aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078aa:	68fb      	ldr	r3, [r7, #12]
	}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000b6c 	.word	0x20000b6c
 80078b8:	20000b70 	.word	0x20000b70
 80078bc:	20001048 	.word	0x20001048

080078c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d058      	beq.n	8007988 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007994 <xTaskPriorityDisinherit+0xd4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d00b      	beq.n	80078f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60bb      	str	r3, [r7, #8]
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791c:	1e5a      	subs	r2, r3, #1
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792a:	429a      	cmp	r2, r3
 800792c:	d02c      	beq.n	8007988 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007932:	2b00      	cmp	r3, #0
 8007934:	d128      	bne.n	8007988 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3304      	adds	r3, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fa28 	bl	8005d90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007958:	4b0f      	ldr	r3, [pc, #60]	@ (8007998 <xTaskPriorityDisinherit+0xd8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d903      	bls.n	8007968 <xTaskPriorityDisinherit+0xa8>
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	4a0c      	ldr	r2, [pc, #48]	@ (8007998 <xTaskPriorityDisinherit+0xd8>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4a09      	ldr	r2, [pc, #36]	@ (800799c <xTaskPriorityDisinherit+0xdc>)
 8007976:	441a      	add	r2, r3
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f7fe f9a9 	bl	8005cd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007988:	697b      	ldr	r3, [r7, #20]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000b6c 	.word	0x20000b6c
 8007998:	20001048 	.word	0x20001048
 800799c:	20000b70 	.word	0x20000b70

080079a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079ae:	2301      	movs	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d06c      	beq.n	8007a92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	60fb      	str	r3, [r7, #12]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d902      	bls.n	80079e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	e002      	b.n	80079ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d04c      	beq.n	8007a92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d147      	bne.n	8007a92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a02:	4b26      	ldr	r3, [pc, #152]	@ (8007a9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d10b      	bne.n	8007a24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60bb      	str	r3, [r7, #8]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db04      	blt.n	8007a42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	6959      	ldr	r1, [r3, #20]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4a13      	ldr	r2, [pc, #76]	@ (8007aa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a52:	4413      	add	r3, r2
 8007a54:	4299      	cmp	r1, r3
 8007a56:	d11c      	bne.n	8007a92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f997 	bl	8005d90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a66:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a72:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a07      	ldr	r2, [pc, #28]	@ (8007aa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a84:	441a      	add	r2, r3
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe f922 	bl	8005cd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a92:	bf00      	nop
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000b6c 	.word	0x20000b6c
 8007aa0:	20000b70 	.word	0x20000b70
 8007aa4:	20001048 	.word	0x20001048

08007aa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007aac:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <pvTaskIncrementMutexHeldCount+0x24>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007aba:	3201      	adds	r2, #1
 8007abc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20000b6c 	.word	0x20000b6c

08007ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ada:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0x90>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe f952 	bl	8005d90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d10a      	bne.n	8007b0a <prvAddCurrentTaskToDelayedList+0x3a>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afa:	4b1a      	ldr	r3, [pc, #104]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3304      	adds	r3, #4
 8007b00:	4619      	mov	r1, r3
 8007b02:	4819      	ldr	r0, [pc, #100]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b04:	f7fe f8e7 	bl	8005cd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b08:	e026      	b.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4413      	add	r3, r2
 8007b10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b12:	4b14      	ldr	r3, [pc, #80]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d209      	bcs.n	8007b36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b22:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f7fe f8f5 	bl	8005d1e <vListInsert>
}
 8007b34:	e010      	b.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b36:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7fe f8eb 	bl	8005d1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b48:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d202      	bcs.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b52:	4a08      	ldr	r2, [pc, #32]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6013      	str	r3, [r2, #0]
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20001044 	.word	0x20001044
 8007b64:	20000b6c 	.word	0x20000b6c
 8007b68:	2000102c 	.word	0x2000102c
 8007b6c:	20000ffc 	.word	0x20000ffc
 8007b70:	20000ff8 	.word	0x20000ff8
 8007b74:	20001060 	.word	0x20001060

08007b78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	@ 0x28
 8007b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b82:	f000 fb13 	bl	80081ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b86:	4b1d      	ldr	r3, [pc, #116]	@ (8007bfc <xTimerCreateTimerTask+0x84>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d021      	beq.n	8007bd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b96:	1d3a      	adds	r2, r7, #4
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	f107 030c 	add.w	r3, r7, #12
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe f851 	bl	8005c48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	9202      	str	r2, [sp, #8]
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	460a      	mov	r2, r1
 8007bb8:	4911      	ldr	r1, [pc, #68]	@ (8007c00 <xTimerCreateTimerTask+0x88>)
 8007bba:	4812      	ldr	r0, [pc, #72]	@ (8007c04 <xTimerCreateTimerTask+0x8c>)
 8007bbc:	f7fe ffa2 	bl	8006b04 <xTaskCreateStatic>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4a11      	ldr	r2, [pc, #68]	@ (8007c08 <xTimerCreateTimerTask+0x90>)
 8007bc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <xTimerCreateTimerTask+0x90>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	613b      	str	r3, [r7, #16]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bf0:	697b      	ldr	r3, [r7, #20]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	2000109c 	.word	0x2000109c
 8007c00:	0800d410 	.word	0x0800d410
 8007c04:	08007d45 	.word	0x08007d45
 8007c08:	200010a0 	.word	0x200010a0

08007c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	@ 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xTimerGenericCommand+0x30>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	623b      	str	r3, [r7, #32]
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02a      	beq.n	8007c9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	dc18      	bgt.n	8007c88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c56:	f7ff fdad 	bl	80077b4 <xTaskGetSchedulerState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d109      	bne.n	8007c74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c60:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	f107 0110 	add.w	r1, r7, #16
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c6c:	f7fe fa32 	bl	80060d4 <xQueueGenericSend>
 8007c70:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c72:	e012      	b.n	8007c9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	f107 0110 	add.w	r1, r7, #16
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f7fe fa28 	bl	80060d4 <xQueueGenericSend>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c86:	e008      	b.n	8007c9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c88:	4b06      	ldr	r3, [pc, #24]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	f107 0110 	add.w	r1, r7, #16
 8007c90:	2300      	movs	r3, #0
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	f7fe fb20 	bl	80062d8 <xQueueGenericSendFromISR>
 8007c98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	@ 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	2000109c 	.word	0x2000109c

08007ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb2:	4b23      	ldr	r3, [pc, #140]	@ (8007d40 <prvProcessExpiredTimer+0x98>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe f865 	bl	8005d90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d023      	beq.n	8007d1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	699a      	ldr	r2, [r3, #24]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	18d1      	adds	r1, r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f000 f8d5 	bl	8007e90 <prvInsertTimerInActiveList>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d020      	beq.n	8007d2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cec:	2300      	movs	r3, #0
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7ff ff88 	bl	8007c0c <xTimerGenericCommand>
 8007cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d114      	bne.n	8007d2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	4798      	blx	r3
}
 8007d36:	bf00      	nop
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20001094 	.word	0x20001094

08007d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d4c:	f107 0308 	add.w	r3, r7, #8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f859 	bl	8007e08 <prvGetNextExpireTime>
 8007d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f805 	bl	8007d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d62:	f000 f8d7 	bl	8007f14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d66:	bf00      	nop
 8007d68:	e7f0      	b.n	8007d4c <prvTimerTask+0x8>
	...

08007d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d76:	f7ff f929 	bl	8006fcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f866 	bl	8007e50 <prvSampleTimeNow>
 8007d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d130      	bne.n	8007dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d806      	bhi.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d9a:	f7ff f925 	bl	8006fe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ff81 	bl	8007ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007da6:	e024      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dae:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <prvProcessTimerOrBlockTask+0x90>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <prvProcessTimerOrBlockTask+0x50>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <prvProcessTimerOrBlockTask+0x52>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e00 <prvProcessTimerOrBlockTask+0x94>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fe65 	bl	8006a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f7ff f909 	bl	8006fe8 <xTaskResumeAll>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ddc:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <prvProcessTimerOrBlockTask+0x98>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
}
 8007dec:	e001      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dee:	f7ff f8fb 	bl	8006fe8 <xTaskResumeAll>
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20001098 	.word	0x20001098
 8007e00:	2000109c 	.word	0x2000109c
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e10:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <prvGetNextExpireTime+0x44>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <prvGetNextExpireTime+0x16>
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	e000      	b.n	8007e20 <prvGetNextExpireTime+0x18>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <prvGetNextExpireTime+0x44>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e001      	b.n	8007e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20001094 	.word	0x20001094

08007e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e58:	f7ff f964 	bl	8007124 <xTaskGetTickCount>
 8007e5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <prvSampleTimeNow+0x3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d205      	bcs.n	8007e74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e68:	f000 f93a 	bl	80080e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	e002      	b.n	8007e7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e7a:	4a04      	ldr	r2, [pc, #16]	@ (8007e8c <prvSampleTimeNow+0x3c>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	200010a4 	.word	0x200010a4

08007e90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d812      	bhi.n	8007edc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d302      	bcc.n	8007eca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e01b      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007eca:	4b10      	ldr	r3, [pc, #64]	@ (8007f0c <prvInsertTimerInActiveList+0x7c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fd ff22 	bl	8005d1e <vListInsert>
 8007eda:	e012      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d206      	bcs.n	8007ef2 <prvInsertTimerInActiveList+0x62>
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e007      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ef2:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <prvInsertTimerInActiveList+0x80>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f7fd ff0e 	bl	8005d1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f02:	697b      	ldr	r3, [r7, #20]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20001098 	.word	0x20001098
 8007f10:	20001094 	.word	0x20001094

08007f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	@ 0x38
 8007f18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f1a:	e0ce      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da19      	bge.n	8007f56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	3304      	adds	r3, #4
 8007f26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	6850      	ldr	r0, [r2, #4]
 8007f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f50:	6892      	ldr	r2, [r2, #8]
 8007f52:	4611      	mov	r1, r2
 8007f54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f2c0 80ae 	blt.w	80080ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fd ff0e 	bl	8005d90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f74:	463b      	mov	r3, r7
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff ff6a 	bl	8007e50 <prvSampleTimeNow>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b09      	cmp	r3, #9
 8007f82:	f200 8097 	bhi.w	80080b4 <prvProcessReceivedCommands+0x1a0>
 8007f86:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <prvProcessReceivedCommands+0x78>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fb5 	.word	0x08007fb5
 8007f98:	0800802b 	.word	0x0800802b
 8007f9c:	0800803f 	.word	0x0800803f
 8007fa0:	0800808b 	.word	0x0800808b
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fb5 	.word	0x08007fb5
 8007fac:	0800802b 	.word	0x0800802b
 8007fb0:	0800803f 	.word	0x0800803f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	18d1      	adds	r1, r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd4:	f7ff ff5c 	bl	8007e90 <prvInsertTimerInActiveList>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d06c      	beq.n	80080b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d061      	beq.n	80080b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	2300      	movs	r3, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f7ff fe01 	bl	8007c0c <xTimerGenericCommand>
 800800a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d152      	bne.n	80080b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	61bb      	str	r3, [r7, #24]
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	b2da      	uxtb	r2, r3
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800803c:	e03d      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800803e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008044:	f043 0301 	orr.w	r3, r3, #1
 8008048:	b2da      	uxtb	r2, r3
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	617b      	str	r3, [r7, #20]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	699a      	ldr	r2, [r3, #24]
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	18d1      	adds	r1, r2, r3
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008084:	f7ff ff04 	bl	8007e90 <prvInsertTimerInActiveList>
					break;
 8008088:	e017      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d103      	bne.n	80080a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800809a:	f000 fbe5 	bl	8008868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800809e:	e00c      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080a6:	f023 0301 	bic.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80080b2:	e002      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <prvProcessReceivedCommands+0x1a6>
					break;
 80080b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <prvProcessReceivedCommands+0x1c8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	1d39      	adds	r1, r7, #4
 80080c0:	2200      	movs	r2, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe f9a6 	bl	8006414 <xQueueReceive>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f47f af26 	bne.w	8007f1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3730      	adds	r7, #48	@ 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	2000109c 	.word	0x2000109c

080080e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080e6:	e049      	b.n	800817c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080e8:	4b2e      	ldr	r3, [pc, #184]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f2:	4b2c      	ldr	r3, [pc, #176]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd fe45 	bl	8005d90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d02f      	beq.n	800817c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d90e      	bls.n	800814c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800813a:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3304      	adds	r3, #4
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f7fd fdea 	bl	8005d1e <vListInsert>
 800814a:	e017      	b.n	800817c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800814c:	2300      	movs	r3, #0
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fd58 	bl	8007c0c <xTimerGenericCommand>
 800815c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	603b      	str	r3, [r7, #0]
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	e7fd      	b.n	8008178 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800817c:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1b0      	bne.n	80080e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008186:	4b07      	ldr	r3, [pc, #28]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800818c:	4b06      	ldr	r3, [pc, #24]	@ (80081a8 <prvSwitchTimerLists+0xc8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a04      	ldr	r2, [pc, #16]	@ (80081a4 <prvSwitchTimerLists+0xc4>)
 8008192:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008194:	4a04      	ldr	r2, [pc, #16]	@ (80081a8 <prvSwitchTimerLists+0xc8>)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	6013      	str	r3, [r2, #0]
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20001094 	.word	0x20001094
 80081a8:	20001098 	.word	0x20001098

080081ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081b2:	f000 f969 	bl	8008488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081b6:	4b15      	ldr	r3, [pc, #84]	@ (800820c <prvCheckForValidListAndQueue+0x60>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d120      	bne.n	8008200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081be:	4814      	ldr	r0, [pc, #80]	@ (8008210 <prvCheckForValidListAndQueue+0x64>)
 80081c0:	f7fd fd5c 	bl	8005c7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081c4:	4813      	ldr	r0, [pc, #76]	@ (8008214 <prvCheckForValidListAndQueue+0x68>)
 80081c6:	f7fd fd59 	bl	8005c7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081ca:	4b13      	ldr	r3, [pc, #76]	@ (8008218 <prvCheckForValidListAndQueue+0x6c>)
 80081cc:	4a10      	ldr	r2, [pc, #64]	@ (8008210 <prvCheckForValidListAndQueue+0x64>)
 80081ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081d0:	4b12      	ldr	r3, [pc, #72]	@ (800821c <prvCheckForValidListAndQueue+0x70>)
 80081d2:	4a10      	ldr	r2, [pc, #64]	@ (8008214 <prvCheckForValidListAndQueue+0x68>)
 80081d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081d6:	2300      	movs	r3, #0
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	4b11      	ldr	r3, [pc, #68]	@ (8008220 <prvCheckForValidListAndQueue+0x74>)
 80081dc:	4a11      	ldr	r2, [pc, #68]	@ (8008224 <prvCheckForValidListAndQueue+0x78>)
 80081de:	2110      	movs	r1, #16
 80081e0:	200a      	movs	r0, #10
 80081e2:	f7fd fe69 	bl	8005eb8 <xQueueGenericCreateStatic>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <prvCheckForValidListAndQueue+0x60>)
 80081ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <prvCheckForValidListAndQueue+0x60>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <prvCheckForValidListAndQueue+0x60>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	490b      	ldr	r1, [pc, #44]	@ (8008228 <prvCheckForValidListAndQueue+0x7c>)
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fc24 	bl	8006a48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008200:	f000 f974 	bl	80084ec <vPortExitCritical>
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000109c 	.word	0x2000109c
 8008210:	2000106c 	.word	0x2000106c
 8008214:	20001080 	.word	0x20001080
 8008218:	20001094 	.word	0x20001094
 800821c:	20001098 	.word	0x20001098
 8008220:	20001148 	.word	0x20001148
 8008224:	200010a8 	.word	0x200010a8
 8008228:	0800d418 	.word	0x0800d418

0800822c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b04      	subs	r3, #4
 800823c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3b04      	subs	r3, #4
 800824a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f023 0201 	bic.w	r2, r3, #1
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b04      	subs	r3, #4
 800825a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800825c:	4a0c      	ldr	r2, [pc, #48]	@ (8008290 <pxPortInitialiseStack+0x64>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3b14      	subs	r3, #20
 8008266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3b04      	subs	r3, #4
 8008272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f06f 0202 	mvn.w	r2, #2
 800827a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3b20      	subs	r3, #32
 8008280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008282:	68fb      	ldr	r3, [r7, #12]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	08008295 	.word	0x08008295

08008294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800829e:	4b13      	ldr	r3, [pc, #76]	@ (80082ec <prvTaskExitError+0x58>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d00b      	beq.n	80082c0 <prvTaskExitError+0x2c>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	60fb      	str	r3, [r7, #12]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <prvTaskExitError+0x28>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	60bb      	str	r3, [r7, #8]
}
 80082d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082d4:	bf00      	nop
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0fc      	beq.n	80082d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	2000000c 	.word	0x2000000c

080082f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082f0:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <pxCurrentTCBConst2>)
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	f380 8809 	msr	PSP, r0
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f380 8811 	msr	BASEPRI, r0
 800830a:	4770      	bx	lr
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst2>:
 8008310:	20000b6c 	.word	0x20000b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008318:	4808      	ldr	r0, [pc, #32]	@ (800833c <prvPortStartFirstTask+0x24>)
 800831a:	6800      	ldr	r0, [r0, #0]
 800831c:	6800      	ldr	r0, [r0, #0]
 800831e:	f380 8808 	msr	MSP, r0
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8814 	msr	CONTROL, r0
 800832a:	b662      	cpsie	i
 800832c:	b661      	cpsie	f
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	df00      	svc	0
 8008338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800833a:	bf00      	nop
 800833c:	e000ed08 	.word	0xe000ed08

08008340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008346:	4b47      	ldr	r3, [pc, #284]	@ (8008464 <xPortStartScheduler+0x124>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a47      	ldr	r2, [pc, #284]	@ (8008468 <xPortStartScheduler+0x128>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10b      	bne.n	8008368 <xPortStartScheduler+0x28>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008368:	4b3e      	ldr	r3, [pc, #248]	@ (8008464 <xPortStartScheduler+0x124>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a3f      	ldr	r2, [pc, #252]	@ (800846c <xPortStartScheduler+0x12c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d10b      	bne.n	800838a <xPortStartScheduler+0x4a>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	613b      	str	r3, [r7, #16]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800838a:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <xPortStartScheduler+0x130>)
 800838c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	22ff      	movs	r2, #255	@ 0xff
 800839a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	4b31      	ldr	r3, [pc, #196]	@ (8008474 <xPortStartScheduler+0x134>)
 80083b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083b2:	4b31      	ldr	r3, [pc, #196]	@ (8008478 <xPortStartScheduler+0x138>)
 80083b4:	2207      	movs	r2, #7
 80083b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083b8:	e009      	b.n	80083ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80083ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008478 <xPortStartScheduler+0x138>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008478 <xPortStartScheduler+0x138>)
 80083c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d6:	2b80      	cmp	r3, #128	@ 0x80
 80083d8:	d0ef      	beq.n	80083ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083da:	4b27      	ldr	r3, [pc, #156]	@ (8008478 <xPortStartScheduler+0x138>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f1c3 0307 	rsb	r3, r3, #7
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d00b      	beq.n	80083fe <xPortStartScheduler+0xbe>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60bb      	str	r3, [r7, #8]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008478 <xPortStartScheduler+0x138>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	4a1c      	ldr	r2, [pc, #112]	@ (8008478 <xPortStartScheduler+0x138>)
 8008406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008408:	4b1b      	ldr	r3, [pc, #108]	@ (8008478 <xPortStartScheduler+0x138>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008410:	4a19      	ldr	r2, [pc, #100]	@ (8008478 <xPortStartScheduler+0x138>)
 8008412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	b2da      	uxtb	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800841c:	4b17      	ldr	r3, [pc, #92]	@ (800847c <xPortStartScheduler+0x13c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a16      	ldr	r2, [pc, #88]	@ (800847c <xPortStartScheduler+0x13c>)
 8008422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008428:	4b14      	ldr	r3, [pc, #80]	@ (800847c <xPortStartScheduler+0x13c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a13      	ldr	r2, [pc, #76]	@ (800847c <xPortStartScheduler+0x13c>)
 800842e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008434:	f000 f8da 	bl	80085ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008438:	4b11      	ldr	r3, [pc, #68]	@ (8008480 <xPortStartScheduler+0x140>)
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800843e:	f000 f8f9 	bl	8008634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008442:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <xPortStartScheduler+0x144>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a0f      	ldr	r2, [pc, #60]	@ (8008484 <xPortStartScheduler+0x144>)
 8008448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800844c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800844e:	f7ff ff63 	bl	8008318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008452:	f7fe ff31 	bl	80072b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008456:	f7ff ff1d 	bl	8008294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	e000ed00 	.word	0xe000ed00
 8008468:	410fc271 	.word	0x410fc271
 800846c:	410fc270 	.word	0x410fc270
 8008470:	e000e400 	.word	0xe000e400
 8008474:	20001198 	.word	0x20001198
 8008478:	2000119c 	.word	0x2000119c
 800847c:	e000ed20 	.word	0xe000ed20
 8008480:	2000000c 	.word	0x2000000c
 8008484:	e000ef34 	.word	0xe000ef34

08008488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084a2:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a0e      	ldr	r2, [pc, #56]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084ac:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d110      	bne.n	80084d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084b4:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <vPortEnterCritical+0x60>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	603b      	str	r3, [r7, #0]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <vPortEnterCritical+0x4a>
	}
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000000c 	.word	0x2000000c
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084f2:	4b12      	ldr	r3, [pc, #72]	@ (800853c <vPortExitCritical+0x50>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <vPortExitCritical+0x26>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	607b      	str	r3, [r7, #4]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <vPortExitCritical+0x50>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3b01      	subs	r3, #1
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <vPortExitCritical+0x50>)
 800851a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <vPortExitCritical+0x50>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <vPortExitCritical+0x44>
 8008524:	2300      	movs	r3, #0
 8008526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f383 8811 	msr	BASEPRI, r3
}
 800852e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	2000000c 	.word	0x2000000c

08008540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008540:	f3ef 8009 	mrs	r0, PSP
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <pxCurrentTCBConst>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	f01e 0f10 	tst.w	lr, #16
 8008550:	bf08      	it	eq
 8008552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	6010      	str	r0, [r2, #0]
 800855c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008564:	f380 8811 	msr	BASEPRI, r0
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f7fe fea2 	bl	80072b8 <vTaskSwitchContext>
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	f380 8811 	msr	BASEPRI, r0
 800857c:	bc09      	pop	{r0, r3}
 800857e:	6819      	ldr	r1, [r3, #0]
 8008580:	6808      	ldr	r0, [r1, #0]
 8008582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008586:	f01e 0f10 	tst.w	lr, #16
 800858a:	bf08      	it	eq
 800858c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008590:	f380 8809 	msr	PSP, r0
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w

080085a0 <pxCurrentTCBConst>:
 80085a0:	20000b6c 	.word	0x20000b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop

080085a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	607b      	str	r3, [r7, #4]
}
 80085c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085c2:	f7fe fdbf 	bl	8007144 <xTaskIncrementTick>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085cc:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <xPortSysTickHandler+0x40>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f383 8811 	msr	BASEPRI, r3
}
 80085de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <vPortSetupTimerInterrupt+0x34>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <vPortSetupTimerInterrupt+0x38>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <vPortSetupTimerInterrupt+0x3c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <vPortSetupTimerInterrupt+0x40>)
 8008602:	fba2 2303 	umull	r2, r3, r2, r3
 8008606:	099b      	lsrs	r3, r3, #6
 8008608:	4a09      	ldr	r2, [pc, #36]	@ (8008630 <vPortSetupTimerInterrupt+0x44>)
 800860a:	3b01      	subs	r3, #1
 800860c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800860e:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <vPortSetupTimerInterrupt+0x34>)
 8008610:	2207      	movs	r2, #7
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	e000e010 	.word	0xe000e010
 8008624:	e000e018 	.word	0xe000e018
 8008628:	20000000 	.word	0x20000000
 800862c:	10624dd3 	.word	0x10624dd3
 8008630:	e000e014 	.word	0xe000e014

08008634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008644 <vPortEnableVFP+0x10>
 8008638:	6801      	ldr	r1, [r0, #0]
 800863a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800863e:	6001      	str	r1, [r0, #0]
 8008640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008642:	bf00      	nop
 8008644:	e000ed88 	.word	0xe000ed88

08008648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800864e:	f3ef 8305 	mrs	r3, IPSR
 8008652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b0f      	cmp	r3, #15
 8008658:	d915      	bls.n	8008686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800865a:	4a18      	ldr	r2, [pc, #96]	@ (80086bc <vPortValidateInterruptPriority+0x74>)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008664:	4b16      	ldr	r3, [pc, #88]	@ (80086c0 <vPortValidateInterruptPriority+0x78>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	7afa      	ldrb	r2, [r7, #11]
 800866a:	429a      	cmp	r2, r3
 800866c:	d20b      	bcs.n	8008686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <vPortValidateInterruptPriority+0x7c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800868e:	4b0e      	ldr	r3, [pc, #56]	@ (80086c8 <vPortValidateInterruptPriority+0x80>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d90b      	bls.n	80086ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	603b      	str	r3, [r7, #0]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vPortValidateInterruptPriority+0x62>
	}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	e000e3f0 	.word	0xe000e3f0
 80086c0:	20001198 	.word	0x20001198
 80086c4:	e000ed0c 	.word	0xe000ed0c
 80086c8:	2000119c 	.word	0x2000119c

080086cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	@ 0x28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086d8:	f7fe fc78 	bl	8006fcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008850 <pvPortMalloc+0x184>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086e4:	f000 f924 	bl	8008930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008854 <pvPortMalloc+0x188>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 8095 	bne.w	8008820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01e      	beq.n	800873a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80086fc:	2208      	movs	r2, #8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4413      	add	r3, r2
 8008702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d015      	beq.n	800873a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f023 0307 	bic.w	r3, r3, #7
 8008714:	3308      	adds	r3, #8
 8008716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <pvPortMalloc+0x6e>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	617b      	str	r3, [r7, #20]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d06f      	beq.n	8008820 <pvPortMalloc+0x154>
 8008740:	4b45      	ldr	r3, [pc, #276]	@ (8008858 <pvPortMalloc+0x18c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d86a      	bhi.n	8008820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800874a:	4b44      	ldr	r3, [pc, #272]	@ (800885c <pvPortMalloc+0x190>)
 800874c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800874e:	4b43      	ldr	r3, [pc, #268]	@ (800885c <pvPortMalloc+0x190>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008754:	e004      	b.n	8008760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	429a      	cmp	r2, r3
 8008768:	d903      	bls.n	8008772 <pvPortMalloc+0xa6>
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f1      	bne.n	8008756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008772:	4b37      	ldr	r3, [pc, #220]	@ (8008850 <pvPortMalloc+0x184>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008778:	429a      	cmp	r2, r3
 800877a:	d051      	beq.n	8008820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2208      	movs	r2, #8
 8008782:	4413      	add	r3, r2
 8008784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	1ad2      	subs	r2, r2, r3
 8008796:	2308      	movs	r3, #8
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	429a      	cmp	r2, r3
 800879c:	d920      	bls.n	80087e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800879e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <pvPortMalloc+0xfc>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087da:	69b8      	ldr	r0, [r7, #24]
 80087dc:	f000 f90a 	bl	80089f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008858 <pvPortMalloc+0x18c>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008858 <pvPortMalloc+0x18c>)
 80087ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <pvPortMalloc+0x18c>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <pvPortMalloc+0x194>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d203      	bcs.n	8008802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087fa:	4b17      	ldr	r3, [pc, #92]	@ (8008858 <pvPortMalloc+0x18c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a18      	ldr	r2, [pc, #96]	@ (8008860 <pvPortMalloc+0x194>)
 8008800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4b13      	ldr	r3, [pc, #76]	@ (8008854 <pvPortMalloc+0x188>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	431a      	orrs	r2, r3
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008816:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <pvPortMalloc+0x198>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	4a11      	ldr	r2, [pc, #68]	@ (8008864 <pvPortMalloc+0x198>)
 800881e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008820:	f7fe fbe2 	bl	8006fe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00b      	beq.n	8008846 <pvPortMalloc+0x17a>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60fb      	str	r3, [r7, #12]
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	e7fd      	b.n	8008842 <pvPortMalloc+0x176>
	return pvReturn;
 8008846:	69fb      	ldr	r3, [r7, #28]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3728      	adds	r7, #40	@ 0x28
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20004da8 	.word	0x20004da8
 8008854:	20004dbc 	.word	0x20004dbc
 8008858:	20004dac 	.word	0x20004dac
 800885c:	20004da0 	.word	0x20004da0
 8008860:	20004db0 	.word	0x20004db0
 8008864:	20004db4 	.word	0x20004db4

08008868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d04f      	beq.n	800891a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800887a:	2308      	movs	r3, #8
 800887c:	425b      	negs	r3, r3
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4413      	add	r3, r2
 8008882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b25      	ldr	r3, [pc, #148]	@ (8008924 <vPortFree+0xbc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4013      	ands	r3, r2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <vPortFree+0x46>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	60fb      	str	r3, [r7, #12]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <vPortFree+0x66>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60bb      	str	r3, [r7, #8]
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	e7fd      	b.n	80088ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <vPortFree+0xbc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01e      	beq.n	800891a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11a      	bne.n	800891a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008924 <vPortFree+0xbc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	401a      	ands	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088f4:	f7fe fb6a 	bl	8006fcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <vPortFree+0xc0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4413      	add	r3, r2
 8008902:	4a09      	ldr	r2, [pc, #36]	@ (8008928 <vPortFree+0xc0>)
 8008904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008906:	6938      	ldr	r0, [r7, #16]
 8008908:	f000 f874 	bl	80089f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <vPortFree+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	4a06      	ldr	r2, [pc, #24]	@ (800892c <vPortFree+0xc4>)
 8008914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008916:	f7fe fb67 	bl	8006fe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20004dbc 	.word	0x20004dbc
 8008928:	20004dac 	.word	0x20004dac
 800892c:	20004db8 	.word	0x20004db8

08008930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800893a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800893c:	4b27      	ldr	r3, [pc, #156]	@ (80089dc <prvHeapInit+0xac>)
 800893e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3307      	adds	r3, #7
 800894e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0307 	bic.w	r3, r3, #7
 8008956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	4a1f      	ldr	r2, [pc, #124]	@ (80089dc <prvHeapInit+0xac>)
 8008960:	4413      	add	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008968:	4a1d      	ldr	r2, [pc, #116]	@ (80089e0 <prvHeapInit+0xb0>)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800896e:	4b1c      	ldr	r3, [pc, #112]	@ (80089e0 <prvHeapInit+0xb0>)
 8008970:	2200      	movs	r2, #0
 8008972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	4413      	add	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800897c:	2208      	movs	r2, #8
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4a15      	ldr	r2, [pc, #84]	@ (80089e4 <prvHeapInit+0xb4>)
 8008990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008992:	4b14      	ldr	r3, [pc, #80]	@ (80089e4 <prvHeapInit+0xb4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800899a:	4b12      	ldr	r3, [pc, #72]	@ (80089e4 <prvHeapInit+0xb4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	1ad2      	subs	r2, r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089b0:	4b0c      	ldr	r3, [pc, #48]	@ (80089e4 <prvHeapInit+0xb4>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	4a0a      	ldr	r2, [pc, #40]	@ (80089e8 <prvHeapInit+0xb8>)
 80089be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4a09      	ldr	r2, [pc, #36]	@ (80089ec <prvHeapInit+0xbc>)
 80089c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089c8:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <prvHeapInit+0xc0>)
 80089ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80089ce:	601a      	str	r2, [r3, #0]
}
 80089d0:	bf00      	nop
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	200011a0 	.word	0x200011a0
 80089e0:	20004da0 	.word	0x20004da0
 80089e4:	20004da8 	.word	0x20004da8
 80089e8:	20004db0 	.word	0x20004db0
 80089ec:	20004dac 	.word	0x20004dac
 80089f0:	20004dbc 	.word	0x20004dbc

080089f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089fc:	4b28      	ldr	r3, [pc, #160]	@ (8008aa0 <prvInsertBlockIntoFreeList+0xac>)
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e002      	b.n	8008a08 <prvInsertBlockIntoFreeList+0x14>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d8f7      	bhi.n	8008a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d108      	bne.n	8008a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	441a      	add	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d118      	bne.n	8008a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b15      	ldr	r3, [pc, #84]	@ (8008aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d00d      	beq.n	8008a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	441a      	add	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	e008      	b.n	8008a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a72:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	e003      	b.n	8008a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d002      	beq.n	8008a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a92:	bf00      	nop
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20004da0 	.word	0x20004da0
 8008aa4:	20004da8 	.word	0x20004da8

08008aa8 <__cvt>:
 8008aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	ec57 6b10 	vmov	r6, r7, d0
 8008ab0:	2f00      	cmp	r7, #0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	bfbb      	ittet	lt
 8008aba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008abe:	461f      	movlt	r7, r3
 8008ac0:	2300      	movge	r3, #0
 8008ac2:	232d      	movlt	r3, #45	@ 0x2d
 8008ac4:	700b      	strb	r3, [r1, #0]
 8008ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008acc:	4691      	mov	r9, r2
 8008ace:	f023 0820 	bic.w	r8, r3, #32
 8008ad2:	bfbc      	itt	lt
 8008ad4:	4632      	movlt	r2, r6
 8008ad6:	4616      	movlt	r6, r2
 8008ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008adc:	d005      	beq.n	8008aea <__cvt+0x42>
 8008ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ae2:	d100      	bne.n	8008ae6 <__cvt+0x3e>
 8008ae4:	3401      	adds	r4, #1
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	e000      	b.n	8008aec <__cvt+0x44>
 8008aea:	2103      	movs	r1, #3
 8008aec:	ab03      	add	r3, sp, #12
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	ab02      	add	r3, sp, #8
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	ec47 6b10 	vmov	d0, r6, r7
 8008af8:	4653      	mov	r3, sl
 8008afa:	4622      	mov	r2, r4
 8008afc:	f001 f910 	bl	8009d20 <_dtoa_r>
 8008b00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b04:	4605      	mov	r5, r0
 8008b06:	d119      	bne.n	8008b3c <__cvt+0x94>
 8008b08:	f019 0f01 	tst.w	r9, #1
 8008b0c:	d00e      	beq.n	8008b2c <__cvt+0x84>
 8008b0e:	eb00 0904 	add.w	r9, r0, r4
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	b108      	cbz	r0, 8008b24 <__cvt+0x7c>
 8008b20:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b24:	2230      	movs	r2, #48	@ 0x30
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	454b      	cmp	r3, r9
 8008b2a:	d31e      	bcc.n	8008b6a <__cvt+0xc2>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b30:	1b5b      	subs	r3, r3, r5
 8008b32:	4628      	mov	r0, r5
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	b004      	add	sp, #16
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b40:	eb00 0904 	add.w	r9, r0, r4
 8008b44:	d1e5      	bne.n	8008b12 <__cvt+0x6a>
 8008b46:	7803      	ldrb	r3, [r0, #0]
 8008b48:	2b30      	cmp	r3, #48	@ 0x30
 8008b4a:	d10a      	bne.n	8008b62 <__cvt+0xba>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b58:	b918      	cbnz	r0, 8008b62 <__cvt+0xba>
 8008b5a:	f1c4 0401 	rsb	r4, r4, #1
 8008b5e:	f8ca 4000 	str.w	r4, [sl]
 8008b62:	f8da 3000 	ldr.w	r3, [sl]
 8008b66:	4499      	add	r9, r3
 8008b68:	e7d3      	b.n	8008b12 <__cvt+0x6a>
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	9103      	str	r1, [sp, #12]
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	e7d9      	b.n	8008b26 <__cvt+0x7e>

08008b72 <__exponent>:
 8008b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b74:	2900      	cmp	r1, #0
 8008b76:	bfba      	itte	lt
 8008b78:	4249      	neglt	r1, r1
 8008b7a:	232d      	movlt	r3, #45	@ 0x2d
 8008b7c:	232b      	movge	r3, #43	@ 0x2b
 8008b7e:	2909      	cmp	r1, #9
 8008b80:	7002      	strb	r2, [r0, #0]
 8008b82:	7043      	strb	r3, [r0, #1]
 8008b84:	dd29      	ble.n	8008bda <__exponent+0x68>
 8008b86:	f10d 0307 	add.w	r3, sp, #7
 8008b8a:	461d      	mov	r5, r3
 8008b8c:	270a      	movs	r7, #10
 8008b8e:	461a      	mov	r2, r3
 8008b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b94:	fb07 1416 	mls	r4, r7, r6, r1
 8008b98:	3430      	adds	r4, #48	@ 0x30
 8008b9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2c63      	cmp	r4, #99	@ 0x63
 8008ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	dcf1      	bgt.n	8008b8e <__exponent+0x1c>
 8008baa:	3130      	adds	r1, #48	@ 0x30
 8008bac:	1e94      	subs	r4, r2, #2
 8008bae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bb2:	1c41      	adds	r1, r0, #1
 8008bb4:	4623      	mov	r3, r4
 8008bb6:	42ab      	cmp	r3, r5
 8008bb8:	d30a      	bcc.n	8008bd0 <__exponent+0x5e>
 8008bba:	f10d 0309 	add.w	r3, sp, #9
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	42ac      	cmp	r4, r5
 8008bc2:	bf88      	it	hi
 8008bc4:	2300      	movhi	r3, #0
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	4403      	add	r3, r0
 8008bca:	1a18      	subs	r0, r3, r0
 8008bcc:	b003      	add	sp, #12
 8008bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bd8:	e7ed      	b.n	8008bb6 <__exponent+0x44>
 8008bda:	2330      	movs	r3, #48	@ 0x30
 8008bdc:	3130      	adds	r1, #48	@ 0x30
 8008bde:	7083      	strb	r3, [r0, #2]
 8008be0:	70c1      	strb	r1, [r0, #3]
 8008be2:	1d03      	adds	r3, r0, #4
 8008be4:	e7f1      	b.n	8008bca <__exponent+0x58>
	...

08008be8 <_printf_float>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	b08d      	sub	sp, #52	@ 0x34
 8008bee:	460c      	mov	r4, r1
 8008bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	f000 ff1f 	bl	8009a3c <_localeconv_r>
 8008bfe:	6803      	ldr	r3, [r0, #0]
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f7 fb3c 	bl	8000280 <strlen>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c10:	9005      	str	r0, [sp, #20]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	f103 0208 	add.w	r2, r3, #8
 8008c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c20:	f8d4 b000 	ldr.w	fp, [r4]
 8008c24:	f8c8 2000 	str.w	r2, [r8]
 8008c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8008eb0 <_printf_float+0x2c8>)
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	f7f7 ff7a 	bl	8000b3c <__aeabi_dcmpun>
 8008c48:	bb70      	cbnz	r0, 8008ca8 <_printf_float+0xc0>
 8008c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c4e:	4b98      	ldr	r3, [pc, #608]	@ (8008eb0 <_printf_float+0x2c8>)
 8008c50:	f04f 32ff 	mov.w	r2, #4294967295
 8008c54:	f7f7 ff54 	bl	8000b00 <__aeabi_dcmple>
 8008c58:	bb30      	cbnz	r0, 8008ca8 <_printf_float+0xc0>
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4649      	mov	r1, r9
 8008c62:	f7f7 ff43 	bl	8000aec <__aeabi_dcmplt>
 8008c66:	b110      	cbz	r0, 8008c6e <_printf_float+0x86>
 8008c68:	232d      	movs	r3, #45	@ 0x2d
 8008c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6e:	4a91      	ldr	r2, [pc, #580]	@ (8008eb4 <_printf_float+0x2cc>)
 8008c70:	4b91      	ldr	r3, [pc, #580]	@ (8008eb8 <_printf_float+0x2d0>)
 8008c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c76:	bf8c      	ite	hi
 8008c78:	4690      	movhi	r8, r2
 8008c7a:	4698      	movls	r8, r3
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	f02b 0304 	bic.w	r3, fp, #4
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	9700      	str	r7, [sp, #0]
 8008c8c:	4633      	mov	r3, r6
 8008c8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c90:	4621      	mov	r1, r4
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 f9d2 	bl	800903c <_printf_common>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f040 808d 	bne.w	8008db8 <_printf_float+0x1d0>
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	b00d      	add	sp, #52	@ 0x34
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca8:	4642      	mov	r2, r8
 8008caa:	464b      	mov	r3, r9
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f7f7 ff44 	bl	8000b3c <__aeabi_dcmpun>
 8008cb4:	b140      	cbz	r0, 8008cc8 <_printf_float+0xe0>
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfbc      	itt	lt
 8008cbc:	232d      	movlt	r3, #45	@ 0x2d
 8008cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8008ebc <_printf_float+0x2d4>)
 8008cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ec0 <_printf_float+0x2d8>)
 8008cc6:	e7d4      	b.n	8008c72 <_printf_float+0x8a>
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cce:	9206      	str	r2, [sp, #24]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	d13b      	bne.n	8008d4c <_printf_float+0x164>
 8008cd4:	2306      	movs	r3, #6
 8008cd6:	6063      	str	r3, [r4, #4]
 8008cd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ce4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ce8:	ab09      	add	r3, sp, #36	@ 0x24
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	ec49 8b10 	vmov	d0, r8, r9
 8008cf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff fed6 	bl	8008aa8 <__cvt>
 8008cfc:	9b06      	ldr	r3, [sp, #24]
 8008cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d00:	2b47      	cmp	r3, #71	@ 0x47
 8008d02:	4680      	mov	r8, r0
 8008d04:	d129      	bne.n	8008d5a <_printf_float+0x172>
 8008d06:	1cc8      	adds	r0, r1, #3
 8008d08:	db02      	blt.n	8008d10 <_printf_float+0x128>
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	4299      	cmp	r1, r3
 8008d0e:	dd41      	ble.n	8008d94 <_printf_float+0x1ac>
 8008d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d14:	fa5f fa8a 	uxtb.w	sl, sl
 8008d18:	3901      	subs	r1, #1
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d20:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d22:	f7ff ff26 	bl	8008b72 <__exponent>
 8008d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d28:	1813      	adds	r3, r2, r0
 8008d2a:	2a01      	cmp	r2, #1
 8008d2c:	4681      	mov	r9, r0
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	dc02      	bgt.n	8008d38 <_printf_float+0x150>
 8008d32:	6822      	ldr	r2, [r4, #0]
 8008d34:	07d2      	lsls	r2, r2, #31
 8008d36:	d501      	bpl.n	8008d3c <_printf_float+0x154>
 8008d38:	3301      	adds	r3, #1
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0a2      	beq.n	8008c8a <_printf_float+0xa2>
 8008d44:	232d      	movs	r3, #45	@ 0x2d
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d4a:	e79e      	b.n	8008c8a <_printf_float+0xa2>
 8008d4c:	9a06      	ldr	r2, [sp, #24]
 8008d4e:	2a47      	cmp	r2, #71	@ 0x47
 8008d50:	d1c2      	bne.n	8008cd8 <_printf_float+0xf0>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1c0      	bne.n	8008cd8 <_printf_float+0xf0>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e7bd      	b.n	8008cd6 <_printf_float+0xee>
 8008d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d5e:	d9db      	bls.n	8008d18 <_printf_float+0x130>
 8008d60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d64:	d118      	bne.n	8008d98 <_printf_float+0x1b0>
 8008d66:	2900      	cmp	r1, #0
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	dd0b      	ble.n	8008d84 <_printf_float+0x19c>
 8008d6c:	6121      	str	r1, [r4, #16]
 8008d6e:	b913      	cbnz	r3, 8008d76 <_printf_float+0x18e>
 8008d70:	6822      	ldr	r2, [r4, #0]
 8008d72:	07d0      	lsls	r0, r2, #31
 8008d74:	d502      	bpl.n	8008d7c <_printf_float+0x194>
 8008d76:	3301      	adds	r3, #1
 8008d78:	440b      	add	r3, r1
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d7e:	f04f 0900 	mov.w	r9, #0
 8008d82:	e7db      	b.n	8008d3c <_printf_float+0x154>
 8008d84:	b913      	cbnz	r3, 8008d8c <_printf_float+0x1a4>
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	07d2      	lsls	r2, r2, #31
 8008d8a:	d501      	bpl.n	8008d90 <_printf_float+0x1a8>
 8008d8c:	3302      	adds	r3, #2
 8008d8e:	e7f4      	b.n	8008d7a <_printf_float+0x192>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e7f2      	b.n	8008d7a <_printf_float+0x192>
 8008d94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	db05      	blt.n	8008daa <_printf_float+0x1c2>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	6121      	str	r1, [r4, #16]
 8008da2:	07d8      	lsls	r0, r3, #31
 8008da4:	d5ea      	bpl.n	8008d7c <_printf_float+0x194>
 8008da6:	1c4b      	adds	r3, r1, #1
 8008da8:	e7e7      	b.n	8008d7a <_printf_float+0x192>
 8008daa:	2900      	cmp	r1, #0
 8008dac:	bfd4      	ite	le
 8008dae:	f1c1 0202 	rsble	r2, r1, #2
 8008db2:	2201      	movgt	r2, #1
 8008db4:	4413      	add	r3, r2
 8008db6:	e7e0      	b.n	8008d7a <_printf_float+0x192>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	055a      	lsls	r2, r3, #21
 8008dbc:	d407      	bmi.n	8008dce <_printf_float+0x1e6>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d12b      	bne.n	8008e24 <_printf_float+0x23c>
 8008dcc:	e767      	b.n	8008c9e <_printf_float+0xb6>
 8008dce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dd2:	f240 80dd 	bls.w	8008f90 <_printf_float+0x3a8>
 8008dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f7f7 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d033      	beq.n	8008e4e <_printf_float+0x266>
 8008de6:	4a37      	ldr	r2, [pc, #220]	@ (8008ec4 <_printf_float+0x2dc>)
 8008de8:	2301      	movs	r3, #1
 8008dea:	4631      	mov	r1, r6
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	f43f af54 	beq.w	8008c9e <_printf_float+0xb6>
 8008df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008dfa:	4543      	cmp	r3, r8
 8008dfc:	db02      	blt.n	8008e04 <_printf_float+0x21c>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	07d8      	lsls	r0, r3, #31
 8008e02:	d50f      	bpl.n	8008e24 <_printf_float+0x23c>
 8008e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af45 	beq.w	8008c9e <_printf_float+0xb6>
 8008e14:	f04f 0900 	mov.w	r9, #0
 8008e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e1c:	f104 0a1a 	add.w	sl, r4, #26
 8008e20:	45c8      	cmp	r8, r9
 8008e22:	dc09      	bgt.n	8008e38 <_printf_float+0x250>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	079b      	lsls	r3, r3, #30
 8008e28:	f100 8103 	bmi.w	8009032 <_printf_float+0x44a>
 8008e2c:	68e0      	ldr	r0, [r4, #12]
 8008e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e30:	4298      	cmp	r0, r3
 8008e32:	bfb8      	it	lt
 8008e34:	4618      	movlt	r0, r3
 8008e36:	e734      	b.n	8008ca2 <_printf_float+0xba>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	47b8      	blx	r7
 8008e42:	3001      	adds	r0, #1
 8008e44:	f43f af2b 	beq.w	8008c9e <_printf_float+0xb6>
 8008e48:	f109 0901 	add.w	r9, r9, #1
 8008e4c:	e7e8      	b.n	8008e20 <_printf_float+0x238>
 8008e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc39      	bgt.n	8008ec8 <_printf_float+0x2e0>
 8008e54:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec4 <_printf_float+0x2dc>)
 8008e56:	2301      	movs	r3, #1
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f af1d 	beq.w	8008c9e <_printf_float+0xb6>
 8008e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e68:	ea59 0303 	orrs.w	r3, r9, r3
 8008e6c:	d102      	bne.n	8008e74 <_printf_float+0x28c>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07d9      	lsls	r1, r3, #31
 8008e72:	d5d7      	bpl.n	8008e24 <_printf_float+0x23c>
 8008e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af0d 	beq.w	8008c9e <_printf_float+0xb6>
 8008e84:	f04f 0a00 	mov.w	sl, #0
 8008e88:	f104 0b1a 	add.w	fp, r4, #26
 8008e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8e:	425b      	negs	r3, r3
 8008e90:	4553      	cmp	r3, sl
 8008e92:	dc01      	bgt.n	8008e98 <_printf_float+0x2b0>
 8008e94:	464b      	mov	r3, r9
 8008e96:	e793      	b.n	8008dc0 <_printf_float+0x1d8>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	465a      	mov	r2, fp
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f aefb 	beq.w	8008c9e <_printf_float+0xb6>
 8008ea8:	f10a 0a01 	add.w	sl, sl, #1
 8008eac:	e7ee      	b.n	8008e8c <_printf_float+0x2a4>
 8008eae:	bf00      	nop
 8008eb0:	7fefffff 	.word	0x7fefffff
 8008eb4:	0800d43c 	.word	0x0800d43c
 8008eb8:	0800d438 	.word	0x0800d438
 8008ebc:	0800d444 	.word	0x0800d444
 8008ec0:	0800d440 	.word	0x0800d440
 8008ec4:	0800d448 	.word	0x0800d448
 8008ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008eca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ece:	4553      	cmp	r3, sl
 8008ed0:	bfa8      	it	ge
 8008ed2:	4653      	movge	r3, sl
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	4699      	mov	r9, r3
 8008ed8:	dc36      	bgt.n	8008f48 <_printf_float+0x360>
 8008eda:	f04f 0b00 	mov.w	fp, #0
 8008ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ee2:	f104 021a 	add.w	r2, r4, #26
 8008ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ee8:	9306      	str	r3, [sp, #24]
 8008eea:	eba3 0309 	sub.w	r3, r3, r9
 8008eee:	455b      	cmp	r3, fp
 8008ef0:	dc31      	bgt.n	8008f56 <_printf_float+0x36e>
 8008ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef4:	459a      	cmp	sl, r3
 8008ef6:	dc3a      	bgt.n	8008f6e <_printf_float+0x386>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	07da      	lsls	r2, r3, #31
 8008efc:	d437      	bmi.n	8008f6e <_printf_float+0x386>
 8008efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f00:	ebaa 0903 	sub.w	r9, sl, r3
 8008f04:	9b06      	ldr	r3, [sp, #24]
 8008f06:	ebaa 0303 	sub.w	r3, sl, r3
 8008f0a:	4599      	cmp	r9, r3
 8008f0c:	bfa8      	it	ge
 8008f0e:	4699      	movge	r9, r3
 8008f10:	f1b9 0f00 	cmp.w	r9, #0
 8008f14:	dc33      	bgt.n	8008f7e <_printf_float+0x396>
 8008f16:	f04f 0800 	mov.w	r8, #0
 8008f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f1e:	f104 0b1a 	add.w	fp, r4, #26
 8008f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f24:	ebaa 0303 	sub.w	r3, sl, r3
 8008f28:	eba3 0309 	sub.w	r3, r3, r9
 8008f2c:	4543      	cmp	r3, r8
 8008f2e:	f77f af79 	ble.w	8008e24 <_printf_float+0x23c>
 8008f32:	2301      	movs	r3, #1
 8008f34:	465a      	mov	r2, fp
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f aeae 	beq.w	8008c9e <_printf_float+0xb6>
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	e7ec      	b.n	8008f22 <_printf_float+0x33a>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	d1c2      	bne.n	8008eda <_printf_float+0x2f2>
 8008f54:	e6a3      	b.n	8008c9e <_printf_float+0xb6>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	9206      	str	r2, [sp, #24]
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f ae9c 	beq.w	8008c9e <_printf_float+0xb6>
 8008f66:	9a06      	ldr	r2, [sp, #24]
 8008f68:	f10b 0b01 	add.w	fp, fp, #1
 8008f6c:	e7bb      	b.n	8008ee6 <_printf_float+0x2fe>
 8008f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d1c0      	bne.n	8008efe <_printf_float+0x316>
 8008f7c:	e68f      	b.n	8008c9e <_printf_float+0xb6>
 8008f7e:	9a06      	ldr	r2, [sp, #24]
 8008f80:	464b      	mov	r3, r9
 8008f82:	4442      	add	r2, r8
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d1c3      	bne.n	8008f16 <_printf_float+0x32e>
 8008f8e:	e686      	b.n	8008c9e <_printf_float+0xb6>
 8008f90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f94:	f1ba 0f01 	cmp.w	sl, #1
 8008f98:	dc01      	bgt.n	8008f9e <_printf_float+0x3b6>
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d536      	bpl.n	800900c <_printf_float+0x424>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f43f ae78 	beq.w	8008c9e <_printf_float+0xb6>
 8008fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f ae70 	beq.w	8008c9e <_printf_float+0xb6>
 8008fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fca:	f7f7 fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fce:	b9c0      	cbnz	r0, 8009002 <_printf_float+0x41a>
 8008fd0:	4653      	mov	r3, sl
 8008fd2:	f108 0201 	add.w	r2, r8, #1
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d10c      	bne.n	8008ffa <_printf_float+0x412>
 8008fe0:	e65d      	b.n	8008c9e <_printf_float+0xb6>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	465a      	mov	r2, fp
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f ae56 	beq.w	8008c9e <_printf_float+0xb6>
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	45d0      	cmp	r8, sl
 8008ff8:	dbf3      	blt.n	8008fe2 <_printf_float+0x3fa>
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009000:	e6df      	b.n	8008dc2 <_printf_float+0x1da>
 8009002:	f04f 0800 	mov.w	r8, #0
 8009006:	f104 0b1a 	add.w	fp, r4, #26
 800900a:	e7f4      	b.n	8008ff6 <_printf_float+0x40e>
 800900c:	2301      	movs	r3, #1
 800900e:	4642      	mov	r2, r8
 8009010:	e7e1      	b.n	8008fd6 <_printf_float+0x3ee>
 8009012:	2301      	movs	r3, #1
 8009014:	464a      	mov	r2, r9
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f ae3e 	beq.w	8008c9e <_printf_float+0xb6>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800902a:	1a5b      	subs	r3, r3, r1
 800902c:	4543      	cmp	r3, r8
 800902e:	dcf0      	bgt.n	8009012 <_printf_float+0x42a>
 8009030:	e6fc      	b.n	8008e2c <_printf_float+0x244>
 8009032:	f04f 0800 	mov.w	r8, #0
 8009036:	f104 0919 	add.w	r9, r4, #25
 800903a:	e7f4      	b.n	8009026 <_printf_float+0x43e>

0800903c <_printf_common>:
 800903c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	4616      	mov	r6, r2
 8009042:	4698      	mov	r8, r3
 8009044:	688a      	ldr	r2, [r1, #8]
 8009046:	690b      	ldr	r3, [r1, #16]
 8009048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800904c:	4293      	cmp	r3, r2
 800904e:	bfb8      	it	lt
 8009050:	4613      	movlt	r3, r2
 8009052:	6033      	str	r3, [r6, #0]
 8009054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009058:	4607      	mov	r7, r0
 800905a:	460c      	mov	r4, r1
 800905c:	b10a      	cbz	r2, 8009062 <_printf_common+0x26>
 800905e:	3301      	adds	r3, #1
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	0699      	lsls	r1, r3, #26
 8009066:	bf42      	ittt	mi
 8009068:	6833      	ldrmi	r3, [r6, #0]
 800906a:	3302      	addmi	r3, #2
 800906c:	6033      	strmi	r3, [r6, #0]
 800906e:	6825      	ldr	r5, [r4, #0]
 8009070:	f015 0506 	ands.w	r5, r5, #6
 8009074:	d106      	bne.n	8009084 <_printf_common+0x48>
 8009076:	f104 0a19 	add.w	sl, r4, #25
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	6832      	ldr	r2, [r6, #0]
 800907e:	1a9b      	subs	r3, r3, r2
 8009080:	42ab      	cmp	r3, r5
 8009082:	dc26      	bgt.n	80090d2 <_printf_common+0x96>
 8009084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	3b00      	subs	r3, #0
 800908c:	bf18      	it	ne
 800908e:	2301      	movne	r3, #1
 8009090:	0692      	lsls	r2, r2, #26
 8009092:	d42b      	bmi.n	80090ec <_printf_common+0xb0>
 8009094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009098:	4641      	mov	r1, r8
 800909a:	4638      	mov	r0, r7
 800909c:	47c8      	blx	r9
 800909e:	3001      	adds	r0, #1
 80090a0:	d01e      	beq.n	80090e0 <_printf_common+0xa4>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	6922      	ldr	r2, [r4, #16]
 80090a6:	f003 0306 	and.w	r3, r3, #6
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	bf02      	ittt	eq
 80090ae:	68e5      	ldreq	r5, [r4, #12]
 80090b0:	6833      	ldreq	r3, [r6, #0]
 80090b2:	1aed      	subeq	r5, r5, r3
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	bf0c      	ite	eq
 80090b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090bc:	2500      	movne	r5, #0
 80090be:	4293      	cmp	r3, r2
 80090c0:	bfc4      	itt	gt
 80090c2:	1a9b      	subgt	r3, r3, r2
 80090c4:	18ed      	addgt	r5, r5, r3
 80090c6:	2600      	movs	r6, #0
 80090c8:	341a      	adds	r4, #26
 80090ca:	42b5      	cmp	r5, r6
 80090cc:	d11a      	bne.n	8009104 <_printf_common+0xc8>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e008      	b.n	80090e4 <_printf_common+0xa8>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4652      	mov	r2, sl
 80090d6:	4641      	mov	r1, r8
 80090d8:	4638      	mov	r0, r7
 80090da:	47c8      	blx	r9
 80090dc:	3001      	adds	r0, #1
 80090de:	d103      	bne.n	80090e8 <_printf_common+0xac>
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	3501      	adds	r5, #1
 80090ea:	e7c6      	b.n	800907a <_printf_common+0x3e>
 80090ec:	18e1      	adds	r1, r4, r3
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	2030      	movs	r0, #48	@ 0x30
 80090f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090f6:	4422      	add	r2, r4
 80090f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009100:	3302      	adds	r3, #2
 8009102:	e7c7      	b.n	8009094 <_printf_common+0x58>
 8009104:	2301      	movs	r3, #1
 8009106:	4622      	mov	r2, r4
 8009108:	4641      	mov	r1, r8
 800910a:	4638      	mov	r0, r7
 800910c:	47c8      	blx	r9
 800910e:	3001      	adds	r0, #1
 8009110:	d0e6      	beq.n	80090e0 <_printf_common+0xa4>
 8009112:	3601      	adds	r6, #1
 8009114:	e7d9      	b.n	80090ca <_printf_common+0x8e>
	...

08009118 <_printf_i>:
 8009118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	7e0f      	ldrb	r7, [r1, #24]
 800911e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009120:	2f78      	cmp	r7, #120	@ 0x78
 8009122:	4691      	mov	r9, r2
 8009124:	4680      	mov	r8, r0
 8009126:	460c      	mov	r4, r1
 8009128:	469a      	mov	sl, r3
 800912a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800912e:	d807      	bhi.n	8009140 <_printf_i+0x28>
 8009130:	2f62      	cmp	r7, #98	@ 0x62
 8009132:	d80a      	bhi.n	800914a <_printf_i+0x32>
 8009134:	2f00      	cmp	r7, #0
 8009136:	f000 80d1 	beq.w	80092dc <_printf_i+0x1c4>
 800913a:	2f58      	cmp	r7, #88	@ 0x58
 800913c:	f000 80b8 	beq.w	80092b0 <_printf_i+0x198>
 8009140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009148:	e03a      	b.n	80091c0 <_printf_i+0xa8>
 800914a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800914e:	2b15      	cmp	r3, #21
 8009150:	d8f6      	bhi.n	8009140 <_printf_i+0x28>
 8009152:	a101      	add	r1, pc, #4	@ (adr r1, 8009158 <_printf_i+0x40>)
 8009154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009158:	080091b1 	.word	0x080091b1
 800915c:	080091c5 	.word	0x080091c5
 8009160:	08009141 	.word	0x08009141
 8009164:	08009141 	.word	0x08009141
 8009168:	08009141 	.word	0x08009141
 800916c:	08009141 	.word	0x08009141
 8009170:	080091c5 	.word	0x080091c5
 8009174:	08009141 	.word	0x08009141
 8009178:	08009141 	.word	0x08009141
 800917c:	08009141 	.word	0x08009141
 8009180:	08009141 	.word	0x08009141
 8009184:	080092c3 	.word	0x080092c3
 8009188:	080091ef 	.word	0x080091ef
 800918c:	0800927d 	.word	0x0800927d
 8009190:	08009141 	.word	0x08009141
 8009194:	08009141 	.word	0x08009141
 8009198:	080092e5 	.word	0x080092e5
 800919c:	08009141 	.word	0x08009141
 80091a0:	080091ef 	.word	0x080091ef
 80091a4:	08009141 	.word	0x08009141
 80091a8:	08009141 	.word	0x08009141
 80091ac:	08009285 	.word	0x08009285
 80091b0:	6833      	ldr	r3, [r6, #0]
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6032      	str	r2, [r6, #0]
 80091b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091c0:	2301      	movs	r3, #1
 80091c2:	e09c      	b.n	80092fe <_printf_i+0x1e6>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	6031      	str	r1, [r6, #0]
 80091cc:	0606      	lsls	r6, r0, #24
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0xbc>
 80091d0:	681d      	ldr	r5, [r3, #0]
 80091d2:	e003      	b.n	80091dc <_printf_i+0xc4>
 80091d4:	0645      	lsls	r5, r0, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0xb8>
 80091d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091dc:	2d00      	cmp	r5, #0
 80091de:	da03      	bge.n	80091e8 <_printf_i+0xd0>
 80091e0:	232d      	movs	r3, #45	@ 0x2d
 80091e2:	426d      	negs	r5, r5
 80091e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e8:	4858      	ldr	r0, [pc, #352]	@ (800934c <_printf_i+0x234>)
 80091ea:	230a      	movs	r3, #10
 80091ec:	e011      	b.n	8009212 <_printf_i+0xfa>
 80091ee:	6821      	ldr	r1, [r4, #0]
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	0608      	lsls	r0, r1, #24
 80091f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80091f8:	d402      	bmi.n	8009200 <_printf_i+0xe8>
 80091fa:	0649      	lsls	r1, r1, #25
 80091fc:	bf48      	it	mi
 80091fe:	b2ad      	uxthmi	r5, r5
 8009200:	2f6f      	cmp	r7, #111	@ 0x6f
 8009202:	4852      	ldr	r0, [pc, #328]	@ (800934c <_printf_i+0x234>)
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	bf14      	ite	ne
 8009208:	230a      	movne	r3, #10
 800920a:	2308      	moveq	r3, #8
 800920c:	2100      	movs	r1, #0
 800920e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009212:	6866      	ldr	r6, [r4, #4]
 8009214:	60a6      	str	r6, [r4, #8]
 8009216:	2e00      	cmp	r6, #0
 8009218:	db05      	blt.n	8009226 <_printf_i+0x10e>
 800921a:	6821      	ldr	r1, [r4, #0]
 800921c:	432e      	orrs	r6, r5
 800921e:	f021 0104 	bic.w	r1, r1, #4
 8009222:	6021      	str	r1, [r4, #0]
 8009224:	d04b      	beq.n	80092be <_printf_i+0x1a6>
 8009226:	4616      	mov	r6, r2
 8009228:	fbb5 f1f3 	udiv	r1, r5, r3
 800922c:	fb03 5711 	mls	r7, r3, r1, r5
 8009230:	5dc7      	ldrb	r7, [r0, r7]
 8009232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009236:	462f      	mov	r7, r5
 8009238:	42bb      	cmp	r3, r7
 800923a:	460d      	mov	r5, r1
 800923c:	d9f4      	bls.n	8009228 <_printf_i+0x110>
 800923e:	2b08      	cmp	r3, #8
 8009240:	d10b      	bne.n	800925a <_printf_i+0x142>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	07df      	lsls	r7, r3, #31
 8009246:	d508      	bpl.n	800925a <_printf_i+0x142>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	6861      	ldr	r1, [r4, #4]
 800924c:	4299      	cmp	r1, r3
 800924e:	bfde      	ittt	le
 8009250:	2330      	movle	r3, #48	@ 0x30
 8009252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800925a:	1b92      	subs	r2, r2, r6
 800925c:	6122      	str	r2, [r4, #16]
 800925e:	f8cd a000 	str.w	sl, [sp]
 8009262:	464b      	mov	r3, r9
 8009264:	aa03      	add	r2, sp, #12
 8009266:	4621      	mov	r1, r4
 8009268:	4640      	mov	r0, r8
 800926a:	f7ff fee7 	bl	800903c <_printf_common>
 800926e:	3001      	adds	r0, #1
 8009270:	d14a      	bne.n	8009308 <_printf_i+0x1f0>
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	b004      	add	sp, #16
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	f043 0320 	orr.w	r3, r3, #32
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	4832      	ldr	r0, [pc, #200]	@ (8009350 <_printf_i+0x238>)
 8009286:	2778      	movs	r7, #120	@ 0x78
 8009288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	6831      	ldr	r1, [r6, #0]
 8009290:	061f      	lsls	r7, r3, #24
 8009292:	f851 5b04 	ldr.w	r5, [r1], #4
 8009296:	d402      	bmi.n	800929e <_printf_i+0x186>
 8009298:	065f      	lsls	r7, r3, #25
 800929a:	bf48      	it	mi
 800929c:	b2ad      	uxthmi	r5, r5
 800929e:	6031      	str	r1, [r6, #0]
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	bf44      	itt	mi
 80092a4:	f043 0320 	orrmi.w	r3, r3, #32
 80092a8:	6023      	strmi	r3, [r4, #0]
 80092aa:	b11d      	cbz	r5, 80092b4 <_printf_i+0x19c>
 80092ac:	2310      	movs	r3, #16
 80092ae:	e7ad      	b.n	800920c <_printf_i+0xf4>
 80092b0:	4826      	ldr	r0, [pc, #152]	@ (800934c <_printf_i+0x234>)
 80092b2:	e7e9      	b.n	8009288 <_printf_i+0x170>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	f023 0320 	bic.w	r3, r3, #32
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	e7f6      	b.n	80092ac <_printf_i+0x194>
 80092be:	4616      	mov	r6, r2
 80092c0:	e7bd      	b.n	800923e <_printf_i+0x126>
 80092c2:	6833      	ldr	r3, [r6, #0]
 80092c4:	6825      	ldr	r5, [r4, #0]
 80092c6:	6961      	ldr	r1, [r4, #20]
 80092c8:	1d18      	adds	r0, r3, #4
 80092ca:	6030      	str	r0, [r6, #0]
 80092cc:	062e      	lsls	r6, r5, #24
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	d501      	bpl.n	80092d6 <_printf_i+0x1be>
 80092d2:	6019      	str	r1, [r3, #0]
 80092d4:	e002      	b.n	80092dc <_printf_i+0x1c4>
 80092d6:	0668      	lsls	r0, r5, #25
 80092d8:	d5fb      	bpl.n	80092d2 <_printf_i+0x1ba>
 80092da:	8019      	strh	r1, [r3, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	4616      	mov	r6, r2
 80092e2:	e7bc      	b.n	800925e <_printf_i+0x146>
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	6032      	str	r2, [r6, #0]
 80092ea:	681e      	ldr	r6, [r3, #0]
 80092ec:	6862      	ldr	r2, [r4, #4]
 80092ee:	2100      	movs	r1, #0
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7f6 ff75 	bl	80001e0 <memchr>
 80092f6:	b108      	cbz	r0, 80092fc <_printf_i+0x1e4>
 80092f8:	1b80      	subs	r0, r0, r6
 80092fa:	6060      	str	r0, [r4, #4]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2300      	movs	r3, #0
 8009302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009306:	e7aa      	b.n	800925e <_printf_i+0x146>
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	4632      	mov	r2, r6
 800930c:	4649      	mov	r1, r9
 800930e:	4640      	mov	r0, r8
 8009310:	47d0      	blx	sl
 8009312:	3001      	adds	r0, #1
 8009314:	d0ad      	beq.n	8009272 <_printf_i+0x15a>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	079b      	lsls	r3, r3, #30
 800931a:	d413      	bmi.n	8009344 <_printf_i+0x22c>
 800931c:	68e0      	ldr	r0, [r4, #12]
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	4298      	cmp	r0, r3
 8009322:	bfb8      	it	lt
 8009324:	4618      	movlt	r0, r3
 8009326:	e7a6      	b.n	8009276 <_printf_i+0x15e>
 8009328:	2301      	movs	r3, #1
 800932a:	4632      	mov	r2, r6
 800932c:	4649      	mov	r1, r9
 800932e:	4640      	mov	r0, r8
 8009330:	47d0      	blx	sl
 8009332:	3001      	adds	r0, #1
 8009334:	d09d      	beq.n	8009272 <_printf_i+0x15a>
 8009336:	3501      	adds	r5, #1
 8009338:	68e3      	ldr	r3, [r4, #12]
 800933a:	9903      	ldr	r1, [sp, #12]
 800933c:	1a5b      	subs	r3, r3, r1
 800933e:	42ab      	cmp	r3, r5
 8009340:	dcf2      	bgt.n	8009328 <_printf_i+0x210>
 8009342:	e7eb      	b.n	800931c <_printf_i+0x204>
 8009344:	2500      	movs	r5, #0
 8009346:	f104 0619 	add.w	r6, r4, #25
 800934a:	e7f5      	b.n	8009338 <_printf_i+0x220>
 800934c:	0800d44a 	.word	0x0800d44a
 8009350:	0800d45b 	.word	0x0800d45b

08009354 <_scanf_float>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	b087      	sub	sp, #28
 800935a:	4691      	mov	r9, r2
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	688b      	ldr	r3, [r1, #8]
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009366:	bf81      	itttt	hi
 8009368:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800936c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009370:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009374:	608b      	strhi	r3, [r1, #8]
 8009376:	680b      	ldr	r3, [r1, #0]
 8009378:	460a      	mov	r2, r1
 800937a:	f04f 0500 	mov.w	r5, #0
 800937e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009382:	f842 3b1c 	str.w	r3, [r2], #28
 8009386:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800938a:	4680      	mov	r8, r0
 800938c:	460c      	mov	r4, r1
 800938e:	bf98      	it	ls
 8009390:	f04f 0b00 	movls.w	fp, #0
 8009394:	9201      	str	r2, [sp, #4]
 8009396:	4616      	mov	r6, r2
 8009398:	46aa      	mov	sl, r5
 800939a:	462f      	mov	r7, r5
 800939c:	9502      	str	r5, [sp, #8]
 800939e:	68a2      	ldr	r2, [r4, #8]
 80093a0:	b15a      	cbz	r2, 80093ba <_scanf_float+0x66>
 80093a2:	f8d9 3000 	ldr.w	r3, [r9]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b4e      	cmp	r3, #78	@ 0x4e
 80093aa:	d863      	bhi.n	8009474 <_scanf_float+0x120>
 80093ac:	2b40      	cmp	r3, #64	@ 0x40
 80093ae:	d83b      	bhi.n	8009428 <_scanf_float+0xd4>
 80093b0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80093b4:	b2c8      	uxtb	r0, r1
 80093b6:	280e      	cmp	r0, #14
 80093b8:	d939      	bls.n	800942e <_scanf_float+0xda>
 80093ba:	b11f      	cbz	r7, 80093c4 <_scanf_float+0x70>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093c8:	f1ba 0f01 	cmp.w	sl, #1
 80093cc:	f200 8114 	bhi.w	80095f8 <_scanf_float+0x2a4>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	429e      	cmp	r6, r3
 80093d4:	f200 8105 	bhi.w	80095e2 <_scanf_float+0x28e>
 80093d8:	2001      	movs	r0, #1
 80093da:	b007      	add	sp, #28
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80093e4:	2a0d      	cmp	r2, #13
 80093e6:	d8e8      	bhi.n	80093ba <_scanf_float+0x66>
 80093e8:	a101      	add	r1, pc, #4	@ (adr r1, 80093f0 <_scanf_float+0x9c>)
 80093ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009539 	.word	0x08009539
 80093f4:	080093bb 	.word	0x080093bb
 80093f8:	080093bb 	.word	0x080093bb
 80093fc:	080093bb 	.word	0x080093bb
 8009400:	08009595 	.word	0x08009595
 8009404:	0800956f 	.word	0x0800956f
 8009408:	080093bb 	.word	0x080093bb
 800940c:	080093bb 	.word	0x080093bb
 8009410:	08009547 	.word	0x08009547
 8009414:	080093bb 	.word	0x080093bb
 8009418:	080093bb 	.word	0x080093bb
 800941c:	080093bb 	.word	0x080093bb
 8009420:	080093bb 	.word	0x080093bb
 8009424:	08009503 	.word	0x08009503
 8009428:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800942c:	e7da      	b.n	80093e4 <_scanf_float+0x90>
 800942e:	290e      	cmp	r1, #14
 8009430:	d8c3      	bhi.n	80093ba <_scanf_float+0x66>
 8009432:	a001      	add	r0, pc, #4	@ (adr r0, 8009438 <_scanf_float+0xe4>)
 8009434:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009438:	080094f3 	.word	0x080094f3
 800943c:	080093bb 	.word	0x080093bb
 8009440:	080094f3 	.word	0x080094f3
 8009444:	08009583 	.word	0x08009583
 8009448:	080093bb 	.word	0x080093bb
 800944c:	08009495 	.word	0x08009495
 8009450:	080094d9 	.word	0x080094d9
 8009454:	080094d9 	.word	0x080094d9
 8009458:	080094d9 	.word	0x080094d9
 800945c:	080094d9 	.word	0x080094d9
 8009460:	080094d9 	.word	0x080094d9
 8009464:	080094d9 	.word	0x080094d9
 8009468:	080094d9 	.word	0x080094d9
 800946c:	080094d9 	.word	0x080094d9
 8009470:	080094d9 	.word	0x080094d9
 8009474:	2b6e      	cmp	r3, #110	@ 0x6e
 8009476:	d809      	bhi.n	800948c <_scanf_float+0x138>
 8009478:	2b60      	cmp	r3, #96	@ 0x60
 800947a:	d8b1      	bhi.n	80093e0 <_scanf_float+0x8c>
 800947c:	2b54      	cmp	r3, #84	@ 0x54
 800947e:	d07b      	beq.n	8009578 <_scanf_float+0x224>
 8009480:	2b59      	cmp	r3, #89	@ 0x59
 8009482:	d19a      	bne.n	80093ba <_scanf_float+0x66>
 8009484:	2d07      	cmp	r5, #7
 8009486:	d198      	bne.n	80093ba <_scanf_float+0x66>
 8009488:	2508      	movs	r5, #8
 800948a:	e02f      	b.n	80094ec <_scanf_float+0x198>
 800948c:	2b74      	cmp	r3, #116	@ 0x74
 800948e:	d073      	beq.n	8009578 <_scanf_float+0x224>
 8009490:	2b79      	cmp	r3, #121	@ 0x79
 8009492:	e7f6      	b.n	8009482 <_scanf_float+0x12e>
 8009494:	6821      	ldr	r1, [r4, #0]
 8009496:	05c8      	lsls	r0, r1, #23
 8009498:	d51e      	bpl.n	80094d8 <_scanf_float+0x184>
 800949a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800949e:	6021      	str	r1, [r4, #0]
 80094a0:	3701      	adds	r7, #1
 80094a2:	f1bb 0f00 	cmp.w	fp, #0
 80094a6:	d003      	beq.n	80094b0 <_scanf_float+0x15c>
 80094a8:	3201      	adds	r2, #1
 80094aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094ae:	60a2      	str	r2, [r4, #8]
 80094b0:	68a3      	ldr	r3, [r4, #8]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	60a3      	str	r3, [r4, #8]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f8c9 3004 	str.w	r3, [r9, #4]
 80094c8:	f340 8082 	ble.w	80095d0 <_scanf_float+0x27c>
 80094cc:	f8d9 3000 	ldr.w	r3, [r9]
 80094d0:	3301      	adds	r3, #1
 80094d2:	f8c9 3000 	str.w	r3, [r9]
 80094d6:	e762      	b.n	800939e <_scanf_float+0x4a>
 80094d8:	eb1a 0105 	adds.w	r1, sl, r5
 80094dc:	f47f af6d 	bne.w	80093ba <_scanf_float+0x66>
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	460d      	mov	r5, r1
 80094ea:	468a      	mov	sl, r1
 80094ec:	f806 3b01 	strb.w	r3, [r6], #1
 80094f0:	e7de      	b.n	80094b0 <_scanf_float+0x15c>
 80094f2:	6822      	ldr	r2, [r4, #0]
 80094f4:	0610      	lsls	r0, r2, #24
 80094f6:	f57f af60 	bpl.w	80093ba <_scanf_float+0x66>
 80094fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094fe:	6022      	str	r2, [r4, #0]
 8009500:	e7f4      	b.n	80094ec <_scanf_float+0x198>
 8009502:	f1ba 0f00 	cmp.w	sl, #0
 8009506:	d10c      	bne.n	8009522 <_scanf_float+0x1ce>
 8009508:	b977      	cbnz	r7, 8009528 <_scanf_float+0x1d4>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009510:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009514:	d108      	bne.n	8009528 <_scanf_float+0x1d4>
 8009516:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	f04f 0a01 	mov.w	sl, #1
 8009520:	e7e4      	b.n	80094ec <_scanf_float+0x198>
 8009522:	f1ba 0f02 	cmp.w	sl, #2
 8009526:	d050      	beq.n	80095ca <_scanf_float+0x276>
 8009528:	2d01      	cmp	r5, #1
 800952a:	d002      	beq.n	8009532 <_scanf_float+0x1de>
 800952c:	2d04      	cmp	r5, #4
 800952e:	f47f af44 	bne.w	80093ba <_scanf_float+0x66>
 8009532:	3501      	adds	r5, #1
 8009534:	b2ed      	uxtb	r5, r5
 8009536:	e7d9      	b.n	80094ec <_scanf_float+0x198>
 8009538:	f1ba 0f01 	cmp.w	sl, #1
 800953c:	f47f af3d 	bne.w	80093ba <_scanf_float+0x66>
 8009540:	f04f 0a02 	mov.w	sl, #2
 8009544:	e7d2      	b.n	80094ec <_scanf_float+0x198>
 8009546:	b975      	cbnz	r5, 8009566 <_scanf_float+0x212>
 8009548:	2f00      	cmp	r7, #0
 800954a:	f47f af37 	bne.w	80093bc <_scanf_float+0x68>
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009554:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009558:	f040 8103 	bne.w	8009762 <_scanf_float+0x40e>
 800955c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009560:	6022      	str	r2, [r4, #0]
 8009562:	2501      	movs	r5, #1
 8009564:	e7c2      	b.n	80094ec <_scanf_float+0x198>
 8009566:	2d03      	cmp	r5, #3
 8009568:	d0e3      	beq.n	8009532 <_scanf_float+0x1de>
 800956a:	2d05      	cmp	r5, #5
 800956c:	e7df      	b.n	800952e <_scanf_float+0x1da>
 800956e:	2d02      	cmp	r5, #2
 8009570:	f47f af23 	bne.w	80093ba <_scanf_float+0x66>
 8009574:	2503      	movs	r5, #3
 8009576:	e7b9      	b.n	80094ec <_scanf_float+0x198>
 8009578:	2d06      	cmp	r5, #6
 800957a:	f47f af1e 	bne.w	80093ba <_scanf_float+0x66>
 800957e:	2507      	movs	r5, #7
 8009580:	e7b4      	b.n	80094ec <_scanf_float+0x198>
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	0591      	lsls	r1, r2, #22
 8009586:	f57f af18 	bpl.w	80093ba <_scanf_float+0x66>
 800958a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	9702      	str	r7, [sp, #8]
 8009592:	e7ab      	b.n	80094ec <_scanf_float+0x198>
 8009594:	6822      	ldr	r2, [r4, #0]
 8009596:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800959a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800959e:	d005      	beq.n	80095ac <_scanf_float+0x258>
 80095a0:	0550      	lsls	r0, r2, #21
 80095a2:	f57f af0a 	bpl.w	80093ba <_scanf_float+0x66>
 80095a6:	2f00      	cmp	r7, #0
 80095a8:	f000 80db 	beq.w	8009762 <_scanf_float+0x40e>
 80095ac:	0591      	lsls	r1, r2, #22
 80095ae:	bf58      	it	pl
 80095b0:	9902      	ldrpl	r1, [sp, #8]
 80095b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095b6:	bf58      	it	pl
 80095b8:	1a79      	subpl	r1, r7, r1
 80095ba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80095be:	bf58      	it	pl
 80095c0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095c4:	6022      	str	r2, [r4, #0]
 80095c6:	2700      	movs	r7, #0
 80095c8:	e790      	b.n	80094ec <_scanf_float+0x198>
 80095ca:	f04f 0a03 	mov.w	sl, #3
 80095ce:	e78d      	b.n	80094ec <_scanf_float+0x198>
 80095d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80095d4:	4649      	mov	r1, r9
 80095d6:	4640      	mov	r0, r8
 80095d8:	4798      	blx	r3
 80095da:	2800      	cmp	r0, #0
 80095dc:	f43f aedf 	beq.w	800939e <_scanf_float+0x4a>
 80095e0:	e6eb      	b.n	80093ba <_scanf_float+0x66>
 80095e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ea:	464a      	mov	r2, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	4798      	blx	r3
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	e6eb      	b.n	80093d0 <_scanf_float+0x7c>
 80095f8:	1e6b      	subs	r3, r5, #1
 80095fa:	2b06      	cmp	r3, #6
 80095fc:	d824      	bhi.n	8009648 <_scanf_float+0x2f4>
 80095fe:	2d02      	cmp	r5, #2
 8009600:	d836      	bhi.n	8009670 <_scanf_float+0x31c>
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	429e      	cmp	r6, r3
 8009606:	f67f aee7 	bls.w	80093d8 <_scanf_float+0x84>
 800960a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800960e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009612:	464a      	mov	r2, r9
 8009614:	4640      	mov	r0, r8
 8009616:	4798      	blx	r3
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	3b01      	subs	r3, #1
 800961c:	6123      	str	r3, [r4, #16]
 800961e:	e7f0      	b.n	8009602 <_scanf_float+0x2ae>
 8009620:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009624:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009628:	464a      	mov	r2, r9
 800962a:	4640      	mov	r0, r8
 800962c:	4798      	blx	r3
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	3b01      	subs	r3, #1
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009638:	fa5f fa8a 	uxtb.w	sl, sl
 800963c:	f1ba 0f02 	cmp.w	sl, #2
 8009640:	d1ee      	bne.n	8009620 <_scanf_float+0x2cc>
 8009642:	3d03      	subs	r5, #3
 8009644:	b2ed      	uxtb	r5, r5
 8009646:	1b76      	subs	r6, r6, r5
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	05da      	lsls	r2, r3, #23
 800964c:	d530      	bpl.n	80096b0 <_scanf_float+0x35c>
 800964e:	055b      	lsls	r3, r3, #21
 8009650:	d511      	bpl.n	8009676 <_scanf_float+0x322>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	429e      	cmp	r6, r3
 8009656:	f67f aebf 	bls.w	80093d8 <_scanf_float+0x84>
 800965a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800965e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009662:	464a      	mov	r2, r9
 8009664:	4640      	mov	r0, r8
 8009666:	4798      	blx	r3
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	3b01      	subs	r3, #1
 800966c:	6123      	str	r3, [r4, #16]
 800966e:	e7f0      	b.n	8009652 <_scanf_float+0x2fe>
 8009670:	46aa      	mov	sl, r5
 8009672:	46b3      	mov	fp, r6
 8009674:	e7de      	b.n	8009634 <_scanf_float+0x2e0>
 8009676:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	2965      	cmp	r1, #101	@ 0x65
 800967e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009682:	f106 35ff 	add.w	r5, r6, #4294967295
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	d00c      	beq.n	80096a4 <_scanf_float+0x350>
 800968a:	2945      	cmp	r1, #69	@ 0x45
 800968c:	d00a      	beq.n	80096a4 <_scanf_float+0x350>
 800968e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009692:	464a      	mov	r2, r9
 8009694:	4640      	mov	r0, r8
 8009696:	4798      	blx	r3
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800969e:	3b01      	subs	r3, #1
 80096a0:	1eb5      	subs	r5, r6, #2
 80096a2:	6123      	str	r3, [r4, #16]
 80096a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096a8:	464a      	mov	r2, r9
 80096aa:	4640      	mov	r0, r8
 80096ac:	4798      	blx	r3
 80096ae:	462e      	mov	r6, r5
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	f012 0210 	ands.w	r2, r2, #16
 80096b6:	d001      	beq.n	80096bc <_scanf_float+0x368>
 80096b8:	2000      	movs	r0, #0
 80096ba:	e68e      	b.n	80093da <_scanf_float+0x86>
 80096bc:	7032      	strb	r2, [r6, #0]
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80096c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c8:	d125      	bne.n	8009716 <_scanf_float+0x3c2>
 80096ca:	9b02      	ldr	r3, [sp, #8]
 80096cc:	429f      	cmp	r7, r3
 80096ce:	d00a      	beq.n	80096e6 <_scanf_float+0x392>
 80096d0:	1bda      	subs	r2, r3, r7
 80096d2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80096d6:	429e      	cmp	r6, r3
 80096d8:	bf28      	it	cs
 80096da:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80096de:	4922      	ldr	r1, [pc, #136]	@ (8009768 <_scanf_float+0x414>)
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f93d 	bl	8009960 <siprintf>
 80096e6:	9901      	ldr	r1, [sp, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	4640      	mov	r0, r8
 80096ec:	f002 fc94 	bl	800c018 <_strtod_r>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	6821      	ldr	r1, [r4, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f011 0f02 	tst.w	r1, #2
 80096fa:	ec57 6b10 	vmov	r6, r7, d0
 80096fe:	f103 0204 	add.w	r2, r3, #4
 8009702:	d015      	beq.n	8009730 <_scanf_float+0x3dc>
 8009704:	9903      	ldr	r1, [sp, #12]
 8009706:	600a      	str	r2, [r1, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	e9c3 6700 	strd	r6, r7, [r3]
 800970e:	68e3      	ldr	r3, [r4, #12]
 8009710:	3301      	adds	r3, #1
 8009712:	60e3      	str	r3, [r4, #12]
 8009714:	e7d0      	b.n	80096b8 <_scanf_float+0x364>
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0e4      	beq.n	80096e6 <_scanf_float+0x392>
 800971c:	9905      	ldr	r1, [sp, #20]
 800971e:	230a      	movs	r3, #10
 8009720:	3101      	adds	r1, #1
 8009722:	4640      	mov	r0, r8
 8009724:	f002 fcf8 	bl	800c118 <_strtol_r>
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	9e05      	ldr	r6, [sp, #20]
 800972c:	1ac2      	subs	r2, r0, r3
 800972e:	e7d0      	b.n	80096d2 <_scanf_float+0x37e>
 8009730:	f011 0f04 	tst.w	r1, #4
 8009734:	9903      	ldr	r1, [sp, #12]
 8009736:	600a      	str	r2, [r1, #0]
 8009738:	d1e6      	bne.n	8009708 <_scanf_float+0x3b4>
 800973a:	681d      	ldr	r5, [r3, #0]
 800973c:	4632      	mov	r2, r6
 800973e:	463b      	mov	r3, r7
 8009740:	4630      	mov	r0, r6
 8009742:	4639      	mov	r1, r7
 8009744:	f7f7 f9fa 	bl	8000b3c <__aeabi_dcmpun>
 8009748:	b128      	cbz	r0, 8009756 <_scanf_float+0x402>
 800974a:	4808      	ldr	r0, [pc, #32]	@ (800976c <_scanf_float+0x418>)
 800974c:	f000 fa5a 	bl	8009c04 <nanf>
 8009750:	ed85 0a00 	vstr	s0, [r5]
 8009754:	e7db      	b.n	800970e <_scanf_float+0x3ba>
 8009756:	4630      	mov	r0, r6
 8009758:	4639      	mov	r1, r7
 800975a:	f7f7 fa4d 	bl	8000bf8 <__aeabi_d2f>
 800975e:	6028      	str	r0, [r5, #0]
 8009760:	e7d5      	b.n	800970e <_scanf_float+0x3ba>
 8009762:	2700      	movs	r7, #0
 8009764:	e62e      	b.n	80093c4 <_scanf_float+0x70>
 8009766:	bf00      	nop
 8009768:	0800d46c 	.word	0x0800d46c
 800976c:	0800d5ad 	.word	0x0800d5ad

08009770 <std>:
 8009770:	2300      	movs	r3, #0
 8009772:	b510      	push	{r4, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	e9c0 3300 	strd	r3, r3, [r0]
 800977a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800977e:	6083      	str	r3, [r0, #8]
 8009780:	8181      	strh	r1, [r0, #12]
 8009782:	6643      	str	r3, [r0, #100]	@ 0x64
 8009784:	81c2      	strh	r2, [r0, #14]
 8009786:	6183      	str	r3, [r0, #24]
 8009788:	4619      	mov	r1, r3
 800978a:	2208      	movs	r2, #8
 800978c:	305c      	adds	r0, #92	@ 0x5c
 800978e:	f000 f94c 	bl	8009a2a <memset>
 8009792:	4b0d      	ldr	r3, [pc, #52]	@ (80097c8 <std+0x58>)
 8009794:	6263      	str	r3, [r4, #36]	@ 0x24
 8009796:	4b0d      	ldr	r3, [pc, #52]	@ (80097cc <std+0x5c>)
 8009798:	62a3      	str	r3, [r4, #40]	@ 0x28
 800979a:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <std+0x60>)
 800979c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800979e:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <std+0x64>)
 80097a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80097a2:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <std+0x68>)
 80097a4:	6224      	str	r4, [r4, #32]
 80097a6:	429c      	cmp	r4, r3
 80097a8:	d006      	beq.n	80097b8 <std+0x48>
 80097aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097ae:	4294      	cmp	r4, r2
 80097b0:	d002      	beq.n	80097b8 <std+0x48>
 80097b2:	33d0      	adds	r3, #208	@ 0xd0
 80097b4:	429c      	cmp	r4, r3
 80097b6:	d105      	bne.n	80097c4 <std+0x54>
 80097b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	f000 ba0e 	b.w	8009be0 <__retarget_lock_init_recursive>
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	bf00      	nop
 80097c8:	080099a5 	.word	0x080099a5
 80097cc:	080099c7 	.word	0x080099c7
 80097d0:	080099ff 	.word	0x080099ff
 80097d4:	08009a23 	.word	0x08009a23
 80097d8:	20004dc0 	.word	0x20004dc0

080097dc <stdio_exit_handler>:
 80097dc:	4a02      	ldr	r2, [pc, #8]	@ (80097e8 <stdio_exit_handler+0xc>)
 80097de:	4903      	ldr	r1, [pc, #12]	@ (80097ec <stdio_exit_handler+0x10>)
 80097e0:	4803      	ldr	r0, [pc, #12]	@ (80097f0 <stdio_exit_handler+0x14>)
 80097e2:	f000 b869 	b.w	80098b8 <_fwalk_sglue>
 80097e6:	bf00      	nop
 80097e8:	20000010 	.word	0x20000010
 80097ec:	0800c4d5 	.word	0x0800c4d5
 80097f0:	20000020 	.word	0x20000020

080097f4 <cleanup_stdio>:
 80097f4:	6841      	ldr	r1, [r0, #4]
 80097f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <cleanup_stdio+0x34>)
 80097f8:	4299      	cmp	r1, r3
 80097fa:	b510      	push	{r4, lr}
 80097fc:	4604      	mov	r4, r0
 80097fe:	d001      	beq.n	8009804 <cleanup_stdio+0x10>
 8009800:	f002 fe68 	bl	800c4d4 <_fflush_r>
 8009804:	68a1      	ldr	r1, [r4, #8]
 8009806:	4b09      	ldr	r3, [pc, #36]	@ (800982c <cleanup_stdio+0x38>)
 8009808:	4299      	cmp	r1, r3
 800980a:	d002      	beq.n	8009812 <cleanup_stdio+0x1e>
 800980c:	4620      	mov	r0, r4
 800980e:	f002 fe61 	bl	800c4d4 <_fflush_r>
 8009812:	68e1      	ldr	r1, [r4, #12]
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <cleanup_stdio+0x3c>)
 8009816:	4299      	cmp	r1, r3
 8009818:	d004      	beq.n	8009824 <cleanup_stdio+0x30>
 800981a:	4620      	mov	r0, r4
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f002 be58 	b.w	800c4d4 <_fflush_r>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	bf00      	nop
 8009828:	20004dc0 	.word	0x20004dc0
 800982c:	20004e28 	.word	0x20004e28
 8009830:	20004e90 	.word	0x20004e90

08009834 <global_stdio_init.part.0>:
 8009834:	b510      	push	{r4, lr}
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <global_stdio_init.part.0+0x30>)
 8009838:	4c0b      	ldr	r4, [pc, #44]	@ (8009868 <global_stdio_init.part.0+0x34>)
 800983a:	4a0c      	ldr	r2, [pc, #48]	@ (800986c <global_stdio_init.part.0+0x38>)
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	4620      	mov	r0, r4
 8009840:	2200      	movs	r2, #0
 8009842:	2104      	movs	r1, #4
 8009844:	f7ff ff94 	bl	8009770 <std>
 8009848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800984c:	2201      	movs	r2, #1
 800984e:	2109      	movs	r1, #9
 8009850:	f7ff ff8e 	bl	8009770 <std>
 8009854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009858:	2202      	movs	r2, #2
 800985a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985e:	2112      	movs	r1, #18
 8009860:	f7ff bf86 	b.w	8009770 <std>
 8009864:	20004ef8 	.word	0x20004ef8
 8009868:	20004dc0 	.word	0x20004dc0
 800986c:	080097dd 	.word	0x080097dd

08009870 <__sfp_lock_acquire>:
 8009870:	4801      	ldr	r0, [pc, #4]	@ (8009878 <__sfp_lock_acquire+0x8>)
 8009872:	f000 b9b6 	b.w	8009be2 <__retarget_lock_acquire_recursive>
 8009876:	bf00      	nop
 8009878:	20004f01 	.word	0x20004f01

0800987c <__sfp_lock_release>:
 800987c:	4801      	ldr	r0, [pc, #4]	@ (8009884 <__sfp_lock_release+0x8>)
 800987e:	f000 b9b1 	b.w	8009be4 <__retarget_lock_release_recursive>
 8009882:	bf00      	nop
 8009884:	20004f01 	.word	0x20004f01

08009888 <__sinit>:
 8009888:	b510      	push	{r4, lr}
 800988a:	4604      	mov	r4, r0
 800988c:	f7ff fff0 	bl	8009870 <__sfp_lock_acquire>
 8009890:	6a23      	ldr	r3, [r4, #32]
 8009892:	b11b      	cbz	r3, 800989c <__sinit+0x14>
 8009894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009898:	f7ff bff0 	b.w	800987c <__sfp_lock_release>
 800989c:	4b04      	ldr	r3, [pc, #16]	@ (80098b0 <__sinit+0x28>)
 800989e:	6223      	str	r3, [r4, #32]
 80098a0:	4b04      	ldr	r3, [pc, #16]	@ (80098b4 <__sinit+0x2c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f5      	bne.n	8009894 <__sinit+0xc>
 80098a8:	f7ff ffc4 	bl	8009834 <global_stdio_init.part.0>
 80098ac:	e7f2      	b.n	8009894 <__sinit+0xc>
 80098ae:	bf00      	nop
 80098b0:	080097f5 	.word	0x080097f5
 80098b4:	20004ef8 	.word	0x20004ef8

080098b8 <_fwalk_sglue>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	4607      	mov	r7, r0
 80098be:	4688      	mov	r8, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	2600      	movs	r6, #0
 80098c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098c8:	f1b9 0901 	subs.w	r9, r9, #1
 80098cc:	d505      	bpl.n	80098da <_fwalk_sglue+0x22>
 80098ce:	6824      	ldr	r4, [r4, #0]
 80098d0:	2c00      	cmp	r4, #0
 80098d2:	d1f7      	bne.n	80098c4 <_fwalk_sglue+0xc>
 80098d4:	4630      	mov	r0, r6
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d907      	bls.n	80098f0 <_fwalk_sglue+0x38>
 80098e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098e4:	3301      	adds	r3, #1
 80098e6:	d003      	beq.n	80098f0 <_fwalk_sglue+0x38>
 80098e8:	4629      	mov	r1, r5
 80098ea:	4638      	mov	r0, r7
 80098ec:	47c0      	blx	r8
 80098ee:	4306      	orrs	r6, r0
 80098f0:	3568      	adds	r5, #104	@ 0x68
 80098f2:	e7e9      	b.n	80098c8 <_fwalk_sglue+0x10>

080098f4 <sniprintf>:
 80098f4:	b40c      	push	{r2, r3}
 80098f6:	b530      	push	{r4, r5, lr}
 80098f8:	4b18      	ldr	r3, [pc, #96]	@ (800995c <sniprintf+0x68>)
 80098fa:	1e0c      	subs	r4, r1, #0
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	b09d      	sub	sp, #116	@ 0x74
 8009900:	da08      	bge.n	8009914 <sniprintf+0x20>
 8009902:	238b      	movs	r3, #139	@ 0x8b
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	b01d      	add	sp, #116	@ 0x74
 800990c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009910:	b002      	add	sp, #8
 8009912:	4770      	bx	lr
 8009914:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009918:	f8ad 3014 	strh.w	r3, [sp, #20]
 800991c:	f04f 0300 	mov.w	r3, #0
 8009920:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009922:	bf14      	ite	ne
 8009924:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009928:	4623      	moveq	r3, r4
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	9307      	str	r3, [sp, #28]
 800992e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009932:	9002      	str	r0, [sp, #8]
 8009934:	9006      	str	r0, [sp, #24]
 8009936:	f8ad 3016 	strh.w	r3, [sp, #22]
 800993a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800993c:	ab21      	add	r3, sp, #132	@ 0x84
 800993e:	a902      	add	r1, sp, #8
 8009940:	4628      	mov	r0, r5
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f002 fc46 	bl	800c1d4 <_svfiprintf_r>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	bfbc      	itt	lt
 800994c:	238b      	movlt	r3, #139	@ 0x8b
 800994e:	602b      	strlt	r3, [r5, #0]
 8009950:	2c00      	cmp	r4, #0
 8009952:	d0da      	beq.n	800990a <sniprintf+0x16>
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	e7d6      	b.n	800990a <sniprintf+0x16>
 800995c:	2000001c 	.word	0x2000001c

08009960 <siprintf>:
 8009960:	b40e      	push	{r1, r2, r3}
 8009962:	b510      	push	{r4, lr}
 8009964:	b09d      	sub	sp, #116	@ 0x74
 8009966:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009968:	9002      	str	r0, [sp, #8]
 800996a:	9006      	str	r0, [sp, #24]
 800996c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009970:	480a      	ldr	r0, [pc, #40]	@ (800999c <siprintf+0x3c>)
 8009972:	9107      	str	r1, [sp, #28]
 8009974:	9104      	str	r1, [sp, #16]
 8009976:	490a      	ldr	r1, [pc, #40]	@ (80099a0 <siprintf+0x40>)
 8009978:	f853 2b04 	ldr.w	r2, [r3], #4
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	2400      	movs	r4, #0
 8009980:	a902      	add	r1, sp, #8
 8009982:	6800      	ldr	r0, [r0, #0]
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009988:	f002 fc24 	bl	800c1d4 <_svfiprintf_r>
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	701c      	strb	r4, [r3, #0]
 8009990:	b01d      	add	sp, #116	@ 0x74
 8009992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009996:	b003      	add	sp, #12
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	2000001c 	.word	0x2000001c
 80099a0:	ffff0208 	.word	0xffff0208

080099a4 <__sread>:
 80099a4:	b510      	push	{r4, lr}
 80099a6:	460c      	mov	r4, r1
 80099a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ac:	f000 f8ca 	bl	8009b44 <_read_r>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	bfab      	itete	ge
 80099b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099b6:	89a3      	ldrhlt	r3, [r4, #12]
 80099b8:	181b      	addge	r3, r3, r0
 80099ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099be:	bfac      	ite	ge
 80099c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099c2:	81a3      	strhlt	r3, [r4, #12]
 80099c4:	bd10      	pop	{r4, pc}

080099c6 <__swrite>:
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	461f      	mov	r7, r3
 80099cc:	898b      	ldrh	r3, [r1, #12]
 80099ce:	05db      	lsls	r3, r3, #23
 80099d0:	4605      	mov	r5, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	4616      	mov	r6, r2
 80099d6:	d505      	bpl.n	80099e4 <__swrite+0x1e>
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	2302      	movs	r3, #2
 80099de:	2200      	movs	r2, #0
 80099e0:	f000 f89e 	bl	8009b20 <_lseek_r>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	4632      	mov	r2, r6
 80099f2:	463b      	mov	r3, r7
 80099f4:	4628      	mov	r0, r5
 80099f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fa:	f000 b8b5 	b.w	8009b68 <_write_r>

080099fe <__sseek>:
 80099fe:	b510      	push	{r4, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a06:	f000 f88b 	bl	8009b20 <_lseek_r>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	bf15      	itete	ne
 8009a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a1a:	81a3      	strheq	r3, [r4, #12]
 8009a1c:	bf18      	it	ne
 8009a1e:	81a3      	strhne	r3, [r4, #12]
 8009a20:	bd10      	pop	{r4, pc}

08009a22 <__sclose>:
 8009a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a26:	f000 b80d 	b.w	8009a44 <_close_r>

08009a2a <memset>:
 8009a2a:	4402      	add	r2, r0
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d100      	bne.n	8009a34 <memset+0xa>
 8009a32:	4770      	bx	lr
 8009a34:	f803 1b01 	strb.w	r1, [r3], #1
 8009a38:	e7f9      	b.n	8009a2e <memset+0x4>
	...

08009a3c <_localeconv_r>:
 8009a3c:	4800      	ldr	r0, [pc, #0]	@ (8009a40 <_localeconv_r+0x4>)
 8009a3e:	4770      	bx	lr
 8009a40:	2000015c 	.word	0x2000015c

08009a44 <_close_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d06      	ldr	r5, [pc, #24]	@ (8009a60 <_close_r+0x1c>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f8 fb4c 	bl	80020ec <_close>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_close_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_close_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	20004efc 	.word	0x20004efc

08009a64 <_reclaim_reent>:
 8009a64:	4b2d      	ldr	r3, [pc, #180]	@ (8009b1c <_reclaim_reent+0xb8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4283      	cmp	r3, r0
 8009a6a:	b570      	push	{r4, r5, r6, lr}
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	d053      	beq.n	8009b18 <_reclaim_reent+0xb4>
 8009a70:	69c3      	ldr	r3, [r0, #28]
 8009a72:	b31b      	cbz	r3, 8009abc <_reclaim_reent+0x58>
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	b163      	cbz	r3, 8009a92 <_reclaim_reent+0x2e>
 8009a78:	2500      	movs	r5, #0
 8009a7a:	69e3      	ldr	r3, [r4, #28]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	5959      	ldr	r1, [r3, r5]
 8009a80:	b9b1      	cbnz	r1, 8009ab0 <_reclaim_reent+0x4c>
 8009a82:	3504      	adds	r5, #4
 8009a84:	2d80      	cmp	r5, #128	@ 0x80
 8009a86:	d1f8      	bne.n	8009a7a <_reclaim_reent+0x16>
 8009a88:	69e3      	ldr	r3, [r4, #28]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	68d9      	ldr	r1, [r3, #12]
 8009a8e:	f000 ff17 	bl	800a8c0 <_free_r>
 8009a92:	69e3      	ldr	r3, [r4, #28]
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	b111      	cbz	r1, 8009a9e <_reclaim_reent+0x3a>
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 ff11 	bl	800a8c0 <_free_r>
 8009a9e:	69e3      	ldr	r3, [r4, #28]
 8009aa0:	689d      	ldr	r5, [r3, #8]
 8009aa2:	b15d      	cbz	r5, 8009abc <_reclaim_reent+0x58>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	682d      	ldr	r5, [r5, #0]
 8009aaa:	f000 ff09 	bl	800a8c0 <_free_r>
 8009aae:	e7f8      	b.n	8009aa2 <_reclaim_reent+0x3e>
 8009ab0:	680e      	ldr	r6, [r1, #0]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 ff04 	bl	800a8c0 <_free_r>
 8009ab8:	4631      	mov	r1, r6
 8009aba:	e7e1      	b.n	8009a80 <_reclaim_reent+0x1c>
 8009abc:	6961      	ldr	r1, [r4, #20]
 8009abe:	b111      	cbz	r1, 8009ac6 <_reclaim_reent+0x62>
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fefd 	bl	800a8c0 <_free_r>
 8009ac6:	69e1      	ldr	r1, [r4, #28]
 8009ac8:	b111      	cbz	r1, 8009ad0 <_reclaim_reent+0x6c>
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fef8 	bl	800a8c0 <_free_r>
 8009ad0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ad2:	b111      	cbz	r1, 8009ada <_reclaim_reent+0x76>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 fef3 	bl	800a8c0 <_free_r>
 8009ada:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009adc:	b111      	cbz	r1, 8009ae4 <_reclaim_reent+0x80>
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 feee 	bl	800a8c0 <_free_r>
 8009ae4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009ae6:	b111      	cbz	r1, 8009aee <_reclaim_reent+0x8a>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fee9 	bl	800a8c0 <_free_r>
 8009aee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009af0:	b111      	cbz	r1, 8009af8 <_reclaim_reent+0x94>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 fee4 	bl	800a8c0 <_free_r>
 8009af8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009afa:	b111      	cbz	r1, 8009b02 <_reclaim_reent+0x9e>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 fedf 	bl	800a8c0 <_free_r>
 8009b02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b04:	b111      	cbz	r1, 8009b0c <_reclaim_reent+0xa8>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 feda 	bl	800a8c0 <_free_r>
 8009b0c:	6a23      	ldr	r3, [r4, #32]
 8009b0e:	b11b      	cbz	r3, 8009b18 <_reclaim_reent+0xb4>
 8009b10:	4620      	mov	r0, r4
 8009b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b16:	4718      	bx	r3
 8009b18:	bd70      	pop	{r4, r5, r6, pc}
 8009b1a:	bf00      	nop
 8009b1c:	2000001c 	.word	0x2000001c

08009b20 <_lseek_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	@ (8009b40 <_lseek_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7f8 fb03 	bl	800213a <_lseek>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_lseek_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_lseek_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20004efc 	.word	0x20004efc

08009b44 <_read_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	@ (8009b64 <_read_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f8 fa91 	bl	800207a <_read>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_read_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_read_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20004efc 	.word	0x20004efc

08009b68 <_write_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	@ (8009b88 <_write_r+0x20>)
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	4611      	mov	r1, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f7f8 fa9c 	bl	80020b4 <_write>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_write_r+0x1e>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_write_r+0x1e>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	20004efc 	.word	0x20004efc

08009b8c <__errno>:
 8009b8c:	4b01      	ldr	r3, [pc, #4]	@ (8009b94 <__errno+0x8>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	2000001c 	.word	0x2000001c

08009b98 <__libc_init_array>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8009bd0 <__libc_init_array+0x38>)
 8009b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8009bd4 <__libc_init_array+0x3c>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	d109      	bne.n	8009bbc <__libc_init_array+0x24>
 8009ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8009bd8 <__libc_init_array+0x40>)
 8009baa:	4c0c      	ldr	r4, [pc, #48]	@ (8009bdc <__libc_init_array+0x44>)
 8009bac:	f003 fb76 	bl	800d29c <_init>
 8009bb0:	1b64      	subs	r4, r4, r5
 8009bb2:	10a4      	asrs	r4, r4, #2
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	d105      	bne.n	8009bc6 <__libc_init_array+0x2e>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc0:	4798      	blx	r3
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__libc_init_array+0xc>
 8009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bca:	4798      	blx	r3
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7f2      	b.n	8009bb6 <__libc_init_array+0x1e>
 8009bd0:	0800d86c 	.word	0x0800d86c
 8009bd4:	0800d86c 	.word	0x0800d86c
 8009bd8:	0800d86c 	.word	0x0800d86c
 8009bdc:	0800d870 	.word	0x0800d870

08009be0 <__retarget_lock_init_recursive>:
 8009be0:	4770      	bx	lr

08009be2 <__retarget_lock_acquire_recursive>:
 8009be2:	4770      	bx	lr

08009be4 <__retarget_lock_release_recursive>:
 8009be4:	4770      	bx	lr

08009be6 <memcpy>:
 8009be6:	440a      	add	r2, r1
 8009be8:	4291      	cmp	r1, r2
 8009bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bee:	d100      	bne.n	8009bf2 <memcpy+0xc>
 8009bf0:	4770      	bx	lr
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bfc:	4291      	cmp	r1, r2
 8009bfe:	d1f9      	bne.n	8009bf4 <memcpy+0xe>
 8009c00:	bd10      	pop	{r4, pc}
	...

08009c04 <nanf>:
 8009c04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009c0c <nanf+0x8>
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	7fc00000 	.word	0x7fc00000

08009c10 <quorem>:
 8009c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	6903      	ldr	r3, [r0, #16]
 8009c16:	690c      	ldr	r4, [r1, #16]
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	db7e      	blt.n	8009d1c <quorem+0x10c>
 8009c1e:	3c01      	subs	r4, #1
 8009c20:	f101 0814 	add.w	r8, r1, #20
 8009c24:	00a3      	lsls	r3, r4, #2
 8009c26:	f100 0514 	add.w	r5, r0, #20
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c42:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c46:	d32e      	bcc.n	8009ca6 <quorem+0x96>
 8009c48:	f04f 0a00 	mov.w	sl, #0
 8009c4c:	46c4      	mov	ip, r8
 8009c4e:	46ae      	mov	lr, r5
 8009c50:	46d3      	mov	fp, sl
 8009c52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c56:	b298      	uxth	r0, r3
 8009c58:	fb06 a000 	mla	r0, r6, r0, sl
 8009c5c:	0c02      	lsrs	r2, r0, #16
 8009c5e:	0c1b      	lsrs	r3, r3, #16
 8009c60:	fb06 2303 	mla	r3, r6, r3, r2
 8009c64:	f8de 2000 	ldr.w	r2, [lr]
 8009c68:	b280      	uxth	r0, r0
 8009c6a:	b292      	uxth	r2, r2
 8009c6c:	1a12      	subs	r2, r2, r0
 8009c6e:	445a      	add	r2, fp
 8009c70:	f8de 0000 	ldr.w	r0, [lr]
 8009c74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c82:	b292      	uxth	r2, r2
 8009c84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c88:	45e1      	cmp	r9, ip
 8009c8a:	f84e 2b04 	str.w	r2, [lr], #4
 8009c8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c92:	d2de      	bcs.n	8009c52 <quorem+0x42>
 8009c94:	9b00      	ldr	r3, [sp, #0]
 8009c96:	58eb      	ldr	r3, [r5, r3]
 8009c98:	b92b      	cbnz	r3, 8009ca6 <quorem+0x96>
 8009c9a:	9b01      	ldr	r3, [sp, #4]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	d32f      	bcc.n	8009d04 <quorem+0xf4>
 8009ca4:	613c      	str	r4, [r7, #16]
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f001 f9c6 	bl	800b038 <__mcmp>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	db25      	blt.n	8009cfc <quorem+0xec>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cb8:	f8d1 c000 	ldr.w	ip, [r1]
 8009cbc:	fa1f fe82 	uxth.w	lr, r2
 8009cc0:	fa1f f38c 	uxth.w	r3, ip
 8009cc4:	eba3 030e 	sub.w	r3, r3, lr
 8009cc8:	4403      	add	r3, r0
 8009cca:	0c12      	lsrs	r2, r2, #16
 8009ccc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cda:	45c1      	cmp	r9, r8
 8009cdc:	f841 3b04 	str.w	r3, [r1], #4
 8009ce0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ce4:	d2e6      	bcs.n	8009cb4 <quorem+0xa4>
 8009ce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cee:	b922      	cbnz	r2, 8009cfa <quorem+0xea>
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	d30b      	bcc.n	8009d10 <quorem+0x100>
 8009cf8:	613c      	str	r4, [r7, #16]
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	b003      	add	sp, #12
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	3b04      	subs	r3, #4
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d1cb      	bne.n	8009ca4 <quorem+0x94>
 8009d0c:	3c01      	subs	r4, #1
 8009d0e:	e7c6      	b.n	8009c9e <quorem+0x8e>
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	3b04      	subs	r3, #4
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	d1ef      	bne.n	8009cf8 <quorem+0xe8>
 8009d18:	3c01      	subs	r4, #1
 8009d1a:	e7ea      	b.n	8009cf2 <quorem+0xe2>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e7ee      	b.n	8009cfe <quorem+0xee>

08009d20 <_dtoa_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	69c7      	ldr	r7, [r0, #28]
 8009d26:	b097      	sub	sp, #92	@ 0x5c
 8009d28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009d2c:	ec55 4b10 	vmov	r4, r5, d0
 8009d30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d32:	9107      	str	r1, [sp, #28]
 8009d34:	4681      	mov	r9, r0
 8009d36:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d38:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d3a:	b97f      	cbnz	r7, 8009d5c <_dtoa_r+0x3c>
 8009d3c:	2010      	movs	r0, #16
 8009d3e:	f000 fe09 	bl	800a954 <malloc>
 8009d42:	4602      	mov	r2, r0
 8009d44:	f8c9 001c 	str.w	r0, [r9, #28]
 8009d48:	b920      	cbnz	r0, 8009d54 <_dtoa_r+0x34>
 8009d4a:	4ba9      	ldr	r3, [pc, #676]	@ (8009ff0 <_dtoa_r+0x2d0>)
 8009d4c:	21ef      	movs	r1, #239	@ 0xef
 8009d4e:	48a9      	ldr	r0, [pc, #676]	@ (8009ff4 <_dtoa_r+0x2d4>)
 8009d50:	f002 fc2e 	bl	800c5b0 <__assert_func>
 8009d54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d58:	6007      	str	r7, [r0, #0]
 8009d5a:	60c7      	str	r7, [r0, #12]
 8009d5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	b159      	cbz	r1, 8009d7c <_dtoa_r+0x5c>
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	604a      	str	r2, [r1, #4]
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4093      	lsls	r3, r2
 8009d6c:	608b      	str	r3, [r1, #8]
 8009d6e:	4648      	mov	r0, r9
 8009d70:	f000 fee6 	bl	800ab40 <_Bfree>
 8009d74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	1e2b      	subs	r3, r5, #0
 8009d7e:	bfb9      	ittee	lt
 8009d80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d84:	9305      	strlt	r3, [sp, #20]
 8009d86:	2300      	movge	r3, #0
 8009d88:	6033      	strge	r3, [r6, #0]
 8009d8a:	9f05      	ldr	r7, [sp, #20]
 8009d8c:	4b9a      	ldr	r3, [pc, #616]	@ (8009ff8 <_dtoa_r+0x2d8>)
 8009d8e:	bfbc      	itt	lt
 8009d90:	2201      	movlt	r2, #1
 8009d92:	6032      	strlt	r2, [r6, #0]
 8009d94:	43bb      	bics	r3, r7
 8009d96:	d112      	bne.n	8009dbe <_dtoa_r+0x9e>
 8009d98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009da4:	4323      	orrs	r3, r4
 8009da6:	f000 855a 	beq.w	800a85e <_dtoa_r+0xb3e>
 8009daa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009dac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a00c <_dtoa_r+0x2ec>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 855c 	beq.w	800a86e <_dtoa_r+0xb4e>
 8009db6:	f10a 0303 	add.w	r3, sl, #3
 8009dba:	f000 bd56 	b.w	800a86a <_dtoa_r+0xb4a>
 8009dbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	ec51 0b17 	vmov	r0, r1, d7
 8009dc8:	2300      	movs	r3, #0
 8009dca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009dce:	f7f6 fe83 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	b158      	cbz	r0, 8009dee <_dtoa_r+0xce>
 8009dd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009dd8:	2301      	movs	r3, #1
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009dde:	b113      	cbz	r3, 8009de6 <_dtoa_r+0xc6>
 8009de0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009de2:	4b86      	ldr	r3, [pc, #536]	@ (8009ffc <_dtoa_r+0x2dc>)
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a010 <_dtoa_r+0x2f0>
 8009dea:	f000 bd40 	b.w	800a86e <_dtoa_r+0xb4e>
 8009dee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009df2:	aa14      	add	r2, sp, #80	@ 0x50
 8009df4:	a915      	add	r1, sp, #84	@ 0x54
 8009df6:	4648      	mov	r0, r9
 8009df8:	f001 fa3e 	bl	800b278 <__d2b>
 8009dfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e00:	9002      	str	r0, [sp, #8]
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	d078      	beq.n	8009ef8 <_dtoa_r+0x1d8>
 8009e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e20:	4619      	mov	r1, r3
 8009e22:	2200      	movs	r2, #0
 8009e24:	4b76      	ldr	r3, [pc, #472]	@ (800a000 <_dtoa_r+0x2e0>)
 8009e26:	f7f6 fa37 	bl	8000298 <__aeabi_dsub>
 8009e2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009fd8 <_dtoa_r+0x2b8>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fbea 	bl	8000608 <__aeabi_dmul>
 8009e34:	a36a      	add	r3, pc, #424	@ (adr r3, 8009fe0 <_dtoa_r+0x2c0>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fa2f 	bl	800029c <__adddf3>
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4630      	mov	r0, r6
 8009e42:	460d      	mov	r5, r1
 8009e44:	f7f6 fb76 	bl	8000534 <__aeabi_i2d>
 8009e48:	a367      	add	r3, pc, #412	@ (adr r3, 8009fe8 <_dtoa_r+0x2c8>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fbdb 	bl	8000608 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 fa1f 	bl	800029c <__adddf3>
 8009e5e:	4604      	mov	r4, r0
 8009e60:	460d      	mov	r5, r1
 8009e62:	f7f6 fe81 	bl	8000b68 <__aeabi_d2iz>
 8009e66:	2200      	movs	r2, #0
 8009e68:	4607      	mov	r7, r0
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	f7f6 fe3c 	bl	8000aec <__aeabi_dcmplt>
 8009e74:	b140      	cbz	r0, 8009e88 <_dtoa_r+0x168>
 8009e76:	4638      	mov	r0, r7
 8009e78:	f7f6 fb5c 	bl	8000534 <__aeabi_i2d>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f7f6 fe2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e84:	b900      	cbnz	r0, 8009e88 <_dtoa_r+0x168>
 8009e86:	3f01      	subs	r7, #1
 8009e88:	2f16      	cmp	r7, #22
 8009e8a:	d852      	bhi.n	8009f32 <_dtoa_r+0x212>
 8009e8c:	4b5d      	ldr	r3, [pc, #372]	@ (800a004 <_dtoa_r+0x2e4>)
 8009e8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e9a:	f7f6 fe27 	bl	8000aec <__aeabi_dcmplt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d049      	beq.n	8009f36 <_dtoa_r+0x216>
 8009ea2:	3f01      	subs	r7, #1
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ea8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009eaa:	1b9b      	subs	r3, r3, r6
 8009eac:	1e5a      	subs	r2, r3, #1
 8009eae:	bf45      	ittet	mi
 8009eb0:	f1c3 0301 	rsbmi	r3, r3, #1
 8009eb4:	9300      	strmi	r3, [sp, #0]
 8009eb6:	2300      	movpl	r3, #0
 8009eb8:	2300      	movmi	r3, #0
 8009eba:	9206      	str	r2, [sp, #24]
 8009ebc:	bf54      	ite	pl
 8009ebe:	9300      	strpl	r3, [sp, #0]
 8009ec0:	9306      	strmi	r3, [sp, #24]
 8009ec2:	2f00      	cmp	r7, #0
 8009ec4:	db39      	blt.n	8009f3a <_dtoa_r+0x21a>
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	970d      	str	r7, [sp, #52]	@ 0x34
 8009eca:	443b      	add	r3, r7
 8009ecc:	9306      	str	r3, [sp, #24]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9308      	str	r3, [sp, #32]
 8009ed2:	9b07      	ldr	r3, [sp, #28]
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d863      	bhi.n	8009fa0 <_dtoa_r+0x280>
 8009ed8:	2b05      	cmp	r3, #5
 8009eda:	bfc4      	itt	gt
 8009edc:	3b04      	subgt	r3, #4
 8009ede:	9307      	strgt	r3, [sp, #28]
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ee6:	bfcc      	ite	gt
 8009ee8:	2400      	movgt	r4, #0
 8009eea:	2401      	movle	r4, #1
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d863      	bhi.n	8009fb8 <_dtoa_r+0x298>
 8009ef0:	e8df f003 	tbb	[pc, r3]
 8009ef4:	2b375452 	.word	0x2b375452
 8009ef8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009efc:	441e      	add	r6, r3
 8009efe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	bfc1      	itttt	gt
 8009f06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f0a:	409f      	lslgt	r7, r3
 8009f0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f10:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f14:	bfd6      	itet	le
 8009f16:	f1c3 0320 	rsble	r3, r3, #32
 8009f1a:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f1e:	fa04 f003 	lslle.w	r0, r4, r3
 8009f22:	f7f6 faf7 	bl	8000514 <__aeabi_ui2d>
 8009f26:	2201      	movs	r2, #1
 8009f28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f2c:	3e01      	subs	r6, #1
 8009f2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f30:	e776      	b.n	8009e20 <_dtoa_r+0x100>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e7b7      	b.n	8009ea6 <_dtoa_r+0x186>
 8009f36:	9010      	str	r0, [sp, #64]	@ 0x40
 8009f38:	e7b6      	b.n	8009ea8 <_dtoa_r+0x188>
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	1bdb      	subs	r3, r3, r7
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	427b      	negs	r3, r7
 8009f42:	9308      	str	r3, [sp, #32]
 8009f44:	2300      	movs	r3, #0
 8009f46:	930d      	str	r3, [sp, #52]	@ 0x34
 8009f48:	e7c3      	b.n	8009ed2 <_dtoa_r+0x1b2>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f50:	eb07 0b03 	add.w	fp, r7, r3
 8009f54:	f10b 0301 	add.w	r3, fp, #1
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	bfb8      	it	lt
 8009f5e:	2301      	movlt	r3, #1
 8009f60:	e006      	b.n	8009f70 <_dtoa_r+0x250>
 8009f62:	2301      	movs	r3, #1
 8009f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dd28      	ble.n	8009fbe <_dtoa_r+0x29e>
 8009f6c:	469b      	mov	fp, r3
 8009f6e:	9303      	str	r3, [sp, #12]
 8009f70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009f74:	2100      	movs	r1, #0
 8009f76:	2204      	movs	r2, #4
 8009f78:	f102 0514 	add.w	r5, r2, #20
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	d926      	bls.n	8009fce <_dtoa_r+0x2ae>
 8009f80:	6041      	str	r1, [r0, #4]
 8009f82:	4648      	mov	r0, r9
 8009f84:	f000 fd9c 	bl	800aac0 <_Balloc>
 8009f88:	4682      	mov	sl, r0
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d142      	bne.n	800a014 <_dtoa_r+0x2f4>
 8009f8e:	4b1e      	ldr	r3, [pc, #120]	@ (800a008 <_dtoa_r+0x2e8>)
 8009f90:	4602      	mov	r2, r0
 8009f92:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f96:	e6da      	b.n	8009d4e <_dtoa_r+0x2e>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e7e3      	b.n	8009f64 <_dtoa_r+0x244>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e7d5      	b.n	8009f4c <_dtoa_r+0x22c>
 8009fa0:	2401      	movs	r4, #1
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9307      	str	r3, [sp, #28]
 8009fa6:	9409      	str	r4, [sp, #36]	@ 0x24
 8009fa8:	f04f 3bff 	mov.w	fp, #4294967295
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8cd b00c 	str.w	fp, [sp, #12]
 8009fb2:	2312      	movs	r3, #18
 8009fb4:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fb6:	e7db      	b.n	8009f70 <_dtoa_r+0x250>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fbc:	e7f4      	b.n	8009fa8 <_dtoa_r+0x288>
 8009fbe:	f04f 0b01 	mov.w	fp, #1
 8009fc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8009fc6:	465b      	mov	r3, fp
 8009fc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009fcc:	e7d0      	b.n	8009f70 <_dtoa_r+0x250>
 8009fce:	3101      	adds	r1, #1
 8009fd0:	0052      	lsls	r2, r2, #1
 8009fd2:	e7d1      	b.n	8009f78 <_dtoa_r+0x258>
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	636f4361 	.word	0x636f4361
 8009fdc:	3fd287a7 	.word	0x3fd287a7
 8009fe0:	8b60c8b3 	.word	0x8b60c8b3
 8009fe4:	3fc68a28 	.word	0x3fc68a28
 8009fe8:	509f79fb 	.word	0x509f79fb
 8009fec:	3fd34413 	.word	0x3fd34413
 8009ff0:	0800d47e 	.word	0x0800d47e
 8009ff4:	0800d495 	.word	0x0800d495
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	0800d449 	.word	0x0800d449
 800a000:	3ff80000 	.word	0x3ff80000
 800a004:	0800d648 	.word	0x0800d648
 800a008:	0800d4ed 	.word	0x0800d4ed
 800a00c:	0800d47a 	.word	0x0800d47a
 800a010:	0800d448 	.word	0x0800d448
 800a014:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a018:	6018      	str	r0, [r3, #0]
 800a01a:	9b03      	ldr	r3, [sp, #12]
 800a01c:	2b0e      	cmp	r3, #14
 800a01e:	f200 80a1 	bhi.w	800a164 <_dtoa_r+0x444>
 800a022:	2c00      	cmp	r4, #0
 800a024:	f000 809e 	beq.w	800a164 <_dtoa_r+0x444>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	dd33      	ble.n	800a094 <_dtoa_r+0x374>
 800a02c:	4b9c      	ldr	r3, [pc, #624]	@ (800a2a0 <_dtoa_r+0x580>)
 800a02e:	f007 020f 	and.w	r2, r7, #15
 800a032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a036:	ed93 7b00 	vldr	d7, [r3]
 800a03a:	05f8      	lsls	r0, r7, #23
 800a03c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a040:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a044:	d516      	bpl.n	800a074 <_dtoa_r+0x354>
 800a046:	4b97      	ldr	r3, [pc, #604]	@ (800a2a4 <_dtoa_r+0x584>)
 800a048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a050:	f7f6 fc04 	bl	800085c <__aeabi_ddiv>
 800a054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a058:	f004 040f 	and.w	r4, r4, #15
 800a05c:	2603      	movs	r6, #3
 800a05e:	4d91      	ldr	r5, [pc, #580]	@ (800a2a4 <_dtoa_r+0x584>)
 800a060:	b954      	cbnz	r4, 800a078 <_dtoa_r+0x358>
 800a062:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a06a:	f7f6 fbf7 	bl	800085c <__aeabi_ddiv>
 800a06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a072:	e028      	b.n	800a0c6 <_dtoa_r+0x3a6>
 800a074:	2602      	movs	r6, #2
 800a076:	e7f2      	b.n	800a05e <_dtoa_r+0x33e>
 800a078:	07e1      	lsls	r1, r4, #31
 800a07a:	d508      	bpl.n	800a08e <_dtoa_r+0x36e>
 800a07c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a084:	f7f6 fac0 	bl	8000608 <__aeabi_dmul>
 800a088:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a08c:	3601      	adds	r6, #1
 800a08e:	1064      	asrs	r4, r4, #1
 800a090:	3508      	adds	r5, #8
 800a092:	e7e5      	b.n	800a060 <_dtoa_r+0x340>
 800a094:	f000 80af 	beq.w	800a1f6 <_dtoa_r+0x4d6>
 800a098:	427c      	negs	r4, r7
 800a09a:	4b81      	ldr	r3, [pc, #516]	@ (800a2a0 <_dtoa_r+0x580>)
 800a09c:	4d81      	ldr	r5, [pc, #516]	@ (800a2a4 <_dtoa_r+0x584>)
 800a09e:	f004 020f 	and.w	r2, r4, #15
 800a0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0ae:	f7f6 faab 	bl	8000608 <__aeabi_dmul>
 800a0b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0b6:	1124      	asrs	r4, r4, #4
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2602      	movs	r6, #2
 800a0bc:	2c00      	cmp	r4, #0
 800a0be:	f040 808f 	bne.w	800a1e0 <_dtoa_r+0x4c0>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1d3      	bne.n	800a06e <_dtoa_r+0x34e>
 800a0c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8094 	beq.w	800a1fa <_dtoa_r+0x4da>
 800a0d2:	4b75      	ldr	r3, [pc, #468]	@ (800a2a8 <_dtoa_r+0x588>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fd07 	bl	8000aec <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f000 808b 	beq.w	800a1fa <_dtoa_r+0x4da>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 8087 	beq.w	800a1fa <_dtoa_r+0x4da>
 800a0ec:	f1bb 0f00 	cmp.w	fp, #0
 800a0f0:	dd34      	ble.n	800a15c <_dtoa_r+0x43c>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4b6d      	ldr	r3, [pc, #436]	@ (800a2ac <_dtoa_r+0x58c>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f7f6 fa85 	bl	8000608 <__aeabi_dmul>
 800a0fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a102:	f107 38ff 	add.w	r8, r7, #4294967295
 800a106:	3601      	adds	r6, #1
 800a108:	465c      	mov	r4, fp
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7f6 fa12 	bl	8000534 <__aeabi_i2d>
 800a110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a114:	f7f6 fa78 	bl	8000608 <__aeabi_dmul>
 800a118:	4b65      	ldr	r3, [pc, #404]	@ (800a2b0 <_dtoa_r+0x590>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f8be 	bl	800029c <__adddf3>
 800a120:	4605      	mov	r5, r0
 800a122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a126:	2c00      	cmp	r4, #0
 800a128:	d16a      	bne.n	800a200 <_dtoa_r+0x4e0>
 800a12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a12e:	4b61      	ldr	r3, [pc, #388]	@ (800a2b4 <_dtoa_r+0x594>)
 800a130:	2200      	movs	r2, #0
 800a132:	f7f6 f8b1 	bl	8000298 <__aeabi_dsub>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a13e:	462a      	mov	r2, r5
 800a140:	4633      	mov	r3, r6
 800a142:	f7f6 fcf1 	bl	8000b28 <__aeabi_dcmpgt>
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 8298 	bne.w	800a67c <_dtoa_r+0x95c>
 800a14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a150:	462a      	mov	r2, r5
 800a152:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a156:	f7f6 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800a15a:	bb38      	cbnz	r0, 800a1ac <_dtoa_r+0x48c>
 800a15c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a160:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a164:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a166:	2b00      	cmp	r3, #0
 800a168:	f2c0 8157 	blt.w	800a41a <_dtoa_r+0x6fa>
 800a16c:	2f0e      	cmp	r7, #14
 800a16e:	f300 8154 	bgt.w	800a41a <_dtoa_r+0x6fa>
 800a172:	4b4b      	ldr	r3, [pc, #300]	@ (800a2a0 <_dtoa_r+0x580>)
 800a174:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a178:	ed93 7b00 	vldr	d7, [r3]
 800a17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a17e:	2b00      	cmp	r3, #0
 800a180:	ed8d 7b00 	vstr	d7, [sp]
 800a184:	f280 80e5 	bge.w	800a352 <_dtoa_r+0x632>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f300 80e1 	bgt.w	800a352 <_dtoa_r+0x632>
 800a190:	d10c      	bne.n	800a1ac <_dtoa_r+0x48c>
 800a192:	4b48      	ldr	r3, [pc, #288]	@ (800a2b4 <_dtoa_r+0x594>)
 800a194:	2200      	movs	r2, #0
 800a196:	ec51 0b17 	vmov	r0, r1, d7
 800a19a:	f7f6 fa35 	bl	8000608 <__aeabi_dmul>
 800a19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a2:	f7f6 fcb7 	bl	8000b14 <__aeabi_dcmpge>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f000 8266 	beq.w	800a678 <_dtoa_r+0x958>
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	4625      	mov	r5, r4
 800a1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1b2:	4656      	mov	r6, sl
 800a1b4:	ea6f 0803 	mvn.w	r8, r3
 800a1b8:	2700      	movs	r7, #0
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4648      	mov	r0, r9
 800a1be:	f000 fcbf 	bl	800ab40 <_Bfree>
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	f000 80bd 	beq.w	800a342 <_dtoa_r+0x622>
 800a1c8:	b12f      	cbz	r7, 800a1d6 <_dtoa_r+0x4b6>
 800a1ca:	42af      	cmp	r7, r5
 800a1cc:	d003      	beq.n	800a1d6 <_dtoa_r+0x4b6>
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	4648      	mov	r0, r9
 800a1d2:	f000 fcb5 	bl	800ab40 <_Bfree>
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	4648      	mov	r0, r9
 800a1da:	f000 fcb1 	bl	800ab40 <_Bfree>
 800a1de:	e0b0      	b.n	800a342 <_dtoa_r+0x622>
 800a1e0:	07e2      	lsls	r2, r4, #31
 800a1e2:	d505      	bpl.n	800a1f0 <_dtoa_r+0x4d0>
 800a1e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1e8:	f7f6 fa0e 	bl	8000608 <__aeabi_dmul>
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	1064      	asrs	r4, r4, #1
 800a1f2:	3508      	adds	r5, #8
 800a1f4:	e762      	b.n	800a0bc <_dtoa_r+0x39c>
 800a1f6:	2602      	movs	r6, #2
 800a1f8:	e765      	b.n	800a0c6 <_dtoa_r+0x3a6>
 800a1fa:	9c03      	ldr	r4, [sp, #12]
 800a1fc:	46b8      	mov	r8, r7
 800a1fe:	e784      	b.n	800a10a <_dtoa_r+0x3ea>
 800a200:	4b27      	ldr	r3, [pc, #156]	@ (800a2a0 <_dtoa_r+0x580>)
 800a202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a204:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a20c:	4454      	add	r4, sl
 800a20e:	2900      	cmp	r1, #0
 800a210:	d054      	beq.n	800a2bc <_dtoa_r+0x59c>
 800a212:	4929      	ldr	r1, [pc, #164]	@ (800a2b8 <_dtoa_r+0x598>)
 800a214:	2000      	movs	r0, #0
 800a216:	f7f6 fb21 	bl	800085c <__aeabi_ddiv>
 800a21a:	4633      	mov	r3, r6
 800a21c:	462a      	mov	r2, r5
 800a21e:	f7f6 f83b 	bl	8000298 <__aeabi_dsub>
 800a222:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a226:	4656      	mov	r6, sl
 800a228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a22c:	f7f6 fc9c 	bl	8000b68 <__aeabi_d2iz>
 800a230:	4605      	mov	r5, r0
 800a232:	f7f6 f97f 	bl	8000534 <__aeabi_i2d>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a23e:	f7f6 f82b 	bl	8000298 <__aeabi_dsub>
 800a242:	3530      	adds	r5, #48	@ 0x30
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a24c:	f806 5b01 	strb.w	r5, [r6], #1
 800a250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a254:	f7f6 fc4a 	bl	8000aec <__aeabi_dcmplt>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d172      	bne.n	800a342 <_dtoa_r+0x622>
 800a25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a260:	4911      	ldr	r1, [pc, #68]	@ (800a2a8 <_dtoa_r+0x588>)
 800a262:	2000      	movs	r0, #0
 800a264:	f7f6 f818 	bl	8000298 <__aeabi_dsub>
 800a268:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a26c:	f7f6 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800a270:	2800      	cmp	r0, #0
 800a272:	f040 80b4 	bne.w	800a3de <_dtoa_r+0x6be>
 800a276:	42a6      	cmp	r6, r4
 800a278:	f43f af70 	beq.w	800a15c <_dtoa_r+0x43c>
 800a27c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a280:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ac <_dtoa_r+0x58c>)
 800a282:	2200      	movs	r2, #0
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	4b08      	ldr	r3, [pc, #32]	@ (800a2ac <_dtoa_r+0x58c>)
 800a28a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a28e:	2200      	movs	r2, #0
 800a290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a294:	f7f6 f9b8 	bl	8000608 <__aeabi_dmul>
 800a298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a29c:	e7c4      	b.n	800a228 <_dtoa_r+0x508>
 800a29e:	bf00      	nop
 800a2a0:	0800d648 	.word	0x0800d648
 800a2a4:	0800d620 	.word	0x0800d620
 800a2a8:	3ff00000 	.word	0x3ff00000
 800a2ac:	40240000 	.word	0x40240000
 800a2b0:	401c0000 	.word	0x401c0000
 800a2b4:	40140000 	.word	0x40140000
 800a2b8:	3fe00000 	.word	0x3fe00000
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f7f6 f9a2 	bl	8000608 <__aeabi_dmul>
 800a2c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a2ca:	4656      	mov	r6, sl
 800a2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2d0:	f7f6 fc4a 	bl	8000b68 <__aeabi_d2iz>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	f7f6 f92d 	bl	8000534 <__aeabi_i2d>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2e2:	f7f5 ffd9 	bl	8000298 <__aeabi_dsub>
 800a2e6:	3530      	adds	r5, #48	@ 0x30
 800a2e8:	f806 5b01 	strb.w	r5, [r6], #1
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	42a6      	cmp	r6, r4
 800a2f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2f6:	f04f 0200 	mov.w	r2, #0
 800a2fa:	d124      	bne.n	800a346 <_dtoa_r+0x626>
 800a2fc:	4baf      	ldr	r3, [pc, #700]	@ (800a5bc <_dtoa_r+0x89c>)
 800a2fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a302:	f7f5 ffcb 	bl	800029c <__adddf3>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a30e:	f7f6 fc0b 	bl	8000b28 <__aeabi_dcmpgt>
 800a312:	2800      	cmp	r0, #0
 800a314:	d163      	bne.n	800a3de <_dtoa_r+0x6be>
 800a316:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a31a:	49a8      	ldr	r1, [pc, #672]	@ (800a5bc <_dtoa_r+0x89c>)
 800a31c:	2000      	movs	r0, #0
 800a31e:	f7f5 ffbb 	bl	8000298 <__aeabi_dsub>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a32a:	f7f6 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f43f af14 	beq.w	800a15c <_dtoa_r+0x43c>
 800a334:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a336:	1e73      	subs	r3, r6, #1
 800a338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a33a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a33e:	2b30      	cmp	r3, #48	@ 0x30
 800a340:	d0f8      	beq.n	800a334 <_dtoa_r+0x614>
 800a342:	4647      	mov	r7, r8
 800a344:	e03b      	b.n	800a3be <_dtoa_r+0x69e>
 800a346:	4b9e      	ldr	r3, [pc, #632]	@ (800a5c0 <_dtoa_r+0x8a0>)
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a350:	e7bc      	b.n	800a2cc <_dtoa_r+0x5ac>
 800a352:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a356:	4656      	mov	r6, sl
 800a358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7f6 fa7c 	bl	800085c <__aeabi_ddiv>
 800a364:	f7f6 fc00 	bl	8000b68 <__aeabi_d2iz>
 800a368:	4680      	mov	r8, r0
 800a36a:	f7f6 f8e3 	bl	8000534 <__aeabi_i2d>
 800a36e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a372:	f7f6 f949 	bl	8000608 <__aeabi_dmul>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4620      	mov	r0, r4
 800a37c:	4629      	mov	r1, r5
 800a37e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a382:	f7f5 ff89 	bl	8000298 <__aeabi_dsub>
 800a386:	f806 4b01 	strb.w	r4, [r6], #1
 800a38a:	9d03      	ldr	r5, [sp, #12]
 800a38c:	eba6 040a 	sub.w	r4, r6, sl
 800a390:	42a5      	cmp	r5, r4
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	d133      	bne.n	800a400 <_dtoa_r+0x6e0>
 800a398:	f7f5 ff80 	bl	800029c <__adddf3>
 800a39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	f7f6 fbc0 	bl	8000b28 <__aeabi_dcmpgt>
 800a3a8:	b9c0      	cbnz	r0, 800a3dc <_dtoa_r+0x6bc>
 800a3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3b6:	b110      	cbz	r0, 800a3be <_dtoa_r+0x69e>
 800a3b8:	f018 0f01 	tst.w	r8, #1
 800a3bc:	d10e      	bne.n	800a3dc <_dtoa_r+0x6bc>
 800a3be:	9902      	ldr	r1, [sp, #8]
 800a3c0:	4648      	mov	r0, r9
 800a3c2:	f000 fbbd 	bl	800ab40 <_Bfree>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	7033      	strb	r3, [r6, #0]
 800a3ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3cc:	3701      	adds	r7, #1
 800a3ce:	601f      	str	r7, [r3, #0]
 800a3d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 824b 	beq.w	800a86e <_dtoa_r+0xb4e>
 800a3d8:	601e      	str	r6, [r3, #0]
 800a3da:	e248      	b.n	800a86e <_dtoa_r+0xb4e>
 800a3dc:	46b8      	mov	r8, r7
 800a3de:	4633      	mov	r3, r6
 800a3e0:	461e      	mov	r6, r3
 800a3e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3e6:	2a39      	cmp	r2, #57	@ 0x39
 800a3e8:	d106      	bne.n	800a3f8 <_dtoa_r+0x6d8>
 800a3ea:	459a      	cmp	sl, r3
 800a3ec:	d1f8      	bne.n	800a3e0 <_dtoa_r+0x6c0>
 800a3ee:	2230      	movs	r2, #48	@ 0x30
 800a3f0:	f108 0801 	add.w	r8, r8, #1
 800a3f4:	f88a 2000 	strb.w	r2, [sl]
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	3201      	adds	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	e7a0      	b.n	800a342 <_dtoa_r+0x622>
 800a400:	4b6f      	ldr	r3, [pc, #444]	@ (800a5c0 <_dtoa_r+0x8a0>)
 800a402:	2200      	movs	r2, #0
 800a404:	f7f6 f900 	bl	8000608 <__aeabi_dmul>
 800a408:	2200      	movs	r2, #0
 800a40a:	2300      	movs	r3, #0
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	f7f6 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 800a414:	2800      	cmp	r0, #0
 800a416:	d09f      	beq.n	800a358 <_dtoa_r+0x638>
 800a418:	e7d1      	b.n	800a3be <_dtoa_r+0x69e>
 800a41a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	f000 80ea 	beq.w	800a5f6 <_dtoa_r+0x8d6>
 800a422:	9a07      	ldr	r2, [sp, #28]
 800a424:	2a01      	cmp	r2, #1
 800a426:	f300 80cd 	bgt.w	800a5c4 <_dtoa_r+0x8a4>
 800a42a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	f000 80c1 	beq.w	800a5b4 <_dtoa_r+0x894>
 800a432:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a436:	9c08      	ldr	r4, [sp, #32]
 800a438:	9e00      	ldr	r6, [sp, #0]
 800a43a:	9a00      	ldr	r2, [sp, #0]
 800a43c:	441a      	add	r2, r3
 800a43e:	9200      	str	r2, [sp, #0]
 800a440:	9a06      	ldr	r2, [sp, #24]
 800a442:	2101      	movs	r1, #1
 800a444:	441a      	add	r2, r3
 800a446:	4648      	mov	r0, r9
 800a448:	9206      	str	r2, [sp, #24]
 800a44a:	f000 fc77 	bl	800ad3c <__i2b>
 800a44e:	4605      	mov	r5, r0
 800a450:	b166      	cbz	r6, 800a46c <_dtoa_r+0x74c>
 800a452:	9b06      	ldr	r3, [sp, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dd09      	ble.n	800a46c <_dtoa_r+0x74c>
 800a458:	42b3      	cmp	r3, r6
 800a45a:	9a00      	ldr	r2, [sp, #0]
 800a45c:	bfa8      	it	ge
 800a45e:	4633      	movge	r3, r6
 800a460:	1ad2      	subs	r2, r2, r3
 800a462:	9200      	str	r2, [sp, #0]
 800a464:	9a06      	ldr	r2, [sp, #24]
 800a466:	1af6      	subs	r6, r6, r3
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	9b08      	ldr	r3, [sp, #32]
 800a46e:	b30b      	cbz	r3, 800a4b4 <_dtoa_r+0x794>
 800a470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80c6 	beq.w	800a604 <_dtoa_r+0x8e4>
 800a478:	2c00      	cmp	r4, #0
 800a47a:	f000 80c0 	beq.w	800a5fe <_dtoa_r+0x8de>
 800a47e:	4629      	mov	r1, r5
 800a480:	4622      	mov	r2, r4
 800a482:	4648      	mov	r0, r9
 800a484:	f000 fd12 	bl	800aeac <__pow5mult>
 800a488:	9a02      	ldr	r2, [sp, #8]
 800a48a:	4601      	mov	r1, r0
 800a48c:	4605      	mov	r5, r0
 800a48e:	4648      	mov	r0, r9
 800a490:	f000 fc6a 	bl	800ad68 <__multiply>
 800a494:	9902      	ldr	r1, [sp, #8]
 800a496:	4680      	mov	r8, r0
 800a498:	4648      	mov	r0, r9
 800a49a:	f000 fb51 	bl	800ab40 <_Bfree>
 800a49e:	9b08      	ldr	r3, [sp, #32]
 800a4a0:	1b1b      	subs	r3, r3, r4
 800a4a2:	9308      	str	r3, [sp, #32]
 800a4a4:	f000 80b1 	beq.w	800a60a <_dtoa_r+0x8ea>
 800a4a8:	9a08      	ldr	r2, [sp, #32]
 800a4aa:	4641      	mov	r1, r8
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f000 fcfd 	bl	800aeac <__pow5mult>
 800a4b2:	9002      	str	r0, [sp, #8]
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4648      	mov	r0, r9
 800a4b8:	f000 fc40 	bl	800ad3c <__i2b>
 800a4bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4be:	4604      	mov	r4, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 81d8 	beq.w	800a876 <_dtoa_r+0xb56>
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4648      	mov	r0, r9
 800a4cc:	f000 fcee 	bl	800aeac <__pow5mult>
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	f300 809f 	bgt.w	800a618 <_dtoa_r+0x8f8>
 800a4da:	9b04      	ldr	r3, [sp, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 8097 	bne.w	800a610 <_dtoa_r+0x8f0>
 800a4e2:	9b05      	ldr	r3, [sp, #20]
 800a4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 8093 	bne.w	800a614 <_dtoa_r+0x8f4>
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4f4:	0d1b      	lsrs	r3, r3, #20
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	b133      	cbz	r3, 800a508 <_dtoa_r+0x7e8>
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	9b06      	ldr	r3, [sp, #24]
 800a502:	3301      	adds	r3, #1
 800a504:	9306      	str	r3, [sp, #24]
 800a506:	2301      	movs	r3, #1
 800a508:	9308      	str	r3, [sp, #32]
 800a50a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 81b8 	beq.w	800a882 <_dtoa_r+0xb62>
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a518:	6918      	ldr	r0, [r3, #16]
 800a51a:	f000 fbc3 	bl	800aca4 <__hi0bits>
 800a51e:	f1c0 0020 	rsb	r0, r0, #32
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	4418      	add	r0, r3
 800a526:	f010 001f 	ands.w	r0, r0, #31
 800a52a:	f000 8082 	beq.w	800a632 <_dtoa_r+0x912>
 800a52e:	f1c0 0320 	rsb	r3, r0, #32
 800a532:	2b04      	cmp	r3, #4
 800a534:	dd73      	ble.n	800a61e <_dtoa_r+0x8fe>
 800a536:	9b00      	ldr	r3, [sp, #0]
 800a538:	f1c0 001c 	rsb	r0, r0, #28
 800a53c:	4403      	add	r3, r0
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	9b06      	ldr	r3, [sp, #24]
 800a542:	4403      	add	r3, r0
 800a544:	4406      	add	r6, r0
 800a546:	9306      	str	r3, [sp, #24]
 800a548:	9b00      	ldr	r3, [sp, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dd05      	ble.n	800a55a <_dtoa_r+0x83a>
 800a54e:	9902      	ldr	r1, [sp, #8]
 800a550:	461a      	mov	r2, r3
 800a552:	4648      	mov	r0, r9
 800a554:	f000 fd04 	bl	800af60 <__lshift>
 800a558:	9002      	str	r0, [sp, #8]
 800a55a:	9b06      	ldr	r3, [sp, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	dd05      	ble.n	800a56c <_dtoa_r+0x84c>
 800a560:	4621      	mov	r1, r4
 800a562:	461a      	mov	r2, r3
 800a564:	4648      	mov	r0, r9
 800a566:	f000 fcfb 	bl	800af60 <__lshift>
 800a56a:	4604      	mov	r4, r0
 800a56c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d061      	beq.n	800a636 <_dtoa_r+0x916>
 800a572:	9802      	ldr	r0, [sp, #8]
 800a574:	4621      	mov	r1, r4
 800a576:	f000 fd5f 	bl	800b038 <__mcmp>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	da5b      	bge.n	800a636 <_dtoa_r+0x916>
 800a57e:	2300      	movs	r3, #0
 800a580:	9902      	ldr	r1, [sp, #8]
 800a582:	220a      	movs	r2, #10
 800a584:	4648      	mov	r0, r9
 800a586:	f000 fafd 	bl	800ab84 <__multadd>
 800a58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58c:	9002      	str	r0, [sp, #8]
 800a58e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8177 	beq.w	800a886 <_dtoa_r+0xb66>
 800a598:	4629      	mov	r1, r5
 800a59a:	2300      	movs	r3, #0
 800a59c:	220a      	movs	r2, #10
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f000 faf0 	bl	800ab84 <__multadd>
 800a5a4:	f1bb 0f00 	cmp.w	fp, #0
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	dc6f      	bgt.n	800a68c <_dtoa_r+0x96c>
 800a5ac:	9b07      	ldr	r3, [sp, #28]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	dc49      	bgt.n	800a646 <_dtoa_r+0x926>
 800a5b2:	e06b      	b.n	800a68c <_dtoa_r+0x96c>
 800a5b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5ba:	e73c      	b.n	800a436 <_dtoa_r+0x716>
 800a5bc:	3fe00000 	.word	0x3fe00000
 800a5c0:	40240000 	.word	0x40240000
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	1e5c      	subs	r4, r3, #1
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	db09      	blt.n	800a5e2 <_dtoa_r+0x8c2>
 800a5ce:	1b1c      	subs	r4, r3, r4
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f6bf af30 	bge.w	800a438 <_dtoa_r+0x718>
 800a5d8:	9b00      	ldr	r3, [sp, #0]
 800a5da:	9a03      	ldr	r2, [sp, #12]
 800a5dc:	1a9e      	subs	r6, r3, r2
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e72b      	b.n	800a43a <_dtoa_r+0x71a>
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5e6:	9408      	str	r4, [sp, #32]
 800a5e8:	1ae3      	subs	r3, r4, r3
 800a5ea:	441a      	add	r2, r3
 800a5ec:	9e00      	ldr	r6, [sp, #0]
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a5f2:	2400      	movs	r4, #0
 800a5f4:	e721      	b.n	800a43a <_dtoa_r+0x71a>
 800a5f6:	9c08      	ldr	r4, [sp, #32]
 800a5f8:	9e00      	ldr	r6, [sp, #0]
 800a5fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a5fc:	e728      	b.n	800a450 <_dtoa_r+0x730>
 800a5fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a602:	e751      	b.n	800a4a8 <_dtoa_r+0x788>
 800a604:	9a08      	ldr	r2, [sp, #32]
 800a606:	9902      	ldr	r1, [sp, #8]
 800a608:	e750      	b.n	800a4ac <_dtoa_r+0x78c>
 800a60a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a60e:	e751      	b.n	800a4b4 <_dtoa_r+0x794>
 800a610:	2300      	movs	r3, #0
 800a612:	e779      	b.n	800a508 <_dtoa_r+0x7e8>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	e777      	b.n	800a508 <_dtoa_r+0x7e8>
 800a618:	2300      	movs	r3, #0
 800a61a:	9308      	str	r3, [sp, #32]
 800a61c:	e779      	b.n	800a512 <_dtoa_r+0x7f2>
 800a61e:	d093      	beq.n	800a548 <_dtoa_r+0x828>
 800a620:	9a00      	ldr	r2, [sp, #0]
 800a622:	331c      	adds	r3, #28
 800a624:	441a      	add	r2, r3
 800a626:	9200      	str	r2, [sp, #0]
 800a628:	9a06      	ldr	r2, [sp, #24]
 800a62a:	441a      	add	r2, r3
 800a62c:	441e      	add	r6, r3
 800a62e:	9206      	str	r2, [sp, #24]
 800a630:	e78a      	b.n	800a548 <_dtoa_r+0x828>
 800a632:	4603      	mov	r3, r0
 800a634:	e7f4      	b.n	800a620 <_dtoa_r+0x900>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	46b8      	mov	r8, r7
 800a63c:	dc20      	bgt.n	800a680 <_dtoa_r+0x960>
 800a63e:	469b      	mov	fp, r3
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	2b02      	cmp	r3, #2
 800a644:	dd1e      	ble.n	800a684 <_dtoa_r+0x964>
 800a646:	f1bb 0f00 	cmp.w	fp, #0
 800a64a:	f47f adb1 	bne.w	800a1b0 <_dtoa_r+0x490>
 800a64e:	4621      	mov	r1, r4
 800a650:	465b      	mov	r3, fp
 800a652:	2205      	movs	r2, #5
 800a654:	4648      	mov	r0, r9
 800a656:	f000 fa95 	bl	800ab84 <__multadd>
 800a65a:	4601      	mov	r1, r0
 800a65c:	4604      	mov	r4, r0
 800a65e:	9802      	ldr	r0, [sp, #8]
 800a660:	f000 fcea 	bl	800b038 <__mcmp>
 800a664:	2800      	cmp	r0, #0
 800a666:	f77f ada3 	ble.w	800a1b0 <_dtoa_r+0x490>
 800a66a:	4656      	mov	r6, sl
 800a66c:	2331      	movs	r3, #49	@ 0x31
 800a66e:	f806 3b01 	strb.w	r3, [r6], #1
 800a672:	f108 0801 	add.w	r8, r8, #1
 800a676:	e59f      	b.n	800a1b8 <_dtoa_r+0x498>
 800a678:	9c03      	ldr	r4, [sp, #12]
 800a67a:	46b8      	mov	r8, r7
 800a67c:	4625      	mov	r5, r4
 800a67e:	e7f4      	b.n	800a66a <_dtoa_r+0x94a>
 800a680:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 8101 	beq.w	800a88e <_dtoa_r+0xb6e>
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	dd05      	ble.n	800a69c <_dtoa_r+0x97c>
 800a690:	4629      	mov	r1, r5
 800a692:	4632      	mov	r2, r6
 800a694:	4648      	mov	r0, r9
 800a696:	f000 fc63 	bl	800af60 <__lshift>
 800a69a:	4605      	mov	r5, r0
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d05c      	beq.n	800a75c <_dtoa_r+0xa3c>
 800a6a2:	6869      	ldr	r1, [r5, #4]
 800a6a4:	4648      	mov	r0, r9
 800a6a6:	f000 fa0b 	bl	800aac0 <_Balloc>
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	b928      	cbnz	r0, 800a6ba <_dtoa_r+0x99a>
 800a6ae:	4b82      	ldr	r3, [pc, #520]	@ (800a8b8 <_dtoa_r+0xb98>)
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6b6:	f7ff bb4a 	b.w	8009d4e <_dtoa_r+0x2e>
 800a6ba:	692a      	ldr	r2, [r5, #16]
 800a6bc:	3202      	adds	r2, #2
 800a6be:	0092      	lsls	r2, r2, #2
 800a6c0:	f105 010c 	add.w	r1, r5, #12
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	f7ff fa8e 	bl	8009be6 <memcpy>
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4648      	mov	r0, r9
 800a6d0:	f000 fc46 	bl	800af60 <__lshift>
 800a6d4:	f10a 0301 	add.w	r3, sl, #1
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	eb0a 030b 	add.w	r3, sl, fp
 800a6de:	9308      	str	r3, [sp, #32]
 800a6e0:	9b04      	ldr	r3, [sp, #16]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	462f      	mov	r7, r5
 800a6e8:	9306      	str	r3, [sp, #24]
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	9b00      	ldr	r3, [sp, #0]
 800a6ee:	9802      	ldr	r0, [sp, #8]
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a6f6:	f7ff fa8b 	bl	8009c10 <quorem>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	3330      	adds	r3, #48	@ 0x30
 800a6fe:	9003      	str	r0, [sp, #12]
 800a700:	4639      	mov	r1, r7
 800a702:	9802      	ldr	r0, [sp, #8]
 800a704:	9309      	str	r3, [sp, #36]	@ 0x24
 800a706:	f000 fc97 	bl	800b038 <__mcmp>
 800a70a:	462a      	mov	r2, r5
 800a70c:	9004      	str	r0, [sp, #16]
 800a70e:	4621      	mov	r1, r4
 800a710:	4648      	mov	r0, r9
 800a712:	f000 fcad 	bl	800b070 <__mdiff>
 800a716:	68c2      	ldr	r2, [r0, #12]
 800a718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71a:	4606      	mov	r6, r0
 800a71c:	bb02      	cbnz	r2, 800a760 <_dtoa_r+0xa40>
 800a71e:	4601      	mov	r1, r0
 800a720:	9802      	ldr	r0, [sp, #8]
 800a722:	f000 fc89 	bl	800b038 <__mcmp>
 800a726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a728:	4602      	mov	r2, r0
 800a72a:	4631      	mov	r1, r6
 800a72c:	4648      	mov	r0, r9
 800a72e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a730:	9309      	str	r3, [sp, #36]	@ 0x24
 800a732:	f000 fa05 	bl	800ab40 <_Bfree>
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a73a:	9e00      	ldr	r6, [sp, #0]
 800a73c:	ea42 0103 	orr.w	r1, r2, r3
 800a740:	9b06      	ldr	r3, [sp, #24]
 800a742:	4319      	orrs	r1, r3
 800a744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a746:	d10d      	bne.n	800a764 <_dtoa_r+0xa44>
 800a748:	2b39      	cmp	r3, #57	@ 0x39
 800a74a:	d027      	beq.n	800a79c <_dtoa_r+0xa7c>
 800a74c:	9a04      	ldr	r2, [sp, #16]
 800a74e:	2a00      	cmp	r2, #0
 800a750:	dd01      	ble.n	800a756 <_dtoa_r+0xa36>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	3331      	adds	r3, #49	@ 0x31
 800a756:	f88b 3000 	strb.w	r3, [fp]
 800a75a:	e52e      	b.n	800a1ba <_dtoa_r+0x49a>
 800a75c:	4628      	mov	r0, r5
 800a75e:	e7b9      	b.n	800a6d4 <_dtoa_r+0x9b4>
 800a760:	2201      	movs	r2, #1
 800a762:	e7e2      	b.n	800a72a <_dtoa_r+0xa0a>
 800a764:	9904      	ldr	r1, [sp, #16]
 800a766:	2900      	cmp	r1, #0
 800a768:	db04      	blt.n	800a774 <_dtoa_r+0xa54>
 800a76a:	9807      	ldr	r0, [sp, #28]
 800a76c:	4301      	orrs	r1, r0
 800a76e:	9806      	ldr	r0, [sp, #24]
 800a770:	4301      	orrs	r1, r0
 800a772:	d120      	bne.n	800a7b6 <_dtoa_r+0xa96>
 800a774:	2a00      	cmp	r2, #0
 800a776:	ddee      	ble.n	800a756 <_dtoa_r+0xa36>
 800a778:	9902      	ldr	r1, [sp, #8]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2201      	movs	r2, #1
 800a77e:	4648      	mov	r0, r9
 800a780:	f000 fbee 	bl	800af60 <__lshift>
 800a784:	4621      	mov	r1, r4
 800a786:	9002      	str	r0, [sp, #8]
 800a788:	f000 fc56 	bl	800b038 <__mcmp>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	9b00      	ldr	r3, [sp, #0]
 800a790:	dc02      	bgt.n	800a798 <_dtoa_r+0xa78>
 800a792:	d1e0      	bne.n	800a756 <_dtoa_r+0xa36>
 800a794:	07da      	lsls	r2, r3, #31
 800a796:	d5de      	bpl.n	800a756 <_dtoa_r+0xa36>
 800a798:	2b39      	cmp	r3, #57	@ 0x39
 800a79a:	d1da      	bne.n	800a752 <_dtoa_r+0xa32>
 800a79c:	2339      	movs	r3, #57	@ 0x39
 800a79e:	f88b 3000 	strb.w	r3, [fp]
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	461e      	mov	r6, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7ac:	2a39      	cmp	r2, #57	@ 0x39
 800a7ae:	d04e      	beq.n	800a84e <_dtoa_r+0xb2e>
 800a7b0:	3201      	adds	r2, #1
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	e501      	b.n	800a1ba <_dtoa_r+0x49a>
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	dd03      	ble.n	800a7c2 <_dtoa_r+0xaa2>
 800a7ba:	2b39      	cmp	r3, #57	@ 0x39
 800a7bc:	d0ee      	beq.n	800a79c <_dtoa_r+0xa7c>
 800a7be:	3301      	adds	r3, #1
 800a7c0:	e7c9      	b.n	800a756 <_dtoa_r+0xa36>
 800a7c2:	9a00      	ldr	r2, [sp, #0]
 800a7c4:	9908      	ldr	r1, [sp, #32]
 800a7c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7ca:	428a      	cmp	r2, r1
 800a7cc:	d028      	beq.n	800a820 <_dtoa_r+0xb00>
 800a7ce:	9902      	ldr	r1, [sp, #8]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	4648      	mov	r0, r9
 800a7d6:	f000 f9d5 	bl	800ab84 <__multadd>
 800a7da:	42af      	cmp	r7, r5
 800a7dc:	9002      	str	r0, [sp, #8]
 800a7de:	f04f 0300 	mov.w	r3, #0
 800a7e2:	f04f 020a 	mov.w	r2, #10
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4648      	mov	r0, r9
 800a7ea:	d107      	bne.n	800a7fc <_dtoa_r+0xadc>
 800a7ec:	f000 f9ca 	bl	800ab84 <__multadd>
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	9b00      	ldr	r3, [sp, #0]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	e777      	b.n	800a6ec <_dtoa_r+0x9cc>
 800a7fc:	f000 f9c2 	bl	800ab84 <__multadd>
 800a800:	4629      	mov	r1, r5
 800a802:	4607      	mov	r7, r0
 800a804:	2300      	movs	r3, #0
 800a806:	220a      	movs	r2, #10
 800a808:	4648      	mov	r0, r9
 800a80a:	f000 f9bb 	bl	800ab84 <__multadd>
 800a80e:	4605      	mov	r5, r0
 800a810:	e7f0      	b.n	800a7f4 <_dtoa_r+0xad4>
 800a812:	f1bb 0f00 	cmp.w	fp, #0
 800a816:	bfcc      	ite	gt
 800a818:	465e      	movgt	r6, fp
 800a81a:	2601      	movle	r6, #1
 800a81c:	4456      	add	r6, sl
 800a81e:	2700      	movs	r7, #0
 800a820:	9902      	ldr	r1, [sp, #8]
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	2201      	movs	r2, #1
 800a826:	4648      	mov	r0, r9
 800a828:	f000 fb9a 	bl	800af60 <__lshift>
 800a82c:	4621      	mov	r1, r4
 800a82e:	9002      	str	r0, [sp, #8]
 800a830:	f000 fc02 	bl	800b038 <__mcmp>
 800a834:	2800      	cmp	r0, #0
 800a836:	dcb4      	bgt.n	800a7a2 <_dtoa_r+0xa82>
 800a838:	d102      	bne.n	800a840 <_dtoa_r+0xb20>
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	07db      	lsls	r3, r3, #31
 800a83e:	d4b0      	bmi.n	800a7a2 <_dtoa_r+0xa82>
 800a840:	4633      	mov	r3, r6
 800a842:	461e      	mov	r6, r3
 800a844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a848:	2a30      	cmp	r2, #48	@ 0x30
 800a84a:	d0fa      	beq.n	800a842 <_dtoa_r+0xb22>
 800a84c:	e4b5      	b.n	800a1ba <_dtoa_r+0x49a>
 800a84e:	459a      	cmp	sl, r3
 800a850:	d1a8      	bne.n	800a7a4 <_dtoa_r+0xa84>
 800a852:	2331      	movs	r3, #49	@ 0x31
 800a854:	f108 0801 	add.w	r8, r8, #1
 800a858:	f88a 3000 	strb.w	r3, [sl]
 800a85c:	e4ad      	b.n	800a1ba <_dtoa_r+0x49a>
 800a85e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a860:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a8bc <_dtoa_r+0xb9c>
 800a864:	b11b      	cbz	r3, 800a86e <_dtoa_r+0xb4e>
 800a866:	f10a 0308 	add.w	r3, sl, #8
 800a86a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	4650      	mov	r0, sl
 800a870:	b017      	add	sp, #92	@ 0x5c
 800a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a876:	9b07      	ldr	r3, [sp, #28]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f77f ae2e 	ble.w	800a4da <_dtoa_r+0x7ba>
 800a87e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a880:	9308      	str	r3, [sp, #32]
 800a882:	2001      	movs	r0, #1
 800a884:	e64d      	b.n	800a522 <_dtoa_r+0x802>
 800a886:	f1bb 0f00 	cmp.w	fp, #0
 800a88a:	f77f aed9 	ble.w	800a640 <_dtoa_r+0x920>
 800a88e:	4656      	mov	r6, sl
 800a890:	9802      	ldr	r0, [sp, #8]
 800a892:	4621      	mov	r1, r4
 800a894:	f7ff f9bc 	bl	8009c10 <quorem>
 800a898:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a89c:	f806 3b01 	strb.w	r3, [r6], #1
 800a8a0:	eba6 020a 	sub.w	r2, r6, sl
 800a8a4:	4593      	cmp	fp, r2
 800a8a6:	ddb4      	ble.n	800a812 <_dtoa_r+0xaf2>
 800a8a8:	9902      	ldr	r1, [sp, #8]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f000 f968 	bl	800ab84 <__multadd>
 800a8b4:	9002      	str	r0, [sp, #8]
 800a8b6:	e7eb      	b.n	800a890 <_dtoa_r+0xb70>
 800a8b8:	0800d4ed 	.word	0x0800d4ed
 800a8bc:	0800d471 	.word	0x0800d471

0800a8c0 <_free_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	d041      	beq.n	800a94c <_free_r+0x8c>
 800a8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8cc:	1f0c      	subs	r4, r1, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfb8      	it	lt
 800a8d2:	18e4      	addlt	r4, r4, r3
 800a8d4:	f000 f8e8 	bl	800aaa8 <__malloc_lock>
 800a8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a950 <_free_r+0x90>)
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	b933      	cbnz	r3, 800a8ec <_free_r+0x2c>
 800a8de:	6063      	str	r3, [r4, #4]
 800a8e0:	6014      	str	r4, [r2, #0]
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e8:	f000 b8e4 	b.w	800aab4 <__malloc_unlock>
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d908      	bls.n	800a902 <_free_r+0x42>
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	1821      	adds	r1, r4, r0
 800a8f4:	428b      	cmp	r3, r1
 800a8f6:	bf01      	itttt	eq
 800a8f8:	6819      	ldreq	r1, [r3, #0]
 800a8fa:	685b      	ldreq	r3, [r3, #4]
 800a8fc:	1809      	addeq	r1, r1, r0
 800a8fe:	6021      	streq	r1, [r4, #0]
 800a900:	e7ed      	b.n	800a8de <_free_r+0x1e>
 800a902:	461a      	mov	r2, r3
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	b10b      	cbz	r3, 800a90c <_free_r+0x4c>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d9fa      	bls.n	800a902 <_free_r+0x42>
 800a90c:	6811      	ldr	r1, [r2, #0]
 800a90e:	1850      	adds	r0, r2, r1
 800a910:	42a0      	cmp	r0, r4
 800a912:	d10b      	bne.n	800a92c <_free_r+0x6c>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	4401      	add	r1, r0
 800a918:	1850      	adds	r0, r2, r1
 800a91a:	4283      	cmp	r3, r0
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	d1e0      	bne.n	800a8e2 <_free_r+0x22>
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	6053      	str	r3, [r2, #4]
 800a926:	4408      	add	r0, r1
 800a928:	6010      	str	r0, [r2, #0]
 800a92a:	e7da      	b.n	800a8e2 <_free_r+0x22>
 800a92c:	d902      	bls.n	800a934 <_free_r+0x74>
 800a92e:	230c      	movs	r3, #12
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	e7d6      	b.n	800a8e2 <_free_r+0x22>
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	1821      	adds	r1, r4, r0
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf04      	itt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	bf04      	itt	eq
 800a944:	1809      	addeq	r1, r1, r0
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	6054      	str	r4, [r2, #4]
 800a94a:	e7ca      	b.n	800a8e2 <_free_r+0x22>
 800a94c:	bd38      	pop	{r3, r4, r5, pc}
 800a94e:	bf00      	nop
 800a950:	20004f08 	.word	0x20004f08

0800a954 <malloc>:
 800a954:	4b02      	ldr	r3, [pc, #8]	@ (800a960 <malloc+0xc>)
 800a956:	4601      	mov	r1, r0
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f000 b825 	b.w	800a9a8 <_malloc_r>
 800a95e:	bf00      	nop
 800a960:	2000001c 	.word	0x2000001c

0800a964 <sbrk_aligned>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4e0f      	ldr	r6, [pc, #60]	@ (800a9a4 <sbrk_aligned+0x40>)
 800a968:	460c      	mov	r4, r1
 800a96a:	6831      	ldr	r1, [r6, #0]
 800a96c:	4605      	mov	r5, r0
 800a96e:	b911      	cbnz	r1, 800a976 <sbrk_aligned+0x12>
 800a970:	f001 fe04 	bl	800c57c <_sbrk_r>
 800a974:	6030      	str	r0, [r6, #0]
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f001 fdff 	bl	800c57c <_sbrk_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d103      	bne.n	800a98a <sbrk_aligned+0x26>
 800a982:	f04f 34ff 	mov.w	r4, #4294967295
 800a986:	4620      	mov	r0, r4
 800a988:	bd70      	pop	{r4, r5, r6, pc}
 800a98a:	1cc4      	adds	r4, r0, #3
 800a98c:	f024 0403 	bic.w	r4, r4, #3
 800a990:	42a0      	cmp	r0, r4
 800a992:	d0f8      	beq.n	800a986 <sbrk_aligned+0x22>
 800a994:	1a21      	subs	r1, r4, r0
 800a996:	4628      	mov	r0, r5
 800a998:	f001 fdf0 	bl	800c57c <_sbrk_r>
 800a99c:	3001      	adds	r0, #1
 800a99e:	d1f2      	bne.n	800a986 <sbrk_aligned+0x22>
 800a9a0:	e7ef      	b.n	800a982 <sbrk_aligned+0x1e>
 800a9a2:	bf00      	nop
 800a9a4:	20004f04 	.word	0x20004f04

0800a9a8 <_malloc_r>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	1ccd      	adds	r5, r1, #3
 800a9ae:	f025 0503 	bic.w	r5, r5, #3
 800a9b2:	3508      	adds	r5, #8
 800a9b4:	2d0c      	cmp	r5, #12
 800a9b6:	bf38      	it	cc
 800a9b8:	250c      	movcc	r5, #12
 800a9ba:	2d00      	cmp	r5, #0
 800a9bc:	4606      	mov	r6, r0
 800a9be:	db01      	blt.n	800a9c4 <_malloc_r+0x1c>
 800a9c0:	42a9      	cmp	r1, r5
 800a9c2:	d904      	bls.n	800a9ce <_malloc_r+0x26>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	6033      	str	r3, [r6, #0]
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aaa4 <_malloc_r+0xfc>
 800a9d2:	f000 f869 	bl	800aaa8 <__malloc_lock>
 800a9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9da:	461c      	mov	r4, r3
 800a9dc:	bb44      	cbnz	r4, 800aa30 <_malloc_r+0x88>
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7ff ffbf 	bl	800a964 <sbrk_aligned>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	d158      	bne.n	800aa9e <_malloc_r+0xf6>
 800a9ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f0:	4627      	mov	r7, r4
 800a9f2:	2f00      	cmp	r7, #0
 800a9f4:	d143      	bne.n	800aa7e <_malloc_r+0xd6>
 800a9f6:	2c00      	cmp	r4, #0
 800a9f8:	d04b      	beq.n	800aa92 <_malloc_r+0xea>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	4630      	mov	r0, r6
 800aa00:	eb04 0903 	add.w	r9, r4, r3
 800aa04:	f001 fdba 	bl	800c57c <_sbrk_r>
 800aa08:	4581      	cmp	r9, r0
 800aa0a:	d142      	bne.n	800aa92 <_malloc_r+0xea>
 800aa0c:	6821      	ldr	r1, [r4, #0]
 800aa0e:	1a6d      	subs	r5, r5, r1
 800aa10:	4629      	mov	r1, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff ffa6 	bl	800a964 <sbrk_aligned>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d03a      	beq.n	800aa92 <_malloc_r+0xea>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	442b      	add	r3, r5
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	f8d8 3000 	ldr.w	r3, [r8]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	bb62      	cbnz	r2, 800aa84 <_malloc_r+0xdc>
 800aa2a:	f8c8 7000 	str.w	r7, [r8]
 800aa2e:	e00f      	b.n	800aa50 <_malloc_r+0xa8>
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	1b52      	subs	r2, r2, r5
 800aa34:	d420      	bmi.n	800aa78 <_malloc_r+0xd0>
 800aa36:	2a0b      	cmp	r2, #11
 800aa38:	d917      	bls.n	800aa6a <_malloc_r+0xc2>
 800aa3a:	1961      	adds	r1, r4, r5
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	6025      	str	r5, [r4, #0]
 800aa40:	bf18      	it	ne
 800aa42:	6059      	strne	r1, [r3, #4]
 800aa44:	6863      	ldr	r3, [r4, #4]
 800aa46:	bf08      	it	eq
 800aa48:	f8c8 1000 	streq.w	r1, [r8]
 800aa4c:	5162      	str	r2, [r4, r5]
 800aa4e:	604b      	str	r3, [r1, #4]
 800aa50:	4630      	mov	r0, r6
 800aa52:	f000 f82f 	bl	800aab4 <__malloc_unlock>
 800aa56:	f104 000b 	add.w	r0, r4, #11
 800aa5a:	1d23      	adds	r3, r4, #4
 800aa5c:	f020 0007 	bic.w	r0, r0, #7
 800aa60:	1ac2      	subs	r2, r0, r3
 800aa62:	bf1c      	itt	ne
 800aa64:	1a1b      	subne	r3, r3, r0
 800aa66:	50a3      	strne	r3, [r4, r2]
 800aa68:	e7af      	b.n	800a9ca <_malloc_r+0x22>
 800aa6a:	6862      	ldr	r2, [r4, #4]
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	bf0c      	ite	eq
 800aa70:	f8c8 2000 	streq.w	r2, [r8]
 800aa74:	605a      	strne	r2, [r3, #4]
 800aa76:	e7eb      	b.n	800aa50 <_malloc_r+0xa8>
 800aa78:	4623      	mov	r3, r4
 800aa7a:	6864      	ldr	r4, [r4, #4]
 800aa7c:	e7ae      	b.n	800a9dc <_malloc_r+0x34>
 800aa7e:	463c      	mov	r4, r7
 800aa80:	687f      	ldr	r7, [r7, #4]
 800aa82:	e7b6      	b.n	800a9f2 <_malloc_r+0x4a>
 800aa84:	461a      	mov	r2, r3
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	42a3      	cmp	r3, r4
 800aa8a:	d1fb      	bne.n	800aa84 <_malloc_r+0xdc>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	6053      	str	r3, [r2, #4]
 800aa90:	e7de      	b.n	800aa50 <_malloc_r+0xa8>
 800aa92:	230c      	movs	r3, #12
 800aa94:	6033      	str	r3, [r6, #0]
 800aa96:	4630      	mov	r0, r6
 800aa98:	f000 f80c 	bl	800aab4 <__malloc_unlock>
 800aa9c:	e794      	b.n	800a9c8 <_malloc_r+0x20>
 800aa9e:	6005      	str	r5, [r0, #0]
 800aaa0:	e7d6      	b.n	800aa50 <_malloc_r+0xa8>
 800aaa2:	bf00      	nop
 800aaa4:	20004f08 	.word	0x20004f08

0800aaa8 <__malloc_lock>:
 800aaa8:	4801      	ldr	r0, [pc, #4]	@ (800aab0 <__malloc_lock+0x8>)
 800aaaa:	f7ff b89a 	b.w	8009be2 <__retarget_lock_acquire_recursive>
 800aaae:	bf00      	nop
 800aab0:	20004f00 	.word	0x20004f00

0800aab4 <__malloc_unlock>:
 800aab4:	4801      	ldr	r0, [pc, #4]	@ (800aabc <__malloc_unlock+0x8>)
 800aab6:	f7ff b895 	b.w	8009be4 <__retarget_lock_release_recursive>
 800aaba:	bf00      	nop
 800aabc:	20004f00 	.word	0x20004f00

0800aac0 <_Balloc>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	4604      	mov	r4, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	b976      	cbnz	r6, 800aae8 <_Balloc+0x28>
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7ff ff42 	bl	800a954 <malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	61e0      	str	r0, [r4, #28]
 800aad4:	b920      	cbnz	r0, 800aae0 <_Balloc+0x20>
 800aad6:	4b18      	ldr	r3, [pc, #96]	@ (800ab38 <_Balloc+0x78>)
 800aad8:	4818      	ldr	r0, [pc, #96]	@ (800ab3c <_Balloc+0x7c>)
 800aada:	216b      	movs	r1, #107	@ 0x6b
 800aadc:	f001 fd68 	bl	800c5b0 <__assert_func>
 800aae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae4:	6006      	str	r6, [r0, #0]
 800aae6:	60c6      	str	r6, [r0, #12]
 800aae8:	69e6      	ldr	r6, [r4, #28]
 800aaea:	68f3      	ldr	r3, [r6, #12]
 800aaec:	b183      	cbz	r3, 800ab10 <_Balloc+0x50>
 800aaee:	69e3      	ldr	r3, [r4, #28]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaf6:	b9b8      	cbnz	r0, 800ab28 <_Balloc+0x68>
 800aaf8:	2101      	movs	r1, #1
 800aafa:	fa01 f605 	lsl.w	r6, r1, r5
 800aafe:	1d72      	adds	r2, r6, #5
 800ab00:	0092      	lsls	r2, r2, #2
 800ab02:	4620      	mov	r0, r4
 800ab04:	f001 fd72 	bl	800c5ec <_calloc_r>
 800ab08:	b160      	cbz	r0, 800ab24 <_Balloc+0x64>
 800ab0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab0e:	e00e      	b.n	800ab2e <_Balloc+0x6e>
 800ab10:	2221      	movs	r2, #33	@ 0x21
 800ab12:	2104      	movs	r1, #4
 800ab14:	4620      	mov	r0, r4
 800ab16:	f001 fd69 	bl	800c5ec <_calloc_r>
 800ab1a:	69e3      	ldr	r3, [r4, #28]
 800ab1c:	60f0      	str	r0, [r6, #12]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e4      	bne.n	800aaee <_Balloc+0x2e>
 800ab24:	2000      	movs	r0, #0
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	6802      	ldr	r2, [r0, #0]
 800ab2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab34:	e7f7      	b.n	800ab26 <_Balloc+0x66>
 800ab36:	bf00      	nop
 800ab38:	0800d47e 	.word	0x0800d47e
 800ab3c:	0800d4fe 	.word	0x0800d4fe

0800ab40 <_Bfree>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	69c6      	ldr	r6, [r0, #28]
 800ab44:	4605      	mov	r5, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	b976      	cbnz	r6, 800ab68 <_Bfree+0x28>
 800ab4a:	2010      	movs	r0, #16
 800ab4c:	f7ff ff02 	bl	800a954 <malloc>
 800ab50:	4602      	mov	r2, r0
 800ab52:	61e8      	str	r0, [r5, #28]
 800ab54:	b920      	cbnz	r0, 800ab60 <_Bfree+0x20>
 800ab56:	4b09      	ldr	r3, [pc, #36]	@ (800ab7c <_Bfree+0x3c>)
 800ab58:	4809      	ldr	r0, [pc, #36]	@ (800ab80 <_Bfree+0x40>)
 800ab5a:	218f      	movs	r1, #143	@ 0x8f
 800ab5c:	f001 fd28 	bl	800c5b0 <__assert_func>
 800ab60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab64:	6006      	str	r6, [r0, #0]
 800ab66:	60c6      	str	r6, [r0, #12]
 800ab68:	b13c      	cbz	r4, 800ab7a <_Bfree+0x3a>
 800ab6a:	69eb      	ldr	r3, [r5, #28]
 800ab6c:	6862      	ldr	r2, [r4, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab74:	6021      	str	r1, [r4, #0]
 800ab76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	0800d47e 	.word	0x0800d47e
 800ab80:	0800d4fe 	.word	0x0800d4fe

0800ab84 <__multadd>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	690d      	ldr	r5, [r1, #16]
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	461e      	mov	r6, r3
 800ab90:	f101 0c14 	add.w	ip, r1, #20
 800ab94:	2000      	movs	r0, #0
 800ab96:	f8dc 3000 	ldr.w	r3, [ip]
 800ab9a:	b299      	uxth	r1, r3
 800ab9c:	fb02 6101 	mla	r1, r2, r1, r6
 800aba0:	0c1e      	lsrs	r6, r3, #16
 800aba2:	0c0b      	lsrs	r3, r1, #16
 800aba4:	fb02 3306 	mla	r3, r2, r6, r3
 800aba8:	b289      	uxth	r1, r1
 800abaa:	3001      	adds	r0, #1
 800abac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abb0:	4285      	cmp	r5, r0
 800abb2:	f84c 1b04 	str.w	r1, [ip], #4
 800abb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abba:	dcec      	bgt.n	800ab96 <__multadd+0x12>
 800abbc:	b30e      	cbz	r6, 800ac02 <__multadd+0x7e>
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc19      	bgt.n	800abf8 <__multadd+0x74>
 800abc4:	6861      	ldr	r1, [r4, #4]
 800abc6:	4638      	mov	r0, r7
 800abc8:	3101      	adds	r1, #1
 800abca:	f7ff ff79 	bl	800aac0 <_Balloc>
 800abce:	4680      	mov	r8, r0
 800abd0:	b928      	cbnz	r0, 800abde <__multadd+0x5a>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <__multadd+0x84>)
 800abd6:	480d      	ldr	r0, [pc, #52]	@ (800ac0c <__multadd+0x88>)
 800abd8:	21ba      	movs	r1, #186	@ 0xba
 800abda:	f001 fce9 	bl	800c5b0 <__assert_func>
 800abde:	6922      	ldr	r2, [r4, #16]
 800abe0:	3202      	adds	r2, #2
 800abe2:	f104 010c 	add.w	r1, r4, #12
 800abe6:	0092      	lsls	r2, r2, #2
 800abe8:	300c      	adds	r0, #12
 800abea:	f7fe fffc 	bl	8009be6 <memcpy>
 800abee:	4621      	mov	r1, r4
 800abf0:	4638      	mov	r0, r7
 800abf2:	f7ff ffa5 	bl	800ab40 <_Bfree>
 800abf6:	4644      	mov	r4, r8
 800abf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abfc:	3501      	adds	r5, #1
 800abfe:	615e      	str	r6, [r3, #20]
 800ac00:	6125      	str	r5, [r4, #16]
 800ac02:	4620      	mov	r0, r4
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	0800d4ed 	.word	0x0800d4ed
 800ac0c:	0800d4fe 	.word	0x0800d4fe

0800ac10 <__s2b>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	460c      	mov	r4, r1
 800ac16:	4615      	mov	r5, r2
 800ac18:	461f      	mov	r7, r3
 800ac1a:	2209      	movs	r2, #9
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	4606      	mov	r6, r0
 800ac20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac24:	2100      	movs	r1, #0
 800ac26:	2201      	movs	r2, #1
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	db09      	blt.n	800ac40 <__s2b+0x30>
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff ff47 	bl	800aac0 <_Balloc>
 800ac32:	b940      	cbnz	r0, 800ac46 <__s2b+0x36>
 800ac34:	4602      	mov	r2, r0
 800ac36:	4b19      	ldr	r3, [pc, #100]	@ (800ac9c <__s2b+0x8c>)
 800ac38:	4819      	ldr	r0, [pc, #100]	@ (800aca0 <__s2b+0x90>)
 800ac3a:	21d3      	movs	r1, #211	@ 0xd3
 800ac3c:	f001 fcb8 	bl	800c5b0 <__assert_func>
 800ac40:	0052      	lsls	r2, r2, #1
 800ac42:	3101      	adds	r1, #1
 800ac44:	e7f0      	b.n	800ac28 <__s2b+0x18>
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	6143      	str	r3, [r0, #20]
 800ac4a:	2d09      	cmp	r5, #9
 800ac4c:	f04f 0301 	mov.w	r3, #1
 800ac50:	6103      	str	r3, [r0, #16]
 800ac52:	dd16      	ble.n	800ac82 <__s2b+0x72>
 800ac54:	f104 0909 	add.w	r9, r4, #9
 800ac58:	46c8      	mov	r8, r9
 800ac5a:	442c      	add	r4, r5
 800ac5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac60:	4601      	mov	r1, r0
 800ac62:	3b30      	subs	r3, #48	@ 0x30
 800ac64:	220a      	movs	r2, #10
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ff8c 	bl	800ab84 <__multadd>
 800ac6c:	45a0      	cmp	r8, r4
 800ac6e:	d1f5      	bne.n	800ac5c <__s2b+0x4c>
 800ac70:	f1a5 0408 	sub.w	r4, r5, #8
 800ac74:	444c      	add	r4, r9
 800ac76:	1b2d      	subs	r5, r5, r4
 800ac78:	1963      	adds	r3, r4, r5
 800ac7a:	42bb      	cmp	r3, r7
 800ac7c:	db04      	blt.n	800ac88 <__s2b+0x78>
 800ac7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac82:	340a      	adds	r4, #10
 800ac84:	2509      	movs	r5, #9
 800ac86:	e7f6      	b.n	800ac76 <__s2b+0x66>
 800ac88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	3b30      	subs	r3, #48	@ 0x30
 800ac90:	220a      	movs	r2, #10
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff ff76 	bl	800ab84 <__multadd>
 800ac98:	e7ee      	b.n	800ac78 <__s2b+0x68>
 800ac9a:	bf00      	nop
 800ac9c:	0800d4ed 	.word	0x0800d4ed
 800aca0:	0800d4fe 	.word	0x0800d4fe

0800aca4 <__hi0bits>:
 800aca4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aca8:	4603      	mov	r3, r0
 800acaa:	bf36      	itet	cc
 800acac:	0403      	lslcc	r3, r0, #16
 800acae:	2000      	movcs	r0, #0
 800acb0:	2010      	movcc	r0, #16
 800acb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acb6:	bf3c      	itt	cc
 800acb8:	021b      	lslcc	r3, r3, #8
 800acba:	3008      	addcc	r0, #8
 800acbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acc0:	bf3c      	itt	cc
 800acc2:	011b      	lslcc	r3, r3, #4
 800acc4:	3004      	addcc	r0, #4
 800acc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acca:	bf3c      	itt	cc
 800accc:	009b      	lslcc	r3, r3, #2
 800acce:	3002      	addcc	r0, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	db05      	blt.n	800ace0 <__hi0bits+0x3c>
 800acd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acd8:	f100 0001 	add.w	r0, r0, #1
 800acdc:	bf08      	it	eq
 800acde:	2020      	moveq	r0, #32
 800ace0:	4770      	bx	lr

0800ace2 <__lo0bits>:
 800ace2:	6803      	ldr	r3, [r0, #0]
 800ace4:	4602      	mov	r2, r0
 800ace6:	f013 0007 	ands.w	r0, r3, #7
 800acea:	d00b      	beq.n	800ad04 <__lo0bits+0x22>
 800acec:	07d9      	lsls	r1, r3, #31
 800acee:	d421      	bmi.n	800ad34 <__lo0bits+0x52>
 800acf0:	0798      	lsls	r0, r3, #30
 800acf2:	bf49      	itett	mi
 800acf4:	085b      	lsrmi	r3, r3, #1
 800acf6:	089b      	lsrpl	r3, r3, #2
 800acf8:	2001      	movmi	r0, #1
 800acfa:	6013      	strmi	r3, [r2, #0]
 800acfc:	bf5c      	itt	pl
 800acfe:	6013      	strpl	r3, [r2, #0]
 800ad00:	2002      	movpl	r0, #2
 800ad02:	4770      	bx	lr
 800ad04:	b299      	uxth	r1, r3
 800ad06:	b909      	cbnz	r1, 800ad0c <__lo0bits+0x2a>
 800ad08:	0c1b      	lsrs	r3, r3, #16
 800ad0a:	2010      	movs	r0, #16
 800ad0c:	b2d9      	uxtb	r1, r3
 800ad0e:	b909      	cbnz	r1, 800ad14 <__lo0bits+0x32>
 800ad10:	3008      	adds	r0, #8
 800ad12:	0a1b      	lsrs	r3, r3, #8
 800ad14:	0719      	lsls	r1, r3, #28
 800ad16:	bf04      	itt	eq
 800ad18:	091b      	lsreq	r3, r3, #4
 800ad1a:	3004      	addeq	r0, #4
 800ad1c:	0799      	lsls	r1, r3, #30
 800ad1e:	bf04      	itt	eq
 800ad20:	089b      	lsreq	r3, r3, #2
 800ad22:	3002      	addeq	r0, #2
 800ad24:	07d9      	lsls	r1, r3, #31
 800ad26:	d403      	bmi.n	800ad30 <__lo0bits+0x4e>
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	f100 0001 	add.w	r0, r0, #1
 800ad2e:	d003      	beq.n	800ad38 <__lo0bits+0x56>
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	4770      	bx	lr
 800ad34:	2000      	movs	r0, #0
 800ad36:	4770      	bx	lr
 800ad38:	2020      	movs	r0, #32
 800ad3a:	4770      	bx	lr

0800ad3c <__i2b>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	460c      	mov	r4, r1
 800ad40:	2101      	movs	r1, #1
 800ad42:	f7ff febd 	bl	800aac0 <_Balloc>
 800ad46:	4602      	mov	r2, r0
 800ad48:	b928      	cbnz	r0, 800ad56 <__i2b+0x1a>
 800ad4a:	4b05      	ldr	r3, [pc, #20]	@ (800ad60 <__i2b+0x24>)
 800ad4c:	4805      	ldr	r0, [pc, #20]	@ (800ad64 <__i2b+0x28>)
 800ad4e:	f240 1145 	movw	r1, #325	@ 0x145
 800ad52:	f001 fc2d 	bl	800c5b0 <__assert_func>
 800ad56:	2301      	movs	r3, #1
 800ad58:	6144      	str	r4, [r0, #20]
 800ad5a:	6103      	str	r3, [r0, #16]
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800d4ed 	.word	0x0800d4ed
 800ad64:	0800d4fe 	.word	0x0800d4fe

0800ad68 <__multiply>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4617      	mov	r7, r2
 800ad6e:	690a      	ldr	r2, [r1, #16]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	bfa8      	it	ge
 800ad76:	463b      	movge	r3, r7
 800ad78:	4689      	mov	r9, r1
 800ad7a:	bfa4      	itt	ge
 800ad7c:	460f      	movge	r7, r1
 800ad7e:	4699      	movge	r9, r3
 800ad80:	693d      	ldr	r5, [r7, #16]
 800ad82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	eb05 060a 	add.w	r6, r5, sl
 800ad8e:	42b3      	cmp	r3, r6
 800ad90:	b085      	sub	sp, #20
 800ad92:	bfb8      	it	lt
 800ad94:	3101      	addlt	r1, #1
 800ad96:	f7ff fe93 	bl	800aac0 <_Balloc>
 800ad9a:	b930      	cbnz	r0, 800adaa <__multiply+0x42>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	4b41      	ldr	r3, [pc, #260]	@ (800aea4 <__multiply+0x13c>)
 800ada0:	4841      	ldr	r0, [pc, #260]	@ (800aea8 <__multiply+0x140>)
 800ada2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ada6:	f001 fc03 	bl	800c5b0 <__assert_func>
 800adaa:	f100 0414 	add.w	r4, r0, #20
 800adae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800adb2:	4623      	mov	r3, r4
 800adb4:	2200      	movs	r2, #0
 800adb6:	4573      	cmp	r3, lr
 800adb8:	d320      	bcc.n	800adfc <__multiply+0x94>
 800adba:	f107 0814 	add.w	r8, r7, #20
 800adbe:	f109 0114 	add.w	r1, r9, #20
 800adc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800adc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	1beb      	subs	r3, r5, r7
 800adce:	3b15      	subs	r3, #21
 800add0:	f023 0303 	bic.w	r3, r3, #3
 800add4:	3304      	adds	r3, #4
 800add6:	3715      	adds	r7, #21
 800add8:	42bd      	cmp	r5, r7
 800adda:	bf38      	it	cc
 800addc:	2304      	movcc	r3, #4
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	9103      	str	r1, [sp, #12]
 800ade4:	428b      	cmp	r3, r1
 800ade6:	d80c      	bhi.n	800ae02 <__multiply+0x9a>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	dd03      	ble.n	800adf4 <__multiply+0x8c>
 800adec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d055      	beq.n	800aea0 <__multiply+0x138>
 800adf4:	6106      	str	r6, [r0, #16]
 800adf6:	b005      	add	sp, #20
 800adf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfc:	f843 2b04 	str.w	r2, [r3], #4
 800ae00:	e7d9      	b.n	800adb6 <__multiply+0x4e>
 800ae02:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae06:	f1ba 0f00 	cmp.w	sl, #0
 800ae0a:	d01f      	beq.n	800ae4c <__multiply+0xe4>
 800ae0c:	46c4      	mov	ip, r8
 800ae0e:	46a1      	mov	r9, r4
 800ae10:	2700      	movs	r7, #0
 800ae12:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae16:	f8d9 3000 	ldr.w	r3, [r9]
 800ae1a:	fa1f fb82 	uxth.w	fp, r2
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae24:	443b      	add	r3, r7
 800ae26:	f8d9 7000 	ldr.w	r7, [r9]
 800ae2a:	0c12      	lsrs	r2, r2, #16
 800ae2c:	0c3f      	lsrs	r7, r7, #16
 800ae2e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ae32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae3c:	4565      	cmp	r5, ip
 800ae3e:	f849 3b04 	str.w	r3, [r9], #4
 800ae42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ae46:	d8e4      	bhi.n	800ae12 <__multiply+0xaa>
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	50e7      	str	r7, [r4, r3]
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae52:	3104      	adds	r1, #4
 800ae54:	f1b9 0f00 	cmp.w	r9, #0
 800ae58:	d020      	beq.n	800ae9c <__multiply+0x134>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	4647      	mov	r7, r8
 800ae5e:	46a4      	mov	ip, r4
 800ae60:	f04f 0a00 	mov.w	sl, #0
 800ae64:	f8b7 b000 	ldrh.w	fp, [r7]
 800ae68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ae6c:	fb09 220b 	mla	r2, r9, fp, r2
 800ae70:	4452      	add	r2, sl
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae78:	f84c 3b04 	str.w	r3, [ip], #4
 800ae7c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ae80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae84:	f8bc 3000 	ldrh.w	r3, [ip]
 800ae88:	fb09 330a 	mla	r3, r9, sl, r3
 800ae8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ae90:	42bd      	cmp	r5, r7
 800ae92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae96:	d8e5      	bhi.n	800ae64 <__multiply+0xfc>
 800ae98:	9a01      	ldr	r2, [sp, #4]
 800ae9a:	50a3      	str	r3, [r4, r2]
 800ae9c:	3404      	adds	r4, #4
 800ae9e:	e79f      	b.n	800ade0 <__multiply+0x78>
 800aea0:	3e01      	subs	r6, #1
 800aea2:	e7a1      	b.n	800ade8 <__multiply+0x80>
 800aea4:	0800d4ed 	.word	0x0800d4ed
 800aea8:	0800d4fe 	.word	0x0800d4fe

0800aeac <__pow5mult>:
 800aeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	f012 0203 	ands.w	r2, r2, #3
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	460e      	mov	r6, r1
 800aeba:	d007      	beq.n	800aecc <__pow5mult+0x20>
 800aebc:	4c25      	ldr	r4, [pc, #148]	@ (800af54 <__pow5mult+0xa8>)
 800aebe:	3a01      	subs	r2, #1
 800aec0:	2300      	movs	r3, #0
 800aec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aec6:	f7ff fe5d 	bl	800ab84 <__multadd>
 800aeca:	4606      	mov	r6, r0
 800aecc:	10ad      	asrs	r5, r5, #2
 800aece:	d03d      	beq.n	800af4c <__pow5mult+0xa0>
 800aed0:	69fc      	ldr	r4, [r7, #28]
 800aed2:	b97c      	cbnz	r4, 800aef4 <__pow5mult+0x48>
 800aed4:	2010      	movs	r0, #16
 800aed6:	f7ff fd3d 	bl	800a954 <malloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	61f8      	str	r0, [r7, #28]
 800aede:	b928      	cbnz	r0, 800aeec <__pow5mult+0x40>
 800aee0:	4b1d      	ldr	r3, [pc, #116]	@ (800af58 <__pow5mult+0xac>)
 800aee2:	481e      	ldr	r0, [pc, #120]	@ (800af5c <__pow5mult+0xb0>)
 800aee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aee8:	f001 fb62 	bl	800c5b0 <__assert_func>
 800aeec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aef0:	6004      	str	r4, [r0, #0]
 800aef2:	60c4      	str	r4, [r0, #12]
 800aef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aefc:	b94c      	cbnz	r4, 800af12 <__pow5mult+0x66>
 800aefe:	f240 2171 	movw	r1, #625	@ 0x271
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ff1a 	bl	800ad3c <__i2b>
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af0e:	4604      	mov	r4, r0
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	f04f 0900 	mov.w	r9, #0
 800af16:	07eb      	lsls	r3, r5, #31
 800af18:	d50a      	bpl.n	800af30 <__pow5mult+0x84>
 800af1a:	4631      	mov	r1, r6
 800af1c:	4622      	mov	r2, r4
 800af1e:	4638      	mov	r0, r7
 800af20:	f7ff ff22 	bl	800ad68 <__multiply>
 800af24:	4631      	mov	r1, r6
 800af26:	4680      	mov	r8, r0
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff fe09 	bl	800ab40 <_Bfree>
 800af2e:	4646      	mov	r6, r8
 800af30:	106d      	asrs	r5, r5, #1
 800af32:	d00b      	beq.n	800af4c <__pow5mult+0xa0>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	b938      	cbnz	r0, 800af48 <__pow5mult+0x9c>
 800af38:	4622      	mov	r2, r4
 800af3a:	4621      	mov	r1, r4
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7ff ff13 	bl	800ad68 <__multiply>
 800af42:	6020      	str	r0, [r4, #0]
 800af44:	f8c0 9000 	str.w	r9, [r0]
 800af48:	4604      	mov	r4, r0
 800af4a:	e7e4      	b.n	800af16 <__pow5mult+0x6a>
 800af4c:	4630      	mov	r0, r6
 800af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af52:	bf00      	nop
 800af54:	0800d610 	.word	0x0800d610
 800af58:	0800d47e 	.word	0x0800d47e
 800af5c:	0800d4fe 	.word	0x0800d4fe

0800af60 <__lshift>:
 800af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af64:	460c      	mov	r4, r1
 800af66:	6849      	ldr	r1, [r1, #4]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	4607      	mov	r7, r0
 800af72:	4691      	mov	r9, r2
 800af74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af78:	f108 0601 	add.w	r6, r8, #1
 800af7c:	42b3      	cmp	r3, r6
 800af7e:	db0b      	blt.n	800af98 <__lshift+0x38>
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff fd9d 	bl	800aac0 <_Balloc>
 800af86:	4605      	mov	r5, r0
 800af88:	b948      	cbnz	r0, 800af9e <__lshift+0x3e>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4b28      	ldr	r3, [pc, #160]	@ (800b030 <__lshift+0xd0>)
 800af8e:	4829      	ldr	r0, [pc, #164]	@ (800b034 <__lshift+0xd4>)
 800af90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af94:	f001 fb0c 	bl	800c5b0 <__assert_func>
 800af98:	3101      	adds	r1, #1
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	e7ee      	b.n	800af7c <__lshift+0x1c>
 800af9e:	2300      	movs	r3, #0
 800afa0:	f100 0114 	add.w	r1, r0, #20
 800afa4:	f100 0210 	add.w	r2, r0, #16
 800afa8:	4618      	mov	r0, r3
 800afaa:	4553      	cmp	r3, sl
 800afac:	db33      	blt.n	800b016 <__lshift+0xb6>
 800afae:	6920      	ldr	r0, [r4, #16]
 800afb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afb4:	f104 0314 	add.w	r3, r4, #20
 800afb8:	f019 091f 	ands.w	r9, r9, #31
 800afbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afc4:	d02b      	beq.n	800b01e <__lshift+0xbe>
 800afc6:	f1c9 0e20 	rsb	lr, r9, #32
 800afca:	468a      	mov	sl, r1
 800afcc:	2200      	movs	r2, #0
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	fa00 f009 	lsl.w	r0, r0, r9
 800afd4:	4310      	orrs	r0, r2
 800afd6:	f84a 0b04 	str.w	r0, [sl], #4
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	459c      	cmp	ip, r3
 800afe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800afe4:	d8f3      	bhi.n	800afce <__lshift+0x6e>
 800afe6:	ebac 0304 	sub.w	r3, ip, r4
 800afea:	3b15      	subs	r3, #21
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	3304      	adds	r3, #4
 800aff2:	f104 0015 	add.w	r0, r4, #21
 800aff6:	4560      	cmp	r0, ip
 800aff8:	bf88      	it	hi
 800affa:	2304      	movhi	r3, #4
 800affc:	50ca      	str	r2, [r1, r3]
 800affe:	b10a      	cbz	r2, 800b004 <__lshift+0xa4>
 800b000:	f108 0602 	add.w	r6, r8, #2
 800b004:	3e01      	subs	r6, #1
 800b006:	4638      	mov	r0, r7
 800b008:	612e      	str	r6, [r5, #16]
 800b00a:	4621      	mov	r1, r4
 800b00c:	f7ff fd98 	bl	800ab40 <_Bfree>
 800b010:	4628      	mov	r0, r5
 800b012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b016:	f842 0f04 	str.w	r0, [r2, #4]!
 800b01a:	3301      	adds	r3, #1
 800b01c:	e7c5      	b.n	800afaa <__lshift+0x4a>
 800b01e:	3904      	subs	r1, #4
 800b020:	f853 2b04 	ldr.w	r2, [r3], #4
 800b024:	f841 2f04 	str.w	r2, [r1, #4]!
 800b028:	459c      	cmp	ip, r3
 800b02a:	d8f9      	bhi.n	800b020 <__lshift+0xc0>
 800b02c:	e7ea      	b.n	800b004 <__lshift+0xa4>
 800b02e:	bf00      	nop
 800b030:	0800d4ed 	.word	0x0800d4ed
 800b034:	0800d4fe 	.word	0x0800d4fe

0800b038 <__mcmp>:
 800b038:	690a      	ldr	r2, [r1, #16]
 800b03a:	4603      	mov	r3, r0
 800b03c:	6900      	ldr	r0, [r0, #16]
 800b03e:	1a80      	subs	r0, r0, r2
 800b040:	b530      	push	{r4, r5, lr}
 800b042:	d10e      	bne.n	800b062 <__mcmp+0x2a>
 800b044:	3314      	adds	r3, #20
 800b046:	3114      	adds	r1, #20
 800b048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b04c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b058:	4295      	cmp	r5, r2
 800b05a:	d003      	beq.n	800b064 <__mcmp+0x2c>
 800b05c:	d205      	bcs.n	800b06a <__mcmp+0x32>
 800b05e:	f04f 30ff 	mov.w	r0, #4294967295
 800b062:	bd30      	pop	{r4, r5, pc}
 800b064:	42a3      	cmp	r3, r4
 800b066:	d3f3      	bcc.n	800b050 <__mcmp+0x18>
 800b068:	e7fb      	b.n	800b062 <__mcmp+0x2a>
 800b06a:	2001      	movs	r0, #1
 800b06c:	e7f9      	b.n	800b062 <__mcmp+0x2a>
	...

0800b070 <__mdiff>:
 800b070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4689      	mov	r9, r1
 800b076:	4606      	mov	r6, r0
 800b078:	4611      	mov	r1, r2
 800b07a:	4648      	mov	r0, r9
 800b07c:	4614      	mov	r4, r2
 800b07e:	f7ff ffdb 	bl	800b038 <__mcmp>
 800b082:	1e05      	subs	r5, r0, #0
 800b084:	d112      	bne.n	800b0ac <__mdiff+0x3c>
 800b086:	4629      	mov	r1, r5
 800b088:	4630      	mov	r0, r6
 800b08a:	f7ff fd19 	bl	800aac0 <_Balloc>
 800b08e:	4602      	mov	r2, r0
 800b090:	b928      	cbnz	r0, 800b09e <__mdiff+0x2e>
 800b092:	4b3f      	ldr	r3, [pc, #252]	@ (800b190 <__mdiff+0x120>)
 800b094:	f240 2137 	movw	r1, #567	@ 0x237
 800b098:	483e      	ldr	r0, [pc, #248]	@ (800b194 <__mdiff+0x124>)
 800b09a:	f001 fa89 	bl	800c5b0 <__assert_func>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	b003      	add	sp, #12
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	bfbc      	itt	lt
 800b0ae:	464b      	movlt	r3, r9
 800b0b0:	46a1      	movlt	r9, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0b8:	bfba      	itte	lt
 800b0ba:	461c      	movlt	r4, r3
 800b0bc:	2501      	movlt	r5, #1
 800b0be:	2500      	movge	r5, #0
 800b0c0:	f7ff fcfe 	bl	800aac0 <_Balloc>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	b918      	cbnz	r0, 800b0d0 <__mdiff+0x60>
 800b0c8:	4b31      	ldr	r3, [pc, #196]	@ (800b190 <__mdiff+0x120>)
 800b0ca:	f240 2145 	movw	r1, #581	@ 0x245
 800b0ce:	e7e3      	b.n	800b098 <__mdiff+0x28>
 800b0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0d4:	6926      	ldr	r6, [r4, #16]
 800b0d6:	60c5      	str	r5, [r0, #12]
 800b0d8:	f109 0310 	add.w	r3, r9, #16
 800b0dc:	f109 0514 	add.w	r5, r9, #20
 800b0e0:	f104 0e14 	add.w	lr, r4, #20
 800b0e4:	f100 0b14 	add.w	fp, r0, #20
 800b0e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	46d9      	mov	r9, fp
 800b0f4:	f04f 0c00 	mov.w	ip, #0
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	fa1f f38a 	uxth.w	r3, sl
 800b108:	4619      	mov	r1, r3
 800b10a:	b283      	uxth	r3, r0
 800b10c:	1acb      	subs	r3, r1, r3
 800b10e:	0c00      	lsrs	r0, r0, #16
 800b110:	4463      	add	r3, ip
 800b112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b120:	4576      	cmp	r6, lr
 800b122:	f849 3b04 	str.w	r3, [r9], #4
 800b126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b12a:	d8e5      	bhi.n	800b0f8 <__mdiff+0x88>
 800b12c:	1b33      	subs	r3, r6, r4
 800b12e:	3b15      	subs	r3, #21
 800b130:	f023 0303 	bic.w	r3, r3, #3
 800b134:	3415      	adds	r4, #21
 800b136:	3304      	adds	r3, #4
 800b138:	42a6      	cmp	r6, r4
 800b13a:	bf38      	it	cc
 800b13c:	2304      	movcc	r3, #4
 800b13e:	441d      	add	r5, r3
 800b140:	445b      	add	r3, fp
 800b142:	461e      	mov	r6, r3
 800b144:	462c      	mov	r4, r5
 800b146:	4544      	cmp	r4, r8
 800b148:	d30e      	bcc.n	800b168 <__mdiff+0xf8>
 800b14a:	f108 0103 	add.w	r1, r8, #3
 800b14e:	1b49      	subs	r1, r1, r5
 800b150:	f021 0103 	bic.w	r1, r1, #3
 800b154:	3d03      	subs	r5, #3
 800b156:	45a8      	cmp	r8, r5
 800b158:	bf38      	it	cc
 800b15a:	2100      	movcc	r1, #0
 800b15c:	440b      	add	r3, r1
 800b15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b162:	b191      	cbz	r1, 800b18a <__mdiff+0x11a>
 800b164:	6117      	str	r7, [r2, #16]
 800b166:	e79d      	b.n	800b0a4 <__mdiff+0x34>
 800b168:	f854 1b04 	ldr.w	r1, [r4], #4
 800b16c:	46e6      	mov	lr, ip
 800b16e:	0c08      	lsrs	r0, r1, #16
 800b170:	fa1c fc81 	uxtah	ip, ip, r1
 800b174:	4471      	add	r1, lr
 800b176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b17a:	b289      	uxth	r1, r1
 800b17c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b180:	f846 1b04 	str.w	r1, [r6], #4
 800b184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b188:	e7dd      	b.n	800b146 <__mdiff+0xd6>
 800b18a:	3f01      	subs	r7, #1
 800b18c:	e7e7      	b.n	800b15e <__mdiff+0xee>
 800b18e:	bf00      	nop
 800b190:	0800d4ed 	.word	0x0800d4ed
 800b194:	0800d4fe 	.word	0x0800d4fe

0800b198 <__ulp>:
 800b198:	b082      	sub	sp, #8
 800b19a:	ed8d 0b00 	vstr	d0, [sp]
 800b19e:	9a01      	ldr	r2, [sp, #4]
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <__ulp+0x48>)
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc08      	bgt.n	800b1be <__ulp+0x26>
 800b1ac:	425b      	negs	r3, r3
 800b1ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b1b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1b6:	da04      	bge.n	800b1c2 <__ulp+0x2a>
 800b1b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1bc:	4113      	asrs	r3, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	e008      	b.n	800b1d4 <__ulp+0x3c>
 800b1c2:	f1a2 0314 	sub.w	r3, r2, #20
 800b1c6:	2b1e      	cmp	r3, #30
 800b1c8:	bfda      	itte	le
 800b1ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1ce:	40da      	lsrle	r2, r3
 800b1d0:	2201      	movgt	r2, #1
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	ec41 0b10 	vmov	d0, r0, r1
 800b1dc:	b002      	add	sp, #8
 800b1de:	4770      	bx	lr
 800b1e0:	7ff00000 	.word	0x7ff00000

0800b1e4 <__b2d>:
 800b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e8:	6906      	ldr	r6, [r0, #16]
 800b1ea:	f100 0814 	add.w	r8, r0, #20
 800b1ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b1f2:	1f37      	subs	r7, r6, #4
 800b1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f7ff fd53 	bl	800aca4 <__hi0bits>
 800b1fe:	f1c0 0320 	rsb	r3, r0, #32
 800b202:	280a      	cmp	r0, #10
 800b204:	600b      	str	r3, [r1, #0]
 800b206:	491b      	ldr	r1, [pc, #108]	@ (800b274 <__b2d+0x90>)
 800b208:	dc15      	bgt.n	800b236 <__b2d+0x52>
 800b20a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b20e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b212:	45b8      	cmp	r8, r7
 800b214:	ea43 0501 	orr.w	r5, r3, r1
 800b218:	bf34      	ite	cc
 800b21a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b21e:	2300      	movcs	r3, #0
 800b220:	3015      	adds	r0, #21
 800b222:	fa02 f000 	lsl.w	r0, r2, r0
 800b226:	fa23 f30c 	lsr.w	r3, r3, ip
 800b22a:	4303      	orrs	r3, r0
 800b22c:	461c      	mov	r4, r3
 800b22e:	ec45 4b10 	vmov	d0, r4, r5
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	45b8      	cmp	r8, r7
 800b238:	bf3a      	itte	cc
 800b23a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b23e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b242:	2300      	movcs	r3, #0
 800b244:	380b      	subs	r0, #11
 800b246:	d012      	beq.n	800b26e <__b2d+0x8a>
 800b248:	f1c0 0120 	rsb	r1, r0, #32
 800b24c:	fa23 f401 	lsr.w	r4, r3, r1
 800b250:	4082      	lsls	r2, r0
 800b252:	4322      	orrs	r2, r4
 800b254:	4547      	cmp	r7, r8
 800b256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b25a:	bf8c      	ite	hi
 800b25c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b260:	2200      	movls	r2, #0
 800b262:	4083      	lsls	r3, r0
 800b264:	40ca      	lsrs	r2, r1
 800b266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b26a:	4313      	orrs	r3, r2
 800b26c:	e7de      	b.n	800b22c <__b2d+0x48>
 800b26e:	ea42 0501 	orr.w	r5, r2, r1
 800b272:	e7db      	b.n	800b22c <__b2d+0x48>
 800b274:	3ff00000 	.word	0x3ff00000

0800b278 <__d2b>:
 800b278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	460f      	mov	r7, r1
 800b27e:	2101      	movs	r1, #1
 800b280:	ec59 8b10 	vmov	r8, r9, d0
 800b284:	4616      	mov	r6, r2
 800b286:	f7ff fc1b 	bl	800aac0 <_Balloc>
 800b28a:	4604      	mov	r4, r0
 800b28c:	b930      	cbnz	r0, 800b29c <__d2b+0x24>
 800b28e:	4602      	mov	r2, r0
 800b290:	4b23      	ldr	r3, [pc, #140]	@ (800b320 <__d2b+0xa8>)
 800b292:	4824      	ldr	r0, [pc, #144]	@ (800b324 <__d2b+0xac>)
 800b294:	f240 310f 	movw	r1, #783	@ 0x30f
 800b298:	f001 f98a 	bl	800c5b0 <__assert_func>
 800b29c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2a4:	b10d      	cbz	r5, 800b2aa <__d2b+0x32>
 800b2a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b2b0:	d023      	beq.n	800b2fa <__d2b+0x82>
 800b2b2:	4668      	mov	r0, sp
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	f7ff fd14 	bl	800ace2 <__lo0bits>
 800b2ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2be:	b1d0      	cbz	r0, 800b2f6 <__d2b+0x7e>
 800b2c0:	f1c0 0320 	rsb	r3, r0, #32
 800b2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	40c2      	lsrs	r2, r0
 800b2cc:	6163      	str	r3, [r4, #20]
 800b2ce:	9201      	str	r2, [sp, #4]
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	61a3      	str	r3, [r4, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf0c      	ite	eq
 800b2d8:	2201      	moveq	r2, #1
 800b2da:	2202      	movne	r2, #2
 800b2dc:	6122      	str	r2, [r4, #16]
 800b2de:	b1a5      	cbz	r5, 800b30a <__d2b+0x92>
 800b2e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2e4:	4405      	add	r5, r0
 800b2e6:	603d      	str	r5, [r7, #0]
 800b2e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2ec:	6030      	str	r0, [r6, #0]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	6161      	str	r1, [r4, #20]
 800b2f8:	e7ea      	b.n	800b2d0 <__d2b+0x58>
 800b2fa:	a801      	add	r0, sp, #4
 800b2fc:	f7ff fcf1 	bl	800ace2 <__lo0bits>
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	6163      	str	r3, [r4, #20]
 800b304:	3020      	adds	r0, #32
 800b306:	2201      	movs	r2, #1
 800b308:	e7e8      	b.n	800b2dc <__d2b+0x64>
 800b30a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b30e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b312:	6038      	str	r0, [r7, #0]
 800b314:	6918      	ldr	r0, [r3, #16]
 800b316:	f7ff fcc5 	bl	800aca4 <__hi0bits>
 800b31a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b31e:	e7e5      	b.n	800b2ec <__d2b+0x74>
 800b320:	0800d4ed 	.word	0x0800d4ed
 800b324:	0800d4fe 	.word	0x0800d4fe

0800b328 <__ratio>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	b085      	sub	sp, #20
 800b32e:	e9cd 1000 	strd	r1, r0, [sp]
 800b332:	a902      	add	r1, sp, #8
 800b334:	f7ff ff56 	bl	800b1e4 <__b2d>
 800b338:	9800      	ldr	r0, [sp, #0]
 800b33a:	a903      	add	r1, sp, #12
 800b33c:	ec55 4b10 	vmov	r4, r5, d0
 800b340:	f7ff ff50 	bl	800b1e4 <__b2d>
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	6919      	ldr	r1, [r3, #16]
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	1ac9      	subs	r1, r1, r3
 800b34e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b352:	1a9b      	subs	r3, r3, r2
 800b354:	ec5b ab10 	vmov	sl, fp, d0
 800b358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfce      	itee	gt
 800b360:	462a      	movgt	r2, r5
 800b362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b366:	465a      	movle	r2, fp
 800b368:	462f      	mov	r7, r5
 800b36a:	46d9      	mov	r9, fp
 800b36c:	bfcc      	ite	gt
 800b36e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b376:	464b      	mov	r3, r9
 800b378:	4652      	mov	r2, sl
 800b37a:	4620      	mov	r0, r4
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f5 fa6d 	bl	800085c <__aeabi_ddiv>
 800b382:	ec41 0b10 	vmov	d0, r0, r1
 800b386:	b005      	add	sp, #20
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b38c <__copybits>:
 800b38c:	3901      	subs	r1, #1
 800b38e:	b570      	push	{r4, r5, r6, lr}
 800b390:	1149      	asrs	r1, r1, #5
 800b392:	6914      	ldr	r4, [r2, #16]
 800b394:	3101      	adds	r1, #1
 800b396:	f102 0314 	add.w	r3, r2, #20
 800b39a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b39e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3a2:	1f05      	subs	r5, r0, #4
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d30c      	bcc.n	800b3c2 <__copybits+0x36>
 800b3a8:	1aa3      	subs	r3, r4, r2
 800b3aa:	3b11      	subs	r3, #17
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	3211      	adds	r2, #17
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	bf88      	it	hi
 800b3b6:	2300      	movhi	r3, #0
 800b3b8:	4418      	add	r0, r3
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4288      	cmp	r0, r1
 800b3be:	d305      	bcc.n	800b3cc <__copybits+0x40>
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3ca:	e7eb      	b.n	800b3a4 <__copybits+0x18>
 800b3cc:	f840 3b04 	str.w	r3, [r0], #4
 800b3d0:	e7f4      	b.n	800b3bc <__copybits+0x30>

0800b3d2 <__any_on>:
 800b3d2:	f100 0214 	add.w	r2, r0, #20
 800b3d6:	6900      	ldr	r0, [r0, #16]
 800b3d8:	114b      	asrs	r3, r1, #5
 800b3da:	4298      	cmp	r0, r3
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	db11      	blt.n	800b404 <__any_on+0x32>
 800b3e0:	dd0a      	ble.n	800b3f8 <__any_on+0x26>
 800b3e2:	f011 011f 	ands.w	r1, r1, #31
 800b3e6:	d007      	beq.n	800b3f8 <__any_on+0x26>
 800b3e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3ec:	fa24 f001 	lsr.w	r0, r4, r1
 800b3f0:	fa00 f101 	lsl.w	r1, r0, r1
 800b3f4:	428c      	cmp	r4, r1
 800b3f6:	d10b      	bne.n	800b410 <__any_on+0x3e>
 800b3f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d803      	bhi.n	800b408 <__any_on+0x36>
 800b400:	2000      	movs	r0, #0
 800b402:	bd10      	pop	{r4, pc}
 800b404:	4603      	mov	r3, r0
 800b406:	e7f7      	b.n	800b3f8 <__any_on+0x26>
 800b408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d0f5      	beq.n	800b3fc <__any_on+0x2a>
 800b410:	2001      	movs	r0, #1
 800b412:	e7f6      	b.n	800b402 <__any_on+0x30>

0800b414 <sulp>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	ec45 4b10 	vmov	d0, r4, r5
 800b41e:	4616      	mov	r6, r2
 800b420:	f7ff feba 	bl	800b198 <__ulp>
 800b424:	ec51 0b10 	vmov	r0, r1, d0
 800b428:	b17e      	cbz	r6, 800b44a <sulp+0x36>
 800b42a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b42e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd09      	ble.n	800b44a <sulp+0x36>
 800b436:	051b      	lsls	r3, r3, #20
 800b438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b43c:	2400      	movs	r4, #0
 800b43e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	f7f5 f8df 	bl	8000608 <__aeabi_dmul>
 800b44a:	ec41 0b10 	vmov	d0, r0, r1
 800b44e:	bd70      	pop	{r4, r5, r6, pc}

0800b450 <_strtod_l>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b09f      	sub	sp, #124	@ 0x7c
 800b456:	460c      	mov	r4, r1
 800b458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b45a:	2200      	movs	r2, #0
 800b45c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b45e:	9005      	str	r0, [sp, #20]
 800b460:	f04f 0a00 	mov.w	sl, #0
 800b464:	f04f 0b00 	mov.w	fp, #0
 800b468:	460a      	mov	r2, r1
 800b46a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b46c:	7811      	ldrb	r1, [r2, #0]
 800b46e:	292b      	cmp	r1, #43	@ 0x2b
 800b470:	d04a      	beq.n	800b508 <_strtod_l+0xb8>
 800b472:	d838      	bhi.n	800b4e6 <_strtod_l+0x96>
 800b474:	290d      	cmp	r1, #13
 800b476:	d832      	bhi.n	800b4de <_strtod_l+0x8e>
 800b478:	2908      	cmp	r1, #8
 800b47a:	d832      	bhi.n	800b4e2 <_strtod_l+0x92>
 800b47c:	2900      	cmp	r1, #0
 800b47e:	d03b      	beq.n	800b4f8 <_strtod_l+0xa8>
 800b480:	2200      	movs	r2, #0
 800b482:	920e      	str	r2, [sp, #56]	@ 0x38
 800b484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b486:	782a      	ldrb	r2, [r5, #0]
 800b488:	2a30      	cmp	r2, #48	@ 0x30
 800b48a:	f040 80b2 	bne.w	800b5f2 <_strtod_l+0x1a2>
 800b48e:	786a      	ldrb	r2, [r5, #1]
 800b490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b494:	2a58      	cmp	r2, #88	@ 0x58
 800b496:	d16e      	bne.n	800b576 <_strtod_l+0x126>
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	4a8f      	ldr	r2, [pc, #572]	@ (800b6e0 <_strtod_l+0x290>)
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b4a8:	a919      	add	r1, sp, #100	@ 0x64
 800b4aa:	f001 f91b 	bl	800c6e4 <__gethex>
 800b4ae:	f010 060f 	ands.w	r6, r0, #15
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	d005      	beq.n	800b4c2 <_strtod_l+0x72>
 800b4b6:	2e06      	cmp	r6, #6
 800b4b8:	d128      	bne.n	800b50c <_strtod_l+0xbc>
 800b4ba:	3501      	adds	r5, #1
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9519      	str	r5, [sp, #100]	@ 0x64
 800b4c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 858e 	bne.w	800bfe6 <_strtod_l+0xb96>
 800b4ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4cc:	b1cb      	cbz	r3, 800b502 <_strtod_l+0xb2>
 800b4ce:	4652      	mov	r2, sl
 800b4d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b4d4:	ec43 2b10 	vmov	d0, r2, r3
 800b4d8:	b01f      	add	sp, #124	@ 0x7c
 800b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4de:	2920      	cmp	r1, #32
 800b4e0:	d1ce      	bne.n	800b480 <_strtod_l+0x30>
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	e7c1      	b.n	800b46a <_strtod_l+0x1a>
 800b4e6:	292d      	cmp	r1, #45	@ 0x2d
 800b4e8:	d1ca      	bne.n	800b480 <_strtod_l+0x30>
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	910e      	str	r1, [sp, #56]	@ 0x38
 800b4ee:	1c51      	adds	r1, r2, #1
 800b4f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4f2:	7852      	ldrb	r2, [r2, #1]
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	d1c5      	bne.n	800b484 <_strtod_l+0x34>
 800b4f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f040 8570 	bne.w	800bfe2 <_strtod_l+0xb92>
 800b502:	4652      	mov	r2, sl
 800b504:	465b      	mov	r3, fp
 800b506:	e7e5      	b.n	800b4d4 <_strtod_l+0x84>
 800b508:	2100      	movs	r1, #0
 800b50a:	e7ef      	b.n	800b4ec <_strtod_l+0x9c>
 800b50c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b50e:	b13a      	cbz	r2, 800b520 <_strtod_l+0xd0>
 800b510:	2135      	movs	r1, #53	@ 0x35
 800b512:	a81c      	add	r0, sp, #112	@ 0x70
 800b514:	f7ff ff3a 	bl	800b38c <__copybits>
 800b518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	f7ff fb10 	bl	800ab40 <_Bfree>
 800b520:	3e01      	subs	r6, #1
 800b522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b524:	2e04      	cmp	r6, #4
 800b526:	d806      	bhi.n	800b536 <_strtod_l+0xe6>
 800b528:	e8df f006 	tbb	[pc, r6]
 800b52c:	201d0314 	.word	0x201d0314
 800b530:	14          	.byte	0x14
 800b531:	00          	.byte	0x00
 800b532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b536:	05e1      	lsls	r1, r4, #23
 800b538:	bf48      	it	mi
 800b53a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b53e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b542:	0d1b      	lsrs	r3, r3, #20
 800b544:	051b      	lsls	r3, r3, #20
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1bb      	bne.n	800b4c2 <_strtod_l+0x72>
 800b54a:	f7fe fb1f 	bl	8009b8c <__errno>
 800b54e:	2322      	movs	r3, #34	@ 0x22
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	e7b6      	b.n	800b4c2 <_strtod_l+0x72>
 800b554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b55c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b564:	e7e7      	b.n	800b536 <_strtod_l+0xe6>
 800b566:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b6e8 <_strtod_l+0x298>
 800b56a:	e7e4      	b.n	800b536 <_strtod_l+0xe6>
 800b56c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b570:	f04f 3aff 	mov.w	sl, #4294967295
 800b574:	e7df      	b.n	800b536 <_strtod_l+0xe6>
 800b576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	2b30      	cmp	r3, #48	@ 0x30
 800b580:	d0f9      	beq.n	800b576 <_strtod_l+0x126>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d09d      	beq.n	800b4c2 <_strtod_l+0x72>
 800b586:	2301      	movs	r3, #1
 800b588:	2700      	movs	r7, #0
 800b58a:	9308      	str	r3, [sp, #32]
 800b58c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b58e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b590:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b592:	46b9      	mov	r9, r7
 800b594:	220a      	movs	r2, #10
 800b596:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b598:	7805      	ldrb	r5, [r0, #0]
 800b59a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b59e:	b2d9      	uxtb	r1, r3
 800b5a0:	2909      	cmp	r1, #9
 800b5a2:	d928      	bls.n	800b5f6 <_strtod_l+0x1a6>
 800b5a4:	494f      	ldr	r1, [pc, #316]	@ (800b6e4 <_strtod_l+0x294>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f000 ffd6 	bl	800c558 <strncmp>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d032      	beq.n	800b616 <_strtod_l+0x1c6>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5b6:	464d      	mov	r5, r9
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2a65      	cmp	r2, #101	@ 0x65
 800b5bc:	d001      	beq.n	800b5c2 <_strtod_l+0x172>
 800b5be:	2a45      	cmp	r2, #69	@ 0x45
 800b5c0:	d114      	bne.n	800b5ec <_strtod_l+0x19c>
 800b5c2:	b91d      	cbnz	r5, 800b5cc <_strtod_l+0x17c>
 800b5c4:	9a08      	ldr	r2, [sp, #32]
 800b5c6:	4302      	orrs	r2, r0
 800b5c8:	d096      	beq.n	800b4f8 <_strtod_l+0xa8>
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5ce:	1c62      	adds	r2, r4, #1
 800b5d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5d2:	7862      	ldrb	r2, [r4, #1]
 800b5d4:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5d6:	d07a      	beq.n	800b6ce <_strtod_l+0x27e>
 800b5d8:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5da:	d07e      	beq.n	800b6da <_strtod_l+0x28a>
 800b5dc:	f04f 0c00 	mov.w	ip, #0
 800b5e0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b5e4:	2909      	cmp	r1, #9
 800b5e6:	f240 8085 	bls.w	800b6f4 <_strtod_l+0x2a4>
 800b5ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5ec:	f04f 0800 	mov.w	r8, #0
 800b5f0:	e0a5      	b.n	800b73e <_strtod_l+0x2ee>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e7c8      	b.n	800b588 <_strtod_l+0x138>
 800b5f6:	f1b9 0f08 	cmp.w	r9, #8
 800b5fa:	bfd8      	it	le
 800b5fc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b5fe:	f100 0001 	add.w	r0, r0, #1
 800b602:	bfda      	itte	le
 800b604:	fb02 3301 	mlale	r3, r2, r1, r3
 800b608:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b60a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b60e:	f109 0901 	add.w	r9, r9, #1
 800b612:	9019      	str	r0, [sp, #100]	@ 0x64
 800b614:	e7bf      	b.n	800b596 <_strtod_l+0x146>
 800b616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b61c:	785a      	ldrb	r2, [r3, #1]
 800b61e:	f1b9 0f00 	cmp.w	r9, #0
 800b622:	d03b      	beq.n	800b69c <_strtod_l+0x24c>
 800b624:	900a      	str	r0, [sp, #40]	@ 0x28
 800b626:	464d      	mov	r5, r9
 800b628:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b62c:	2b09      	cmp	r3, #9
 800b62e:	d912      	bls.n	800b656 <_strtod_l+0x206>
 800b630:	2301      	movs	r3, #1
 800b632:	e7c2      	b.n	800b5ba <_strtod_l+0x16a>
 800b634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	9219      	str	r2, [sp, #100]	@ 0x64
 800b63a:	785a      	ldrb	r2, [r3, #1]
 800b63c:	3001      	adds	r0, #1
 800b63e:	2a30      	cmp	r2, #48	@ 0x30
 800b640:	d0f8      	beq.n	800b634 <_strtod_l+0x1e4>
 800b642:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b646:	2b08      	cmp	r3, #8
 800b648:	f200 84d2 	bhi.w	800bff0 <_strtod_l+0xba0>
 800b64c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b64e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b650:	2000      	movs	r0, #0
 800b652:	930c      	str	r3, [sp, #48]	@ 0x30
 800b654:	4605      	mov	r5, r0
 800b656:	3a30      	subs	r2, #48	@ 0x30
 800b658:	f100 0301 	add.w	r3, r0, #1
 800b65c:	d018      	beq.n	800b690 <_strtod_l+0x240>
 800b65e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b660:	4419      	add	r1, r3
 800b662:	910a      	str	r1, [sp, #40]	@ 0x28
 800b664:	462e      	mov	r6, r5
 800b666:	f04f 0e0a 	mov.w	lr, #10
 800b66a:	1c71      	adds	r1, r6, #1
 800b66c:	eba1 0c05 	sub.w	ip, r1, r5
 800b670:	4563      	cmp	r3, ip
 800b672:	dc15      	bgt.n	800b6a0 <_strtod_l+0x250>
 800b674:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b678:	182b      	adds	r3, r5, r0
 800b67a:	2b08      	cmp	r3, #8
 800b67c:	f105 0501 	add.w	r5, r5, #1
 800b680:	4405      	add	r5, r0
 800b682:	dc1a      	bgt.n	800b6ba <_strtod_l+0x26a>
 800b684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b686:	230a      	movs	r3, #10
 800b688:	fb03 2301 	mla	r3, r3, r1, r2
 800b68c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b68e:	2300      	movs	r3, #0
 800b690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b692:	1c51      	adds	r1, r2, #1
 800b694:	9119      	str	r1, [sp, #100]	@ 0x64
 800b696:	7852      	ldrb	r2, [r2, #1]
 800b698:	4618      	mov	r0, r3
 800b69a:	e7c5      	b.n	800b628 <_strtod_l+0x1d8>
 800b69c:	4648      	mov	r0, r9
 800b69e:	e7ce      	b.n	800b63e <_strtod_l+0x1ee>
 800b6a0:	2e08      	cmp	r6, #8
 800b6a2:	dc05      	bgt.n	800b6b0 <_strtod_l+0x260>
 800b6a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b6a6:	fb0e f606 	mul.w	r6, lr, r6
 800b6aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b6ac:	460e      	mov	r6, r1
 800b6ae:	e7dc      	b.n	800b66a <_strtod_l+0x21a>
 800b6b0:	2910      	cmp	r1, #16
 800b6b2:	bfd8      	it	le
 800b6b4:	fb0e f707 	mulle.w	r7, lr, r7
 800b6b8:	e7f8      	b.n	800b6ac <_strtod_l+0x25c>
 800b6ba:	2b0f      	cmp	r3, #15
 800b6bc:	bfdc      	itt	le
 800b6be:	230a      	movle	r3, #10
 800b6c0:	fb03 2707 	mlale	r7, r3, r7, r2
 800b6c4:	e7e3      	b.n	800b68e <_strtod_l+0x23e>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e77a      	b.n	800b5c4 <_strtod_l+0x174>
 800b6ce:	f04f 0c00 	mov.w	ip, #0
 800b6d2:	1ca2      	adds	r2, r4, #2
 800b6d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6d6:	78a2      	ldrb	r2, [r4, #2]
 800b6d8:	e782      	b.n	800b5e0 <_strtod_l+0x190>
 800b6da:	f04f 0c01 	mov.w	ip, #1
 800b6de:	e7f8      	b.n	800b6d2 <_strtod_l+0x282>
 800b6e0:	0800d724 	.word	0x0800d724
 800b6e4:	0800d557 	.word	0x0800d557
 800b6e8:	7ff00000 	.word	0x7ff00000
 800b6ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6ee:	1c51      	adds	r1, r2, #1
 800b6f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6f2:	7852      	ldrb	r2, [r2, #1]
 800b6f4:	2a30      	cmp	r2, #48	@ 0x30
 800b6f6:	d0f9      	beq.n	800b6ec <_strtod_l+0x29c>
 800b6f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6fc:	2908      	cmp	r1, #8
 800b6fe:	f63f af75 	bhi.w	800b5ec <_strtod_l+0x19c>
 800b702:	3a30      	subs	r2, #48	@ 0x30
 800b704:	9209      	str	r2, [sp, #36]	@ 0x24
 800b706:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b708:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b70a:	f04f 080a 	mov.w	r8, #10
 800b70e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b710:	1c56      	adds	r6, r2, #1
 800b712:	9619      	str	r6, [sp, #100]	@ 0x64
 800b714:	7852      	ldrb	r2, [r2, #1]
 800b716:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b71a:	f1be 0f09 	cmp.w	lr, #9
 800b71e:	d939      	bls.n	800b794 <_strtod_l+0x344>
 800b720:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b722:	1a76      	subs	r6, r6, r1
 800b724:	2e08      	cmp	r6, #8
 800b726:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b72a:	dc03      	bgt.n	800b734 <_strtod_l+0x2e4>
 800b72c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b72e:	4588      	cmp	r8, r1
 800b730:	bfa8      	it	ge
 800b732:	4688      	movge	r8, r1
 800b734:	f1bc 0f00 	cmp.w	ip, #0
 800b738:	d001      	beq.n	800b73e <_strtod_l+0x2ee>
 800b73a:	f1c8 0800 	rsb	r8, r8, #0
 800b73e:	2d00      	cmp	r5, #0
 800b740:	d14e      	bne.n	800b7e0 <_strtod_l+0x390>
 800b742:	9908      	ldr	r1, [sp, #32]
 800b744:	4308      	orrs	r0, r1
 800b746:	f47f aebc 	bne.w	800b4c2 <_strtod_l+0x72>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f47f aed4 	bne.w	800b4f8 <_strtod_l+0xa8>
 800b750:	2a69      	cmp	r2, #105	@ 0x69
 800b752:	d028      	beq.n	800b7a6 <_strtod_l+0x356>
 800b754:	dc25      	bgt.n	800b7a2 <_strtod_l+0x352>
 800b756:	2a49      	cmp	r2, #73	@ 0x49
 800b758:	d025      	beq.n	800b7a6 <_strtod_l+0x356>
 800b75a:	2a4e      	cmp	r2, #78	@ 0x4e
 800b75c:	f47f aecc 	bne.w	800b4f8 <_strtod_l+0xa8>
 800b760:	499a      	ldr	r1, [pc, #616]	@ (800b9cc <_strtod_l+0x57c>)
 800b762:	a819      	add	r0, sp, #100	@ 0x64
 800b764:	f001 f9e0 	bl	800cb28 <__match>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f43f aec5 	beq.w	800b4f8 <_strtod_l+0xa8>
 800b76e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b28      	cmp	r3, #40	@ 0x28
 800b774:	d12e      	bne.n	800b7d4 <_strtod_l+0x384>
 800b776:	4996      	ldr	r1, [pc, #600]	@ (800b9d0 <_strtod_l+0x580>)
 800b778:	aa1c      	add	r2, sp, #112	@ 0x70
 800b77a:	a819      	add	r0, sp, #100	@ 0x64
 800b77c:	f001 f9e8 	bl	800cb50 <__hexnan>
 800b780:	2805      	cmp	r0, #5
 800b782:	d127      	bne.n	800b7d4 <_strtod_l+0x384>
 800b784:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b786:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b78a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b78e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b792:	e696      	b.n	800b4c2 <_strtod_l+0x72>
 800b794:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b796:	fb08 2101 	mla	r1, r8, r1, r2
 800b79a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b79e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a0:	e7b5      	b.n	800b70e <_strtod_l+0x2be>
 800b7a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b7a4:	e7da      	b.n	800b75c <_strtod_l+0x30c>
 800b7a6:	498b      	ldr	r1, [pc, #556]	@ (800b9d4 <_strtod_l+0x584>)
 800b7a8:	a819      	add	r0, sp, #100	@ 0x64
 800b7aa:	f001 f9bd 	bl	800cb28 <__match>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f43f aea2 	beq.w	800b4f8 <_strtod_l+0xa8>
 800b7b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7b6:	4988      	ldr	r1, [pc, #544]	@ (800b9d8 <_strtod_l+0x588>)
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	a819      	add	r0, sp, #100	@ 0x64
 800b7bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7be:	f001 f9b3 	bl	800cb28 <__match>
 800b7c2:	b910      	cbnz	r0, 800b7ca <_strtod_l+0x37a>
 800b7c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b9e8 <_strtod_l+0x598>
 800b7ce:	f04f 0a00 	mov.w	sl, #0
 800b7d2:	e676      	b.n	800b4c2 <_strtod_l+0x72>
 800b7d4:	4881      	ldr	r0, [pc, #516]	@ (800b9dc <_strtod_l+0x58c>)
 800b7d6:	f000 fee3 	bl	800c5a0 <nan>
 800b7da:	ec5b ab10 	vmov	sl, fp, d0
 800b7de:	e670      	b.n	800b4c2 <_strtod_l+0x72>
 800b7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b7e4:	eba8 0303 	sub.w	r3, r8, r3
 800b7e8:	f1b9 0f00 	cmp.w	r9, #0
 800b7ec:	bf08      	it	eq
 800b7ee:	46a9      	moveq	r9, r5
 800b7f0:	2d10      	cmp	r5, #16
 800b7f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7f4:	462c      	mov	r4, r5
 800b7f6:	bfa8      	it	ge
 800b7f8:	2410      	movge	r4, #16
 800b7fa:	f7f4 fe8b 	bl	8000514 <__aeabi_ui2d>
 800b7fe:	2d09      	cmp	r5, #9
 800b800:	4682      	mov	sl, r0
 800b802:	468b      	mov	fp, r1
 800b804:	dc13      	bgt.n	800b82e <_strtod_l+0x3de>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f43f ae5a 	beq.w	800b4c2 <_strtod_l+0x72>
 800b80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b810:	dd78      	ble.n	800b904 <_strtod_l+0x4b4>
 800b812:	2b16      	cmp	r3, #22
 800b814:	dc5f      	bgt.n	800b8d6 <_strtod_l+0x486>
 800b816:	4972      	ldr	r1, [pc, #456]	@ (800b9e0 <_strtod_l+0x590>)
 800b818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b820:	4652      	mov	r2, sl
 800b822:	465b      	mov	r3, fp
 800b824:	f7f4 fef0 	bl	8000608 <__aeabi_dmul>
 800b828:	4682      	mov	sl, r0
 800b82a:	468b      	mov	fp, r1
 800b82c:	e649      	b.n	800b4c2 <_strtod_l+0x72>
 800b82e:	4b6c      	ldr	r3, [pc, #432]	@ (800b9e0 <_strtod_l+0x590>)
 800b830:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b834:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b838:	f7f4 fee6 	bl	8000608 <__aeabi_dmul>
 800b83c:	4682      	mov	sl, r0
 800b83e:	4638      	mov	r0, r7
 800b840:	468b      	mov	fp, r1
 800b842:	f7f4 fe67 	bl	8000514 <__aeabi_ui2d>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f4 fd25 	bl	800029c <__adddf3>
 800b852:	2d0f      	cmp	r5, #15
 800b854:	4682      	mov	sl, r0
 800b856:	468b      	mov	fp, r1
 800b858:	ddd5      	ble.n	800b806 <_strtod_l+0x3b6>
 800b85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85c:	1b2c      	subs	r4, r5, r4
 800b85e:	441c      	add	r4, r3
 800b860:	2c00      	cmp	r4, #0
 800b862:	f340 8093 	ble.w	800b98c <_strtod_l+0x53c>
 800b866:	f014 030f 	ands.w	r3, r4, #15
 800b86a:	d00a      	beq.n	800b882 <_strtod_l+0x432>
 800b86c:	495c      	ldr	r1, [pc, #368]	@ (800b9e0 <_strtod_l+0x590>)
 800b86e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b872:	4652      	mov	r2, sl
 800b874:	465b      	mov	r3, fp
 800b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87a:	f7f4 fec5 	bl	8000608 <__aeabi_dmul>
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	f034 040f 	bics.w	r4, r4, #15
 800b886:	d073      	beq.n	800b970 <_strtod_l+0x520>
 800b888:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b88c:	dd49      	ble.n	800b922 <_strtod_l+0x4d2>
 800b88e:	2400      	movs	r4, #0
 800b890:	46a0      	mov	r8, r4
 800b892:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b894:	46a1      	mov	r9, r4
 800b896:	9a05      	ldr	r2, [sp, #20]
 800b898:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b9e8 <_strtod_l+0x598>
 800b89c:	2322      	movs	r3, #34	@ 0x22
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	f04f 0a00 	mov.w	sl, #0
 800b8a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f43f ae0b 	beq.w	800b4c2 <_strtod_l+0x72>
 800b8ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ae:	9805      	ldr	r0, [sp, #20]
 800b8b0:	f7ff f946 	bl	800ab40 <_Bfree>
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	4649      	mov	r1, r9
 800b8b8:	f7ff f942 	bl	800ab40 <_Bfree>
 800b8bc:	9805      	ldr	r0, [sp, #20]
 800b8be:	4641      	mov	r1, r8
 800b8c0:	f7ff f93e 	bl	800ab40 <_Bfree>
 800b8c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	f7ff f93a 	bl	800ab40 <_Bfree>
 800b8cc:	9805      	ldr	r0, [sp, #20]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	f7ff f936 	bl	800ab40 <_Bfree>
 800b8d4:	e5f5      	b.n	800b4c2 <_strtod_l+0x72>
 800b8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	dbbc      	blt.n	800b85a <_strtod_l+0x40a>
 800b8e0:	4c3f      	ldr	r4, [pc, #252]	@ (800b9e0 <_strtod_l+0x590>)
 800b8e2:	f1c5 050f 	rsb	r5, r5, #15
 800b8e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	465b      	mov	r3, fp
 800b8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f2:	f7f4 fe89 	bl	8000608 <__aeabi_dmul>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f8:	1b5d      	subs	r5, r3, r5
 800b8fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b902:	e78f      	b.n	800b824 <_strtod_l+0x3d4>
 800b904:	3316      	adds	r3, #22
 800b906:	dba8      	blt.n	800b85a <_strtod_l+0x40a>
 800b908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b90a:	eba3 0808 	sub.w	r8, r3, r8
 800b90e:	4b34      	ldr	r3, [pc, #208]	@ (800b9e0 <_strtod_l+0x590>)
 800b910:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b914:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b918:	4650      	mov	r0, sl
 800b91a:	4659      	mov	r1, fp
 800b91c:	f7f4 ff9e 	bl	800085c <__aeabi_ddiv>
 800b920:	e782      	b.n	800b828 <_strtod_l+0x3d8>
 800b922:	2300      	movs	r3, #0
 800b924:	4f2f      	ldr	r7, [pc, #188]	@ (800b9e4 <_strtod_l+0x594>)
 800b926:	1124      	asrs	r4, r4, #4
 800b928:	4650      	mov	r0, sl
 800b92a:	4659      	mov	r1, fp
 800b92c:	461e      	mov	r6, r3
 800b92e:	2c01      	cmp	r4, #1
 800b930:	dc21      	bgt.n	800b976 <_strtod_l+0x526>
 800b932:	b10b      	cbz	r3, 800b938 <_strtod_l+0x4e8>
 800b934:	4682      	mov	sl, r0
 800b936:	468b      	mov	fp, r1
 800b938:	492a      	ldr	r1, [pc, #168]	@ (800b9e4 <_strtod_l+0x594>)
 800b93a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b93e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b942:	4652      	mov	r2, sl
 800b944:	465b      	mov	r3, fp
 800b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94a:	f7f4 fe5d 	bl	8000608 <__aeabi_dmul>
 800b94e:	4b26      	ldr	r3, [pc, #152]	@ (800b9e8 <_strtod_l+0x598>)
 800b950:	460a      	mov	r2, r1
 800b952:	400b      	ands	r3, r1
 800b954:	4925      	ldr	r1, [pc, #148]	@ (800b9ec <_strtod_l+0x59c>)
 800b956:	428b      	cmp	r3, r1
 800b958:	4682      	mov	sl, r0
 800b95a:	d898      	bhi.n	800b88e <_strtod_l+0x43e>
 800b95c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b960:	428b      	cmp	r3, r1
 800b962:	bf86      	itte	hi
 800b964:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b9f0 <_strtod_l+0x5a0>
 800b968:	f04f 3aff 	movhi.w	sl, #4294967295
 800b96c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b970:	2300      	movs	r3, #0
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	e076      	b.n	800ba64 <_strtod_l+0x614>
 800b976:	07e2      	lsls	r2, r4, #31
 800b978:	d504      	bpl.n	800b984 <_strtod_l+0x534>
 800b97a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b97e:	f7f4 fe43 	bl	8000608 <__aeabi_dmul>
 800b982:	2301      	movs	r3, #1
 800b984:	3601      	adds	r6, #1
 800b986:	1064      	asrs	r4, r4, #1
 800b988:	3708      	adds	r7, #8
 800b98a:	e7d0      	b.n	800b92e <_strtod_l+0x4de>
 800b98c:	d0f0      	beq.n	800b970 <_strtod_l+0x520>
 800b98e:	4264      	negs	r4, r4
 800b990:	f014 020f 	ands.w	r2, r4, #15
 800b994:	d00a      	beq.n	800b9ac <_strtod_l+0x55c>
 800b996:	4b12      	ldr	r3, [pc, #72]	@ (800b9e0 <_strtod_l+0x590>)
 800b998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b99c:	4650      	mov	r0, sl
 800b99e:	4659      	mov	r1, fp
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 ff5a 	bl	800085c <__aeabi_ddiv>
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	468b      	mov	fp, r1
 800b9ac:	1124      	asrs	r4, r4, #4
 800b9ae:	d0df      	beq.n	800b970 <_strtod_l+0x520>
 800b9b0:	2c1f      	cmp	r4, #31
 800b9b2:	dd1f      	ble.n	800b9f4 <_strtod_l+0x5a4>
 800b9b4:	2400      	movs	r4, #0
 800b9b6:	46a0      	mov	r8, r4
 800b9b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9ba:	46a1      	mov	r9, r4
 800b9bc:	9a05      	ldr	r2, [sp, #20]
 800b9be:	2322      	movs	r3, #34	@ 0x22
 800b9c0:	f04f 0a00 	mov.w	sl, #0
 800b9c4:	f04f 0b00 	mov.w	fp, #0
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	e76b      	b.n	800b8a4 <_strtod_l+0x454>
 800b9cc:	0800d445 	.word	0x0800d445
 800b9d0:	0800d710 	.word	0x0800d710
 800b9d4:	0800d43d 	.word	0x0800d43d
 800b9d8:	0800d474 	.word	0x0800d474
 800b9dc:	0800d5ad 	.word	0x0800d5ad
 800b9e0:	0800d648 	.word	0x0800d648
 800b9e4:	0800d620 	.word	0x0800d620
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	7ca00000 	.word	0x7ca00000
 800b9f0:	7fefffff 	.word	0x7fefffff
 800b9f4:	f014 0310 	ands.w	r3, r4, #16
 800b9f8:	bf18      	it	ne
 800b9fa:	236a      	movne	r3, #106	@ 0x6a
 800b9fc:	4ea9      	ldr	r6, [pc, #676]	@ (800bca4 <_strtod_l+0x854>)
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	2300      	movs	r3, #0
 800ba06:	07e7      	lsls	r7, r4, #31
 800ba08:	d504      	bpl.n	800ba14 <_strtod_l+0x5c4>
 800ba0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba0e:	f7f4 fdfb 	bl	8000608 <__aeabi_dmul>
 800ba12:	2301      	movs	r3, #1
 800ba14:	1064      	asrs	r4, r4, #1
 800ba16:	f106 0608 	add.w	r6, r6, #8
 800ba1a:	d1f4      	bne.n	800ba06 <_strtod_l+0x5b6>
 800ba1c:	b10b      	cbz	r3, 800ba22 <_strtod_l+0x5d2>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	9b08      	ldr	r3, [sp, #32]
 800ba24:	b1b3      	cbz	r3, 800ba54 <_strtod_l+0x604>
 800ba26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	4659      	mov	r1, fp
 800ba32:	dd0f      	ble.n	800ba54 <_strtod_l+0x604>
 800ba34:	2b1f      	cmp	r3, #31
 800ba36:	dd56      	ble.n	800bae6 <_strtod_l+0x696>
 800ba38:	2b34      	cmp	r3, #52	@ 0x34
 800ba3a:	bfde      	ittt	le
 800ba3c:	f04f 33ff 	movle.w	r3, #4294967295
 800ba40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba44:	4093      	lslle	r3, r2
 800ba46:	f04f 0a00 	mov.w	sl, #0
 800ba4a:	bfcc      	ite	gt
 800ba4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba50:	ea03 0b01 	andle.w	fp, r3, r1
 800ba54:	2200      	movs	r2, #0
 800ba56:	2300      	movs	r3, #0
 800ba58:	4650      	mov	r0, sl
 800ba5a:	4659      	mov	r1, fp
 800ba5c:	f7f5 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1a7      	bne.n	800b9b4 <_strtod_l+0x564>
 800ba64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba6a:	9805      	ldr	r0, [sp, #20]
 800ba6c:	462b      	mov	r3, r5
 800ba6e:	464a      	mov	r2, r9
 800ba70:	f7ff f8ce 	bl	800ac10 <__s2b>
 800ba74:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f43f af09 	beq.w	800b88e <_strtod_l+0x43e>
 800ba7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	eba3 0308 	sub.w	r3, r3, r8
 800ba86:	bfa8      	it	ge
 800ba88:	2300      	movge	r3, #0
 800ba8a:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba8c:	2400      	movs	r4, #0
 800ba8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba92:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba94:	46a0      	mov	r8, r4
 800ba96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba98:	9805      	ldr	r0, [sp, #20]
 800ba9a:	6859      	ldr	r1, [r3, #4]
 800ba9c:	f7ff f810 	bl	800aac0 <_Balloc>
 800baa0:	4681      	mov	r9, r0
 800baa2:	2800      	cmp	r0, #0
 800baa4:	f43f aef7 	beq.w	800b896 <_strtod_l+0x446>
 800baa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	3202      	adds	r2, #2
 800baae:	f103 010c 	add.w	r1, r3, #12
 800bab2:	0092      	lsls	r2, r2, #2
 800bab4:	300c      	adds	r0, #12
 800bab6:	f7fe f896 	bl	8009be6 <memcpy>
 800baba:	ec4b ab10 	vmov	d0, sl, fp
 800babe:	9805      	ldr	r0, [sp, #20]
 800bac0:	aa1c      	add	r2, sp, #112	@ 0x70
 800bac2:	a91b      	add	r1, sp, #108	@ 0x6c
 800bac4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bac8:	f7ff fbd6 	bl	800b278 <__d2b>
 800bacc:	901a      	str	r0, [sp, #104]	@ 0x68
 800bace:	2800      	cmp	r0, #0
 800bad0:	f43f aee1 	beq.w	800b896 <_strtod_l+0x446>
 800bad4:	9805      	ldr	r0, [sp, #20]
 800bad6:	2101      	movs	r1, #1
 800bad8:	f7ff f930 	bl	800ad3c <__i2b>
 800badc:	4680      	mov	r8, r0
 800bade:	b948      	cbnz	r0, 800baf4 <_strtod_l+0x6a4>
 800bae0:	f04f 0800 	mov.w	r8, #0
 800bae4:	e6d7      	b.n	800b896 <_strtod_l+0x446>
 800bae6:	f04f 32ff 	mov.w	r2, #4294967295
 800baea:	fa02 f303 	lsl.w	r3, r2, r3
 800baee:	ea03 0a0a 	and.w	sl, r3, sl
 800baf2:	e7af      	b.n	800ba54 <_strtod_l+0x604>
 800baf4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800baf6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	bfab      	itete	ge
 800bafc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bafe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bb00:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb04:	bfac      	ite	ge
 800bb06:	18ef      	addge	r7, r5, r3
 800bb08:	1b5e      	sublt	r6, r3, r5
 800bb0a:	9b08      	ldr	r3, [sp, #32]
 800bb0c:	1aed      	subs	r5, r5, r3
 800bb0e:	4415      	add	r5, r2
 800bb10:	4b65      	ldr	r3, [pc, #404]	@ (800bca8 <_strtod_l+0x858>)
 800bb12:	3d01      	subs	r5, #1
 800bb14:	429d      	cmp	r5, r3
 800bb16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb1a:	da50      	bge.n	800bbbe <_strtod_l+0x76e>
 800bb1c:	1b5b      	subs	r3, r3, r5
 800bb1e:	2b1f      	cmp	r3, #31
 800bb20:	eba2 0203 	sub.w	r2, r2, r3
 800bb24:	f04f 0101 	mov.w	r1, #1
 800bb28:	dc3d      	bgt.n	800bba6 <_strtod_l+0x756>
 800bb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb30:	2300      	movs	r3, #0
 800bb32:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb34:	18bd      	adds	r5, r7, r2
 800bb36:	9b08      	ldr	r3, [sp, #32]
 800bb38:	42af      	cmp	r7, r5
 800bb3a:	4416      	add	r6, r2
 800bb3c:	441e      	add	r6, r3
 800bb3e:	463b      	mov	r3, r7
 800bb40:	bfa8      	it	ge
 800bb42:	462b      	movge	r3, r5
 800bb44:	42b3      	cmp	r3, r6
 800bb46:	bfa8      	it	ge
 800bb48:	4633      	movge	r3, r6
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfc2      	ittt	gt
 800bb4e:	1aed      	subgt	r5, r5, r3
 800bb50:	1af6      	subgt	r6, r6, r3
 800bb52:	1aff      	subgt	r7, r7, r3
 800bb54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dd16      	ble.n	800bb88 <_strtod_l+0x738>
 800bb5a:	4641      	mov	r1, r8
 800bb5c:	9805      	ldr	r0, [sp, #20]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f7ff f9a4 	bl	800aeac <__pow5mult>
 800bb64:	4680      	mov	r8, r0
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d0ba      	beq.n	800bae0 <_strtod_l+0x690>
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	f7ff f8fa 	bl	800ad68 <__multiply>
 800bb74:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f43f ae8d 	beq.w	800b896 <_strtod_l+0x446>
 800bb7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb7e:	9805      	ldr	r0, [sp, #20]
 800bb80:	f7fe ffde 	bl	800ab40 <_Bfree>
 800bb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb86:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb88:	2d00      	cmp	r5, #0
 800bb8a:	dc1d      	bgt.n	800bbc8 <_strtod_l+0x778>
 800bb8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dd23      	ble.n	800bbda <_strtod_l+0x78a>
 800bb92:	4649      	mov	r1, r9
 800bb94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb96:	9805      	ldr	r0, [sp, #20]
 800bb98:	f7ff f988 	bl	800aeac <__pow5mult>
 800bb9c:	4681      	mov	r9, r0
 800bb9e:	b9e0      	cbnz	r0, 800bbda <_strtod_l+0x78a>
 800bba0:	f04f 0900 	mov.w	r9, #0
 800bba4:	e677      	b.n	800b896 <_strtod_l+0x446>
 800bba6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bbaa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bbae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bbb2:	35e2      	adds	r5, #226	@ 0xe2
 800bbb4:	fa01 f305 	lsl.w	r3, r1, r5
 800bbb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bbbc:	e7ba      	b.n	800bb34 <_strtod_l+0x6e4>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbc6:	e7b5      	b.n	800bb34 <_strtod_l+0x6e4>
 800bbc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	462a      	mov	r2, r5
 800bbce:	f7ff f9c7 	bl	800af60 <__lshift>
 800bbd2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1d9      	bne.n	800bb8c <_strtod_l+0x73c>
 800bbd8:	e65d      	b.n	800b896 <_strtod_l+0x446>
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	dd07      	ble.n	800bbee <_strtod_l+0x79e>
 800bbde:	4649      	mov	r1, r9
 800bbe0:	9805      	ldr	r0, [sp, #20]
 800bbe2:	4632      	mov	r2, r6
 800bbe4:	f7ff f9bc 	bl	800af60 <__lshift>
 800bbe8:	4681      	mov	r9, r0
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d0d8      	beq.n	800bba0 <_strtod_l+0x750>
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	dd08      	ble.n	800bc04 <_strtod_l+0x7b4>
 800bbf2:	4641      	mov	r1, r8
 800bbf4:	9805      	ldr	r0, [sp, #20]
 800bbf6:	463a      	mov	r2, r7
 800bbf8:	f7ff f9b2 	bl	800af60 <__lshift>
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f ae49 	beq.w	800b896 <_strtod_l+0x446>
 800bc04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc06:	9805      	ldr	r0, [sp, #20]
 800bc08:	464a      	mov	r2, r9
 800bc0a:	f7ff fa31 	bl	800b070 <__mdiff>
 800bc0e:	4604      	mov	r4, r0
 800bc10:	2800      	cmp	r0, #0
 800bc12:	f43f ae40 	beq.w	800b896 <_strtod_l+0x446>
 800bc16:	68c3      	ldr	r3, [r0, #12]
 800bc18:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60c3      	str	r3, [r0, #12]
 800bc1e:	4641      	mov	r1, r8
 800bc20:	f7ff fa0a 	bl	800b038 <__mcmp>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	da45      	bge.n	800bcb4 <_strtod_l+0x864>
 800bc28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc2a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc2e:	d16b      	bne.n	800bd08 <_strtod_l+0x8b8>
 800bc30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d167      	bne.n	800bd08 <_strtod_l+0x8b8>
 800bc38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc3c:	0d1b      	lsrs	r3, r3, #20
 800bc3e:	051b      	lsls	r3, r3, #20
 800bc40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc44:	d960      	bls.n	800bd08 <_strtod_l+0x8b8>
 800bc46:	6963      	ldr	r3, [r4, #20]
 800bc48:	b913      	cbnz	r3, 800bc50 <_strtod_l+0x800>
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	dd5b      	ble.n	800bd08 <_strtod_l+0x8b8>
 800bc50:	4621      	mov	r1, r4
 800bc52:	2201      	movs	r2, #1
 800bc54:	9805      	ldr	r0, [sp, #20]
 800bc56:	f7ff f983 	bl	800af60 <__lshift>
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	f7ff f9eb 	bl	800b038 <__mcmp>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	dd50      	ble.n	800bd08 <_strtod_l+0x8b8>
 800bc66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc6a:	9a08      	ldr	r2, [sp, #32]
 800bc6c:	0d1b      	lsrs	r3, r3, #20
 800bc6e:	051b      	lsls	r3, r3, #20
 800bc70:	2a00      	cmp	r2, #0
 800bc72:	d06a      	beq.n	800bd4a <_strtod_l+0x8fa>
 800bc74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc78:	d867      	bhi.n	800bd4a <_strtod_l+0x8fa>
 800bc7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc7e:	f67f ae9d 	bls.w	800b9bc <_strtod_l+0x56c>
 800bc82:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <_strtod_l+0x85c>)
 800bc84:	4650      	mov	r0, sl
 800bc86:	4659      	mov	r1, fp
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f7f4 fcbd 	bl	8000608 <__aeabi_dmul>
 800bc8e:	4b08      	ldr	r3, [pc, #32]	@ (800bcb0 <_strtod_l+0x860>)
 800bc90:	400b      	ands	r3, r1
 800bc92:	4682      	mov	sl, r0
 800bc94:	468b      	mov	fp, r1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f47f ae08 	bne.w	800b8ac <_strtod_l+0x45c>
 800bc9c:	9a05      	ldr	r2, [sp, #20]
 800bc9e:	2322      	movs	r3, #34	@ 0x22
 800bca0:	6013      	str	r3, [r2, #0]
 800bca2:	e603      	b.n	800b8ac <_strtod_l+0x45c>
 800bca4:	0800d738 	.word	0x0800d738
 800bca8:	fffffc02 	.word	0xfffffc02
 800bcac:	39500000 	.word	0x39500000
 800bcb0:	7ff00000 	.word	0x7ff00000
 800bcb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bcb8:	d165      	bne.n	800bd86 <_strtod_l+0x936>
 800bcba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc0:	b35a      	cbz	r2, 800bd1a <_strtod_l+0x8ca>
 800bcc2:	4a9f      	ldr	r2, [pc, #636]	@ (800bf40 <_strtod_l+0xaf0>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d12b      	bne.n	800bd20 <_strtod_l+0x8d0>
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	4651      	mov	r1, sl
 800bccc:	b303      	cbz	r3, 800bd10 <_strtod_l+0x8c0>
 800bcce:	4b9d      	ldr	r3, [pc, #628]	@ (800bf44 <_strtod_l+0xaf4>)
 800bcd0:	465a      	mov	r2, fp
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcdc:	d81b      	bhi.n	800bd16 <_strtod_l+0x8c6>
 800bcde:	0d1b      	lsrs	r3, r3, #20
 800bce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bce4:	fa02 f303 	lsl.w	r3, r2, r3
 800bce8:	4299      	cmp	r1, r3
 800bcea:	d119      	bne.n	800bd20 <_strtod_l+0x8d0>
 800bcec:	4b96      	ldr	r3, [pc, #600]	@ (800bf48 <_strtod_l+0xaf8>)
 800bcee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d102      	bne.n	800bcfa <_strtod_l+0x8aa>
 800bcf4:	3101      	adds	r1, #1
 800bcf6:	f43f adce 	beq.w	800b896 <_strtod_l+0x446>
 800bcfa:	4b92      	ldr	r3, [pc, #584]	@ (800bf44 <_strtod_l+0xaf4>)
 800bcfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcfe:	401a      	ands	r2, r3
 800bd00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd04:	f04f 0a00 	mov.w	sl, #0
 800bd08:	9b08      	ldr	r3, [sp, #32]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1b9      	bne.n	800bc82 <_strtod_l+0x832>
 800bd0e:	e5cd      	b.n	800b8ac <_strtod_l+0x45c>
 800bd10:	f04f 33ff 	mov.w	r3, #4294967295
 800bd14:	e7e8      	b.n	800bce8 <_strtod_l+0x898>
 800bd16:	4613      	mov	r3, r2
 800bd18:	e7e6      	b.n	800bce8 <_strtod_l+0x898>
 800bd1a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd1e:	d0a2      	beq.n	800bc66 <_strtod_l+0x816>
 800bd20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd22:	b1db      	cbz	r3, 800bd5c <_strtod_l+0x90c>
 800bd24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd26:	4213      	tst	r3, r2
 800bd28:	d0ee      	beq.n	800bd08 <_strtod_l+0x8b8>
 800bd2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd2c:	9a08      	ldr	r2, [sp, #32]
 800bd2e:	4650      	mov	r0, sl
 800bd30:	4659      	mov	r1, fp
 800bd32:	b1bb      	cbz	r3, 800bd64 <_strtod_l+0x914>
 800bd34:	f7ff fb6e 	bl	800b414 <sulp>
 800bd38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd3c:	ec53 2b10 	vmov	r2, r3, d0
 800bd40:	f7f4 faac 	bl	800029c <__adddf3>
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	e7de      	b.n	800bd08 <_strtod_l+0x8b8>
 800bd4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd56:	f04f 3aff 	mov.w	sl, #4294967295
 800bd5a:	e7d5      	b.n	800bd08 <_strtod_l+0x8b8>
 800bd5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd5e:	ea13 0f0a 	tst.w	r3, sl
 800bd62:	e7e1      	b.n	800bd28 <_strtod_l+0x8d8>
 800bd64:	f7ff fb56 	bl	800b414 <sulp>
 800bd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd6c:	ec53 2b10 	vmov	r2, r3, d0
 800bd70:	f7f4 fa92 	bl	8000298 <__aeabi_dsub>
 800bd74:	2200      	movs	r2, #0
 800bd76:	2300      	movs	r3, #0
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	f7f4 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d0c1      	beq.n	800bd08 <_strtod_l+0x8b8>
 800bd84:	e61a      	b.n	800b9bc <_strtod_l+0x56c>
 800bd86:	4641      	mov	r1, r8
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7ff facd 	bl	800b328 <__ratio>
 800bd8e:	ec57 6b10 	vmov	r6, r7, d0
 800bd92:	2200      	movs	r2, #0
 800bd94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	f7f4 feb0 	bl	8000b00 <__aeabi_dcmple>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d06f      	beq.n	800be84 <_strtod_l+0xa34>
 800bda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d17a      	bne.n	800bea0 <_strtod_l+0xa50>
 800bdaa:	f1ba 0f00 	cmp.w	sl, #0
 800bdae:	d158      	bne.n	800be62 <_strtod_l+0xa12>
 800bdb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d15a      	bne.n	800be70 <_strtod_l+0xa20>
 800bdba:	4b64      	ldr	r3, [pc, #400]	@ (800bf4c <_strtod_l+0xafc>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fe93 	bl	8000aec <__aeabi_dcmplt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d159      	bne.n	800be7e <_strtod_l+0xa2e>
 800bdca:	4630      	mov	r0, r6
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4b60      	ldr	r3, [pc, #384]	@ (800bf50 <_strtod_l+0xb00>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f7f4 fc19 	bl	8000608 <__aeabi_dmul>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdde:	9606      	str	r6, [sp, #24]
 800bde0:	9307      	str	r3, [sp, #28]
 800bde2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde6:	4d57      	ldr	r5, [pc, #348]	@ (800bf44 <_strtod_l+0xaf4>)
 800bde8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdee:	401d      	ands	r5, r3
 800bdf0:	4b58      	ldr	r3, [pc, #352]	@ (800bf54 <_strtod_l+0xb04>)
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	f040 80b2 	bne.w	800bf5c <_strtod_l+0xb0c>
 800bdf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bdfe:	ec4b ab10 	vmov	d0, sl, fp
 800be02:	f7ff f9c9 	bl	800b198 <__ulp>
 800be06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be0a:	ec51 0b10 	vmov	r0, r1, d0
 800be0e:	f7f4 fbfb 	bl	8000608 <__aeabi_dmul>
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	f7f4 fa41 	bl	800029c <__adddf3>
 800be1a:	460b      	mov	r3, r1
 800be1c:	4949      	ldr	r1, [pc, #292]	@ (800bf44 <_strtod_l+0xaf4>)
 800be1e:	4a4e      	ldr	r2, [pc, #312]	@ (800bf58 <_strtod_l+0xb08>)
 800be20:	4019      	ands	r1, r3
 800be22:	4291      	cmp	r1, r2
 800be24:	4682      	mov	sl, r0
 800be26:	d942      	bls.n	800beae <_strtod_l+0xa5e>
 800be28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be2a:	4b47      	ldr	r3, [pc, #284]	@ (800bf48 <_strtod_l+0xaf8>)
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d103      	bne.n	800be38 <_strtod_l+0x9e8>
 800be30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be32:	3301      	adds	r3, #1
 800be34:	f43f ad2f 	beq.w	800b896 <_strtod_l+0x446>
 800be38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bf48 <_strtod_l+0xaf8>
 800be3c:	f04f 3aff 	mov.w	sl, #4294967295
 800be40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be42:	9805      	ldr	r0, [sp, #20]
 800be44:	f7fe fe7c 	bl	800ab40 <_Bfree>
 800be48:	9805      	ldr	r0, [sp, #20]
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7fe fe78 	bl	800ab40 <_Bfree>
 800be50:	9805      	ldr	r0, [sp, #20]
 800be52:	4641      	mov	r1, r8
 800be54:	f7fe fe74 	bl	800ab40 <_Bfree>
 800be58:	9805      	ldr	r0, [sp, #20]
 800be5a:	4621      	mov	r1, r4
 800be5c:	f7fe fe70 	bl	800ab40 <_Bfree>
 800be60:	e619      	b.n	800ba96 <_strtod_l+0x646>
 800be62:	f1ba 0f01 	cmp.w	sl, #1
 800be66:	d103      	bne.n	800be70 <_strtod_l+0xa20>
 800be68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f43f ada6 	beq.w	800b9bc <_strtod_l+0x56c>
 800be70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bf20 <_strtod_l+0xad0>
 800be74:	4f35      	ldr	r7, [pc, #212]	@ (800bf4c <_strtod_l+0xafc>)
 800be76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be7a:	2600      	movs	r6, #0
 800be7c:	e7b1      	b.n	800bde2 <_strtod_l+0x992>
 800be7e:	4f34      	ldr	r7, [pc, #208]	@ (800bf50 <_strtod_l+0xb00>)
 800be80:	2600      	movs	r6, #0
 800be82:	e7aa      	b.n	800bdda <_strtod_l+0x98a>
 800be84:	4b32      	ldr	r3, [pc, #200]	@ (800bf50 <_strtod_l+0xb00>)
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	2200      	movs	r2, #0
 800be8c:	f7f4 fbbc 	bl	8000608 <__aeabi_dmul>
 800be90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be92:	4606      	mov	r6, r0
 800be94:	460f      	mov	r7, r1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d09f      	beq.n	800bdda <_strtod_l+0x98a>
 800be9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be9e:	e7a0      	b.n	800bde2 <_strtod_l+0x992>
 800bea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf28 <_strtod_l+0xad8>
 800bea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bea8:	ec57 6b17 	vmov	r6, r7, d7
 800beac:	e799      	b.n	800bde2 <_strtod_l+0x992>
 800beae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1c1      	bne.n	800be40 <_strtod_l+0x9f0>
 800bebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bec0:	0d1b      	lsrs	r3, r3, #20
 800bec2:	051b      	lsls	r3, r3, #20
 800bec4:	429d      	cmp	r5, r3
 800bec6:	d1bb      	bne.n	800be40 <_strtod_l+0x9f0>
 800bec8:	4630      	mov	r0, r6
 800beca:	4639      	mov	r1, r7
 800becc:	f7f4 fefc 	bl	8000cc8 <__aeabi_d2lz>
 800bed0:	f7f4 fb6c 	bl	80005ac <__aeabi_l2d>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f4 f9dc 	bl	8000298 <__aeabi_dsub>
 800bee0:	460b      	mov	r3, r1
 800bee2:	4602      	mov	r2, r0
 800bee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	ea46 060a 	orr.w	r6, r6, sl
 800bef2:	431e      	orrs	r6, r3
 800bef4:	d06f      	beq.n	800bfd6 <_strtod_l+0xb86>
 800bef6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf30 <_strtod_l+0xae0>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 fdf6 	bl	8000aec <__aeabi_dcmplt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f47f acd3 	bne.w	800b8ac <_strtod_l+0x45c>
 800bf06:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf38 <_strtod_l+0xae8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf10:	f7f4 fe0a 	bl	8000b28 <__aeabi_dcmpgt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d093      	beq.n	800be40 <_strtod_l+0x9f0>
 800bf18:	e4c8      	b.n	800b8ac <_strtod_l+0x45c>
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w
 800bf20:	00000000 	.word	0x00000000
 800bf24:	bff00000 	.word	0xbff00000
 800bf28:	00000000 	.word	0x00000000
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	94a03595 	.word	0x94a03595
 800bf34:	3fdfffff 	.word	0x3fdfffff
 800bf38:	35afe535 	.word	0x35afe535
 800bf3c:	3fe00000 	.word	0x3fe00000
 800bf40:	000fffff 	.word	0x000fffff
 800bf44:	7ff00000 	.word	0x7ff00000
 800bf48:	7fefffff 	.word	0x7fefffff
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	7fe00000 	.word	0x7fe00000
 800bf58:	7c9fffff 	.word	0x7c9fffff
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	b323      	cbz	r3, 800bfaa <_strtod_l+0xb5a>
 800bf60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf64:	d821      	bhi.n	800bfaa <_strtod_l+0xb5a>
 800bf66:	a328      	add	r3, pc, #160	@ (adr r3, 800c008 <_strtod_l+0xbb8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	4639      	mov	r1, r7
 800bf70:	f7f4 fdc6 	bl	8000b00 <__aeabi_dcmple>
 800bf74:	b1a0      	cbz	r0, 800bfa0 <_strtod_l+0xb50>
 800bf76:	4639      	mov	r1, r7
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7f4 fe1d 	bl	8000bb8 <__aeabi_d2uiz>
 800bf7e:	2801      	cmp	r0, #1
 800bf80:	bf38      	it	cc
 800bf82:	2001      	movcc	r0, #1
 800bf84:	f7f4 fac6 	bl	8000514 <__aeabi_ui2d>
 800bf88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	b9fb      	cbnz	r3, 800bfd0 <_strtod_l+0xb80>
 800bf90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf94:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf96:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bfa6:	1b5b      	subs	r3, r3, r5
 800bfa8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bfae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bfb2:	f7ff f8f1 	bl	800b198 <__ulp>
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	ec53 2b10 	vmov	r2, r3, d0
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	f7f4 fb23 	bl	8000608 <__aeabi_dmul>
 800bfc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bfc6:	f7f4 f969 	bl	800029c <__adddf3>
 800bfca:	4682      	mov	sl, r0
 800bfcc:	468b      	mov	fp, r1
 800bfce:	e770      	b.n	800beb2 <_strtod_l+0xa62>
 800bfd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bfd4:	e7e0      	b.n	800bf98 <_strtod_l+0xb48>
 800bfd6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c010 <_strtod_l+0xbc0>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 fd86 	bl	8000aec <__aeabi_dcmplt>
 800bfe0:	e798      	b.n	800bf14 <_strtod_l+0xac4>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bfe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	f7ff ba6d 	b.w	800b4ca <_strtod_l+0x7a>
 800bff0:	2a65      	cmp	r2, #101	@ 0x65
 800bff2:	f43f ab68 	beq.w	800b6c6 <_strtod_l+0x276>
 800bff6:	2a45      	cmp	r2, #69	@ 0x45
 800bff8:	f43f ab65 	beq.w	800b6c6 <_strtod_l+0x276>
 800bffc:	2301      	movs	r3, #1
 800bffe:	f7ff bba0 	b.w	800b742 <_strtod_l+0x2f2>
 800c002:	bf00      	nop
 800c004:	f3af 8000 	nop.w
 800c008:	ffc00000 	.word	0xffc00000
 800c00c:	41dfffff 	.word	0x41dfffff
 800c010:	94a03595 	.word	0x94a03595
 800c014:	3fcfffff 	.word	0x3fcfffff

0800c018 <_strtod_r>:
 800c018:	4b01      	ldr	r3, [pc, #4]	@ (800c020 <_strtod_r+0x8>)
 800c01a:	f7ff ba19 	b.w	800b450 <_strtod_l>
 800c01e:	bf00      	nop
 800c020:	2000006c 	.word	0x2000006c

0800c024 <_strtol_l.isra.0>:
 800c024:	2b24      	cmp	r3, #36	@ 0x24
 800c026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02a:	4686      	mov	lr, r0
 800c02c:	4690      	mov	r8, r2
 800c02e:	d801      	bhi.n	800c034 <_strtol_l.isra.0+0x10>
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <_strtol_l.isra.0+0x1e>
 800c034:	f7fd fdaa 	bl	8009b8c <__errno>
 800c038:	2316      	movs	r3, #22
 800c03a:	6003      	str	r3, [r0, #0]
 800c03c:	2000      	movs	r0, #0
 800c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c042:	4834      	ldr	r0, [pc, #208]	@ (800c114 <_strtol_l.isra.0+0xf0>)
 800c044:	460d      	mov	r5, r1
 800c046:	462a      	mov	r2, r5
 800c048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c04c:	5d06      	ldrb	r6, [r0, r4]
 800c04e:	f016 0608 	ands.w	r6, r6, #8
 800c052:	d1f8      	bne.n	800c046 <_strtol_l.isra.0+0x22>
 800c054:	2c2d      	cmp	r4, #45	@ 0x2d
 800c056:	d110      	bne.n	800c07a <_strtol_l.isra.0+0x56>
 800c058:	782c      	ldrb	r4, [r5, #0]
 800c05a:	2601      	movs	r6, #1
 800c05c:	1c95      	adds	r5, r2, #2
 800c05e:	f033 0210 	bics.w	r2, r3, #16
 800c062:	d115      	bne.n	800c090 <_strtol_l.isra.0+0x6c>
 800c064:	2c30      	cmp	r4, #48	@ 0x30
 800c066:	d10d      	bne.n	800c084 <_strtol_l.isra.0+0x60>
 800c068:	782a      	ldrb	r2, [r5, #0]
 800c06a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c06e:	2a58      	cmp	r2, #88	@ 0x58
 800c070:	d108      	bne.n	800c084 <_strtol_l.isra.0+0x60>
 800c072:	786c      	ldrb	r4, [r5, #1]
 800c074:	3502      	adds	r5, #2
 800c076:	2310      	movs	r3, #16
 800c078:	e00a      	b.n	800c090 <_strtol_l.isra.0+0x6c>
 800c07a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c07c:	bf04      	itt	eq
 800c07e:	782c      	ldrbeq	r4, [r5, #0]
 800c080:	1c95      	addeq	r5, r2, #2
 800c082:	e7ec      	b.n	800c05e <_strtol_l.isra.0+0x3a>
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1f6      	bne.n	800c076 <_strtol_l.isra.0+0x52>
 800c088:	2c30      	cmp	r4, #48	@ 0x30
 800c08a:	bf14      	ite	ne
 800c08c:	230a      	movne	r3, #10
 800c08e:	2308      	moveq	r3, #8
 800c090:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c094:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c098:	2200      	movs	r2, #0
 800c09a:	fbbc f9f3 	udiv	r9, ip, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c0a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c0a8:	2f09      	cmp	r7, #9
 800c0aa:	d80f      	bhi.n	800c0cc <_strtol_l.isra.0+0xa8>
 800c0ac:	463c      	mov	r4, r7
 800c0ae:	42a3      	cmp	r3, r4
 800c0b0:	dd1b      	ble.n	800c0ea <_strtol_l.isra.0+0xc6>
 800c0b2:	1c57      	adds	r7, r2, #1
 800c0b4:	d007      	beq.n	800c0c6 <_strtol_l.isra.0+0xa2>
 800c0b6:	4581      	cmp	r9, r0
 800c0b8:	d314      	bcc.n	800c0e4 <_strtol_l.isra.0+0xc0>
 800c0ba:	d101      	bne.n	800c0c0 <_strtol_l.isra.0+0x9c>
 800c0bc:	45a2      	cmp	sl, r4
 800c0be:	db11      	blt.n	800c0e4 <_strtol_l.isra.0+0xc0>
 800c0c0:	fb00 4003 	mla	r0, r0, r3, r4
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ca:	e7eb      	b.n	800c0a4 <_strtol_l.isra.0+0x80>
 800c0cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c0d0:	2f19      	cmp	r7, #25
 800c0d2:	d801      	bhi.n	800c0d8 <_strtol_l.isra.0+0xb4>
 800c0d4:	3c37      	subs	r4, #55	@ 0x37
 800c0d6:	e7ea      	b.n	800c0ae <_strtol_l.isra.0+0x8a>
 800c0d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0dc:	2f19      	cmp	r7, #25
 800c0de:	d804      	bhi.n	800c0ea <_strtol_l.isra.0+0xc6>
 800c0e0:	3c57      	subs	r4, #87	@ 0x57
 800c0e2:	e7e4      	b.n	800c0ae <_strtol_l.isra.0+0x8a>
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	e7ed      	b.n	800c0c6 <_strtol_l.isra.0+0xa2>
 800c0ea:	1c53      	adds	r3, r2, #1
 800c0ec:	d108      	bne.n	800c100 <_strtol_l.isra.0+0xdc>
 800c0ee:	2322      	movs	r3, #34	@ 0x22
 800c0f0:	f8ce 3000 	str.w	r3, [lr]
 800c0f4:	4660      	mov	r0, ip
 800c0f6:	f1b8 0f00 	cmp.w	r8, #0
 800c0fa:	d0a0      	beq.n	800c03e <_strtol_l.isra.0+0x1a>
 800c0fc:	1e69      	subs	r1, r5, #1
 800c0fe:	e006      	b.n	800c10e <_strtol_l.isra.0+0xea>
 800c100:	b106      	cbz	r6, 800c104 <_strtol_l.isra.0+0xe0>
 800c102:	4240      	negs	r0, r0
 800c104:	f1b8 0f00 	cmp.w	r8, #0
 800c108:	d099      	beq.n	800c03e <_strtol_l.isra.0+0x1a>
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	d1f6      	bne.n	800c0fc <_strtol_l.isra.0+0xd8>
 800c10e:	f8c8 1000 	str.w	r1, [r8]
 800c112:	e794      	b.n	800c03e <_strtol_l.isra.0+0x1a>
 800c114:	0800d761 	.word	0x0800d761

0800c118 <_strtol_r>:
 800c118:	f7ff bf84 	b.w	800c024 <_strtol_l.isra.0>

0800c11c <__ssputs_r>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	688e      	ldr	r6, [r1, #8]
 800c122:	461f      	mov	r7, r3
 800c124:	42be      	cmp	r6, r7
 800c126:	680b      	ldr	r3, [r1, #0]
 800c128:	4682      	mov	sl, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4690      	mov	r8, r2
 800c12e:	d82d      	bhi.n	800c18c <__ssputs_r+0x70>
 800c130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c138:	d026      	beq.n	800c188 <__ssputs_r+0x6c>
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	6909      	ldr	r1, [r1, #16]
 800c13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c142:	eba3 0901 	sub.w	r9, r3, r1
 800c146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c14a:	1c7b      	adds	r3, r7, #1
 800c14c:	444b      	add	r3, r9
 800c14e:	106d      	asrs	r5, r5, #1
 800c150:	429d      	cmp	r5, r3
 800c152:	bf38      	it	cc
 800c154:	461d      	movcc	r5, r3
 800c156:	0553      	lsls	r3, r2, #21
 800c158:	d527      	bpl.n	800c1aa <__ssputs_r+0x8e>
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7fe fc24 	bl	800a9a8 <_malloc_r>
 800c160:	4606      	mov	r6, r0
 800c162:	b360      	cbz	r0, 800c1be <__ssputs_r+0xa2>
 800c164:	6921      	ldr	r1, [r4, #16]
 800c166:	464a      	mov	r2, r9
 800c168:	f7fd fd3d 	bl	8009be6 <memcpy>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	6126      	str	r6, [r4, #16]
 800c17a:	6165      	str	r5, [r4, #20]
 800c17c:	444e      	add	r6, r9
 800c17e:	eba5 0509 	sub.w	r5, r5, r9
 800c182:	6026      	str	r6, [r4, #0]
 800c184:	60a5      	str	r5, [r4, #8]
 800c186:	463e      	mov	r6, r7
 800c188:	42be      	cmp	r6, r7
 800c18a:	d900      	bls.n	800c18e <__ssputs_r+0x72>
 800c18c:	463e      	mov	r6, r7
 800c18e:	6820      	ldr	r0, [r4, #0]
 800c190:	4632      	mov	r2, r6
 800c192:	4641      	mov	r1, r8
 800c194:	f000 f9c6 	bl	800c524 <memmove>
 800c198:	68a3      	ldr	r3, [r4, #8]
 800c19a:	1b9b      	subs	r3, r3, r6
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	4433      	add	r3, r6
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	f000 fd7d 	bl	800ccaa <_realloc_r>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d1e0      	bne.n	800c178 <__ssputs_r+0x5c>
 800c1b6:	6921      	ldr	r1, [r4, #16]
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	f7fe fb81 	bl	800a8c0 <_free_r>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f8ca 3000 	str.w	r3, [sl]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e7e9      	b.n	800c1a6 <__ssputs_r+0x8a>
	...

0800c1d4 <_svfiprintf_r>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	4698      	mov	r8, r3
 800c1da:	898b      	ldrh	r3, [r1, #12]
 800c1dc:	061b      	lsls	r3, r3, #24
 800c1de:	b09d      	sub	sp, #116	@ 0x74
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	d510      	bpl.n	800c20a <_svfiprintf_r+0x36>
 800c1e8:	690b      	ldr	r3, [r1, #16]
 800c1ea:	b973      	cbnz	r3, 800c20a <_svfiprintf_r+0x36>
 800c1ec:	2140      	movs	r1, #64	@ 0x40
 800c1ee:	f7fe fbdb 	bl	800a9a8 <_malloc_r>
 800c1f2:	6028      	str	r0, [r5, #0]
 800c1f4:	6128      	str	r0, [r5, #16]
 800c1f6:	b930      	cbnz	r0, 800c206 <_svfiprintf_r+0x32>
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	b01d      	add	sp, #116	@ 0x74
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	2340      	movs	r3, #64	@ 0x40
 800c208:	616b      	str	r3, [r5, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20e:	2320      	movs	r3, #32
 800c210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c214:	f8cd 800c 	str.w	r8, [sp, #12]
 800c218:	2330      	movs	r3, #48	@ 0x30
 800c21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3b8 <_svfiprintf_r+0x1e4>
 800c21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c222:	f04f 0901 	mov.w	r9, #1
 800c226:	4623      	mov	r3, r4
 800c228:	469a      	mov	sl, r3
 800c22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22e:	b10a      	cbz	r2, 800c234 <_svfiprintf_r+0x60>
 800c230:	2a25      	cmp	r2, #37	@ 0x25
 800c232:	d1f9      	bne.n	800c228 <_svfiprintf_r+0x54>
 800c234:	ebba 0b04 	subs.w	fp, sl, r4
 800c238:	d00b      	beq.n	800c252 <_svfiprintf_r+0x7e>
 800c23a:	465b      	mov	r3, fp
 800c23c:	4622      	mov	r2, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ff6b 	bl	800c11c <__ssputs_r>
 800c246:	3001      	adds	r0, #1
 800c248:	f000 80a7 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24e:	445a      	add	r2, fp
 800c250:	9209      	str	r2, [sp, #36]	@ 0x24
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 809f 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c266:	f10a 0a01 	add.w	sl, sl, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c272:	931a      	str	r3, [sp, #104]	@ 0x68
 800c274:	4654      	mov	r4, sl
 800c276:	2205      	movs	r2, #5
 800c278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27c:	484e      	ldr	r0, [pc, #312]	@ (800c3b8 <_svfiprintf_r+0x1e4>)
 800c27e:	f7f3 ffaf 	bl	80001e0 <memchr>
 800c282:	9a04      	ldr	r2, [sp, #16]
 800c284:	b9d8      	cbnz	r0, 800c2be <_svfiprintf_r+0xea>
 800c286:	06d0      	lsls	r0, r2, #27
 800c288:	bf44      	itt	mi
 800c28a:	2320      	movmi	r3, #32
 800c28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c290:	0711      	lsls	r1, r2, #28
 800c292:	bf44      	itt	mi
 800c294:	232b      	movmi	r3, #43	@ 0x2b
 800c296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c29a:	f89a 3000 	ldrb.w	r3, [sl]
 800c29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2a0:	d015      	beq.n	800c2ce <_svfiprintf_r+0xfa>
 800c2a2:	9a07      	ldr	r2, [sp, #28]
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f04f 0c0a 	mov.w	ip, #10
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b2:	3b30      	subs	r3, #48	@ 0x30
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d94b      	bls.n	800c350 <_svfiprintf_r+0x17c>
 800c2b8:	b1b0      	cbz	r0, 800c2e8 <_svfiprintf_r+0x114>
 800c2ba:	9207      	str	r2, [sp, #28]
 800c2bc:	e014      	b.n	800c2e8 <_svfiprintf_r+0x114>
 800c2be:	eba0 0308 	sub.w	r3, r0, r8
 800c2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	46a2      	mov	sl, r4
 800c2cc:	e7d2      	b.n	800c274 <_svfiprintf_r+0xa0>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d19      	adds	r1, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9103      	str	r1, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfbb      	ittet	lt
 800c2da:	425b      	neglt	r3, r3
 800c2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e0:	9307      	strge	r3, [sp, #28]
 800c2e2:	9307      	strlt	r3, [sp, #28]
 800c2e4:	bfb8      	it	lt
 800c2e6:	9204      	strlt	r2, [sp, #16]
 800c2e8:	7823      	ldrb	r3, [r4, #0]
 800c2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ec:	d10a      	bne.n	800c304 <_svfiprintf_r+0x130>
 800c2ee:	7863      	ldrb	r3, [r4, #1]
 800c2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f2:	d132      	bne.n	800c35a <_svfiprintf_r+0x186>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	1d1a      	adds	r2, r3, #4
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	9203      	str	r2, [sp, #12]
 800c2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c300:	3402      	adds	r4, #2
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3c8 <_svfiprintf_r+0x1f4>
 800c308:	7821      	ldrb	r1, [r4, #0]
 800c30a:	2203      	movs	r2, #3
 800c30c:	4650      	mov	r0, sl
 800c30e:	f7f3 ff67 	bl	80001e0 <memchr>
 800c312:	b138      	cbz	r0, 800c324 <_svfiprintf_r+0x150>
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	eba0 000a 	sub.w	r0, r0, sl
 800c31a:	2240      	movs	r2, #64	@ 0x40
 800c31c:	4082      	lsls	r2, r0
 800c31e:	4313      	orrs	r3, r2
 800c320:	3401      	adds	r4, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c328:	4824      	ldr	r0, [pc, #144]	@ (800c3bc <_svfiprintf_r+0x1e8>)
 800c32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c32e:	2206      	movs	r2, #6
 800c330:	f7f3 ff56 	bl	80001e0 <memchr>
 800c334:	2800      	cmp	r0, #0
 800c336:	d036      	beq.n	800c3a6 <_svfiprintf_r+0x1d2>
 800c338:	4b21      	ldr	r3, [pc, #132]	@ (800c3c0 <_svfiprintf_r+0x1ec>)
 800c33a:	bb1b      	cbnz	r3, 800c384 <_svfiprintf_r+0x1b0>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	3307      	adds	r3, #7
 800c340:	f023 0307 	bic.w	r3, r3, #7
 800c344:	3308      	adds	r3, #8
 800c346:	9303      	str	r3, [sp, #12]
 800c348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34a:	4433      	add	r3, r6
 800c34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34e:	e76a      	b.n	800c226 <_svfiprintf_r+0x52>
 800c350:	fb0c 3202 	mla	r2, ip, r2, r3
 800c354:	460c      	mov	r4, r1
 800c356:	2001      	movs	r0, #1
 800c358:	e7a8      	b.n	800c2ac <_svfiprintf_r+0xd8>
 800c35a:	2300      	movs	r3, #0
 800c35c:	3401      	adds	r4, #1
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	4619      	mov	r1, r3
 800c362:	f04f 0c0a 	mov.w	ip, #10
 800c366:	4620      	mov	r0, r4
 800c368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36c:	3a30      	subs	r2, #48	@ 0x30
 800c36e:	2a09      	cmp	r2, #9
 800c370:	d903      	bls.n	800c37a <_svfiprintf_r+0x1a6>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0c6      	beq.n	800c304 <_svfiprintf_r+0x130>
 800c376:	9105      	str	r1, [sp, #20]
 800c378:	e7c4      	b.n	800c304 <_svfiprintf_r+0x130>
 800c37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37e:	4604      	mov	r4, r0
 800c380:	2301      	movs	r3, #1
 800c382:	e7f0      	b.n	800c366 <_svfiprintf_r+0x192>
 800c384:	ab03      	add	r3, sp, #12
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	462a      	mov	r2, r5
 800c38a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c4 <_svfiprintf_r+0x1f0>)
 800c38c:	a904      	add	r1, sp, #16
 800c38e:	4638      	mov	r0, r7
 800c390:	f7fc fc2a 	bl	8008be8 <_printf_float>
 800c394:	1c42      	adds	r2, r0, #1
 800c396:	4606      	mov	r6, r0
 800c398:	d1d6      	bne.n	800c348 <_svfiprintf_r+0x174>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	065b      	lsls	r3, r3, #25
 800c39e:	f53f af2d 	bmi.w	800c1fc <_svfiprintf_r+0x28>
 800c3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3a4:	e72c      	b.n	800c200 <_svfiprintf_r+0x2c>
 800c3a6:	ab03      	add	r3, sp, #12
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <_svfiprintf_r+0x1f0>)
 800c3ae:	a904      	add	r1, sp, #16
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7fc feb1 	bl	8009118 <_printf_i>
 800c3b6:	e7ed      	b.n	800c394 <_svfiprintf_r+0x1c0>
 800c3b8:	0800d559 	.word	0x0800d559
 800c3bc:	0800d563 	.word	0x0800d563
 800c3c0:	08008be9 	.word	0x08008be9
 800c3c4:	0800c11d 	.word	0x0800c11d
 800c3c8:	0800d55f 	.word	0x0800d55f

0800c3cc <__sflush_r>:
 800c3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	0716      	lsls	r6, r2, #28
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	460c      	mov	r4, r1
 800c3da:	d454      	bmi.n	800c486 <__sflush_r+0xba>
 800c3dc:	684b      	ldr	r3, [r1, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dc02      	bgt.n	800c3e8 <__sflush_r+0x1c>
 800c3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	dd48      	ble.n	800c47a <__sflush_r+0xae>
 800c3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3ea:	2e00      	cmp	r6, #0
 800c3ec:	d045      	beq.n	800c47a <__sflush_r+0xae>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3f4:	682f      	ldr	r7, [r5, #0]
 800c3f6:	6a21      	ldr	r1, [r4, #32]
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	d030      	beq.n	800c45e <__sflush_r+0x92>
 800c3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	0759      	lsls	r1, r3, #29
 800c402:	d505      	bpl.n	800c410 <__sflush_r+0x44>
 800c404:	6863      	ldr	r3, [r4, #4]
 800c406:	1ad2      	subs	r2, r2, r3
 800c408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c40a:	b10b      	cbz	r3, 800c410 <__sflush_r+0x44>
 800c40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c40e:	1ad2      	subs	r2, r2, r3
 800c410:	2300      	movs	r3, #0
 800c412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	4628      	mov	r0, r5
 800c418:	47b0      	blx	r6
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	d106      	bne.n	800c42e <__sflush_r+0x62>
 800c420:	6829      	ldr	r1, [r5, #0]
 800c422:	291d      	cmp	r1, #29
 800c424:	d82b      	bhi.n	800c47e <__sflush_r+0xb2>
 800c426:	4a2a      	ldr	r2, [pc, #168]	@ (800c4d0 <__sflush_r+0x104>)
 800c428:	40ca      	lsrs	r2, r1
 800c42a:	07d6      	lsls	r6, r2, #31
 800c42c:	d527      	bpl.n	800c47e <__sflush_r+0xb2>
 800c42e:	2200      	movs	r2, #0
 800c430:	6062      	str	r2, [r4, #4]
 800c432:	04d9      	lsls	r1, r3, #19
 800c434:	6922      	ldr	r2, [r4, #16]
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	d504      	bpl.n	800c444 <__sflush_r+0x78>
 800c43a:	1c42      	adds	r2, r0, #1
 800c43c:	d101      	bne.n	800c442 <__sflush_r+0x76>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	b903      	cbnz	r3, 800c444 <__sflush_r+0x78>
 800c442:	6560      	str	r0, [r4, #84]	@ 0x54
 800c444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c446:	602f      	str	r7, [r5, #0]
 800c448:	b1b9      	cbz	r1, 800c47a <__sflush_r+0xae>
 800c44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c44e:	4299      	cmp	r1, r3
 800c450:	d002      	beq.n	800c458 <__sflush_r+0x8c>
 800c452:	4628      	mov	r0, r5
 800c454:	f7fe fa34 	bl	800a8c0 <_free_r>
 800c458:	2300      	movs	r3, #0
 800c45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c45c:	e00d      	b.n	800c47a <__sflush_r+0xae>
 800c45e:	2301      	movs	r3, #1
 800c460:	4628      	mov	r0, r5
 800c462:	47b0      	blx	r6
 800c464:	4602      	mov	r2, r0
 800c466:	1c50      	adds	r0, r2, #1
 800c468:	d1c9      	bne.n	800c3fe <__sflush_r+0x32>
 800c46a:	682b      	ldr	r3, [r5, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d0c6      	beq.n	800c3fe <__sflush_r+0x32>
 800c470:	2b1d      	cmp	r3, #29
 800c472:	d001      	beq.n	800c478 <__sflush_r+0xac>
 800c474:	2b16      	cmp	r3, #22
 800c476:	d11e      	bne.n	800c4b6 <__sflush_r+0xea>
 800c478:	602f      	str	r7, [r5, #0]
 800c47a:	2000      	movs	r0, #0
 800c47c:	e022      	b.n	800c4c4 <__sflush_r+0xf8>
 800c47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c482:	b21b      	sxth	r3, r3
 800c484:	e01b      	b.n	800c4be <__sflush_r+0xf2>
 800c486:	690f      	ldr	r7, [r1, #16]
 800c488:	2f00      	cmp	r7, #0
 800c48a:	d0f6      	beq.n	800c47a <__sflush_r+0xae>
 800c48c:	0793      	lsls	r3, r2, #30
 800c48e:	680e      	ldr	r6, [r1, #0]
 800c490:	bf08      	it	eq
 800c492:	694b      	ldreq	r3, [r1, #20]
 800c494:	600f      	str	r7, [r1, #0]
 800c496:	bf18      	it	ne
 800c498:	2300      	movne	r3, #0
 800c49a:	eba6 0807 	sub.w	r8, r6, r7
 800c49e:	608b      	str	r3, [r1, #8]
 800c4a0:	f1b8 0f00 	cmp.w	r8, #0
 800c4a4:	dde9      	ble.n	800c47a <__sflush_r+0xae>
 800c4a6:	6a21      	ldr	r1, [r4, #32]
 800c4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4aa:	4643      	mov	r3, r8
 800c4ac:	463a      	mov	r2, r7
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	47b0      	blx	r6
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	dc08      	bgt.n	800c4c8 <__sflush_r+0xfc>
 800c4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c8:	4407      	add	r7, r0
 800c4ca:	eba8 0800 	sub.w	r8, r8, r0
 800c4ce:	e7e7      	b.n	800c4a0 <__sflush_r+0xd4>
 800c4d0:	20400001 	.word	0x20400001

0800c4d4 <_fflush_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	690b      	ldr	r3, [r1, #16]
 800c4d8:	4605      	mov	r5, r0
 800c4da:	460c      	mov	r4, r1
 800c4dc:	b913      	cbnz	r3, 800c4e4 <_fflush_r+0x10>
 800c4de:	2500      	movs	r5, #0
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	b118      	cbz	r0, 800c4ee <_fflush_r+0x1a>
 800c4e6:	6a03      	ldr	r3, [r0, #32]
 800c4e8:	b90b      	cbnz	r3, 800c4ee <_fflush_r+0x1a>
 800c4ea:	f7fd f9cd 	bl	8009888 <__sinit>
 800c4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0f3      	beq.n	800c4de <_fflush_r+0xa>
 800c4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4f8:	07d0      	lsls	r0, r2, #31
 800c4fa:	d404      	bmi.n	800c506 <_fflush_r+0x32>
 800c4fc:	0599      	lsls	r1, r3, #22
 800c4fe:	d402      	bmi.n	800c506 <_fflush_r+0x32>
 800c500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c502:	f7fd fb6e 	bl	8009be2 <__retarget_lock_acquire_recursive>
 800c506:	4628      	mov	r0, r5
 800c508:	4621      	mov	r1, r4
 800c50a:	f7ff ff5f 	bl	800c3cc <__sflush_r>
 800c50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c510:	07da      	lsls	r2, r3, #31
 800c512:	4605      	mov	r5, r0
 800c514:	d4e4      	bmi.n	800c4e0 <_fflush_r+0xc>
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	059b      	lsls	r3, r3, #22
 800c51a:	d4e1      	bmi.n	800c4e0 <_fflush_r+0xc>
 800c51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c51e:	f7fd fb61 	bl	8009be4 <__retarget_lock_release_recursive>
 800c522:	e7dd      	b.n	800c4e0 <_fflush_r+0xc>

0800c524 <memmove>:
 800c524:	4288      	cmp	r0, r1
 800c526:	b510      	push	{r4, lr}
 800c528:	eb01 0402 	add.w	r4, r1, r2
 800c52c:	d902      	bls.n	800c534 <memmove+0x10>
 800c52e:	4284      	cmp	r4, r0
 800c530:	4623      	mov	r3, r4
 800c532:	d807      	bhi.n	800c544 <memmove+0x20>
 800c534:	1e43      	subs	r3, r0, #1
 800c536:	42a1      	cmp	r1, r4
 800c538:	d008      	beq.n	800c54c <memmove+0x28>
 800c53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c542:	e7f8      	b.n	800c536 <memmove+0x12>
 800c544:	4402      	add	r2, r0
 800c546:	4601      	mov	r1, r0
 800c548:	428a      	cmp	r2, r1
 800c54a:	d100      	bne.n	800c54e <memmove+0x2a>
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c556:	e7f7      	b.n	800c548 <memmove+0x24>

0800c558 <strncmp>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	b16a      	cbz	r2, 800c578 <strncmp+0x20>
 800c55c:	3901      	subs	r1, #1
 800c55e:	1884      	adds	r4, r0, r2
 800c560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c568:	429a      	cmp	r2, r3
 800c56a:	d103      	bne.n	800c574 <strncmp+0x1c>
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d001      	beq.n	800c574 <strncmp+0x1c>
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1f5      	bne.n	800c560 <strncmp+0x8>
 800c574:	1ad0      	subs	r0, r2, r3
 800c576:	bd10      	pop	{r4, pc}
 800c578:	4610      	mov	r0, r2
 800c57a:	e7fc      	b.n	800c576 <strncmp+0x1e>

0800c57c <_sbrk_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d06      	ldr	r5, [pc, #24]	@ (800c598 <_sbrk_r+0x1c>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	602b      	str	r3, [r5, #0]
 800c588:	f7f5 fde4 	bl	8002154 <_sbrk>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_sbrk_r+0x1a>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_sbrk_r+0x1a>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	20004efc 	.word	0x20004efc
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <nan>:
 800c5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c5a8 <nan+0x8>
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	00000000 	.word	0x00000000
 800c5ac:	7ff80000 	.word	0x7ff80000

0800c5b0 <__assert_func>:
 800c5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5b2:	4614      	mov	r4, r2
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	4b09      	ldr	r3, [pc, #36]	@ (800c5dc <__assert_func+0x2c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	68d8      	ldr	r0, [r3, #12]
 800c5be:	b14c      	cbz	r4, 800c5d4 <__assert_func+0x24>
 800c5c0:	4b07      	ldr	r3, [pc, #28]	@ (800c5e0 <__assert_func+0x30>)
 800c5c2:	9100      	str	r1, [sp, #0]
 800c5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5c8:	4906      	ldr	r1, [pc, #24]	@ (800c5e4 <__assert_func+0x34>)
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	f000 fba8 	bl	800cd20 <fiprintf>
 800c5d0:	f000 fbb8 	bl	800cd44 <abort>
 800c5d4:	4b04      	ldr	r3, [pc, #16]	@ (800c5e8 <__assert_func+0x38>)
 800c5d6:	461c      	mov	r4, r3
 800c5d8:	e7f3      	b.n	800c5c2 <__assert_func+0x12>
 800c5da:	bf00      	nop
 800c5dc:	2000001c 	.word	0x2000001c
 800c5e0:	0800d572 	.word	0x0800d572
 800c5e4:	0800d57f 	.word	0x0800d57f
 800c5e8:	0800d5ad 	.word	0x0800d5ad

0800c5ec <_calloc_r>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c5f2:	b934      	cbnz	r4, 800c602 <_calloc_r+0x16>
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7fe f9d7 	bl	800a9a8 <_malloc_r>
 800c5fa:	4606      	mov	r6, r0
 800c5fc:	b928      	cbnz	r0, 800c60a <_calloc_r+0x1e>
 800c5fe:	4630      	mov	r0, r6
 800c600:	bd70      	pop	{r4, r5, r6, pc}
 800c602:	220c      	movs	r2, #12
 800c604:	6002      	str	r2, [r0, #0]
 800c606:	2600      	movs	r6, #0
 800c608:	e7f9      	b.n	800c5fe <_calloc_r+0x12>
 800c60a:	462a      	mov	r2, r5
 800c60c:	4621      	mov	r1, r4
 800c60e:	f7fd fa0c 	bl	8009a2a <memset>
 800c612:	e7f4      	b.n	800c5fe <_calloc_r+0x12>

0800c614 <rshift>:
 800c614:	6903      	ldr	r3, [r0, #16]
 800c616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c61a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c61e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c622:	f100 0414 	add.w	r4, r0, #20
 800c626:	dd45      	ble.n	800c6b4 <rshift+0xa0>
 800c628:	f011 011f 	ands.w	r1, r1, #31
 800c62c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c634:	d10c      	bne.n	800c650 <rshift+0x3c>
 800c636:	f100 0710 	add.w	r7, r0, #16
 800c63a:	4629      	mov	r1, r5
 800c63c:	42b1      	cmp	r1, r6
 800c63e:	d334      	bcc.n	800c6aa <rshift+0x96>
 800c640:	1a9b      	subs	r3, r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	1eea      	subs	r2, r5, #3
 800c646:	4296      	cmp	r6, r2
 800c648:	bf38      	it	cc
 800c64a:	2300      	movcc	r3, #0
 800c64c:	4423      	add	r3, r4
 800c64e:	e015      	b.n	800c67c <rshift+0x68>
 800c650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c654:	f1c1 0820 	rsb	r8, r1, #32
 800c658:	40cf      	lsrs	r7, r1
 800c65a:	f105 0e04 	add.w	lr, r5, #4
 800c65e:	46a1      	mov	r9, r4
 800c660:	4576      	cmp	r6, lr
 800c662:	46f4      	mov	ip, lr
 800c664:	d815      	bhi.n	800c692 <rshift+0x7e>
 800c666:	1a9a      	subs	r2, r3, r2
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	3a04      	subs	r2, #4
 800c66c:	3501      	adds	r5, #1
 800c66e:	42ae      	cmp	r6, r5
 800c670:	bf38      	it	cc
 800c672:	2200      	movcc	r2, #0
 800c674:	18a3      	adds	r3, r4, r2
 800c676:	50a7      	str	r7, [r4, r2]
 800c678:	b107      	cbz	r7, 800c67c <rshift+0x68>
 800c67a:	3304      	adds	r3, #4
 800c67c:	1b1a      	subs	r2, r3, r4
 800c67e:	42a3      	cmp	r3, r4
 800c680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c684:	bf08      	it	eq
 800c686:	2300      	moveq	r3, #0
 800c688:	6102      	str	r2, [r0, #16]
 800c68a:	bf08      	it	eq
 800c68c:	6143      	streq	r3, [r0, #20]
 800c68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c692:	f8dc c000 	ldr.w	ip, [ip]
 800c696:	fa0c fc08 	lsl.w	ip, ip, r8
 800c69a:	ea4c 0707 	orr.w	r7, ip, r7
 800c69e:	f849 7b04 	str.w	r7, [r9], #4
 800c6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6a6:	40cf      	lsrs	r7, r1
 800c6a8:	e7da      	b.n	800c660 <rshift+0x4c>
 800c6aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6b2:	e7c3      	b.n	800c63c <rshift+0x28>
 800c6b4:	4623      	mov	r3, r4
 800c6b6:	e7e1      	b.n	800c67c <rshift+0x68>

0800c6b8 <__hexdig_fun>:
 800c6b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	d802      	bhi.n	800c6c6 <__hexdig_fun+0xe>
 800c6c0:	3820      	subs	r0, #32
 800c6c2:	b2c0      	uxtb	r0, r0
 800c6c4:	4770      	bx	lr
 800c6c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6ca:	2b05      	cmp	r3, #5
 800c6cc:	d801      	bhi.n	800c6d2 <__hexdig_fun+0x1a>
 800c6ce:	3847      	subs	r0, #71	@ 0x47
 800c6d0:	e7f7      	b.n	800c6c2 <__hexdig_fun+0xa>
 800c6d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	d801      	bhi.n	800c6de <__hexdig_fun+0x26>
 800c6da:	3827      	subs	r0, #39	@ 0x27
 800c6dc:	e7f1      	b.n	800c6c2 <__hexdig_fun+0xa>
 800c6de:	2000      	movs	r0, #0
 800c6e0:	4770      	bx	lr
	...

0800c6e4 <__gethex>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	468a      	mov	sl, r1
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	680b      	ldr	r3, [r1, #0]
 800c6f0:	9001      	str	r0, [sp, #4]
 800c6f2:	4690      	mov	r8, r2
 800c6f4:	1c9c      	adds	r4, r3, #2
 800c6f6:	46a1      	mov	r9, r4
 800c6f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6fc:	2830      	cmp	r0, #48	@ 0x30
 800c6fe:	d0fa      	beq.n	800c6f6 <__gethex+0x12>
 800c700:	eba9 0303 	sub.w	r3, r9, r3
 800c704:	f1a3 0b02 	sub.w	fp, r3, #2
 800c708:	f7ff ffd6 	bl	800c6b8 <__hexdig_fun>
 800c70c:	4605      	mov	r5, r0
 800c70e:	2800      	cmp	r0, #0
 800c710:	d168      	bne.n	800c7e4 <__gethex+0x100>
 800c712:	49a0      	ldr	r1, [pc, #640]	@ (800c994 <__gethex+0x2b0>)
 800c714:	2201      	movs	r2, #1
 800c716:	4648      	mov	r0, r9
 800c718:	f7ff ff1e 	bl	800c558 <strncmp>
 800c71c:	4607      	mov	r7, r0
 800c71e:	2800      	cmp	r0, #0
 800c720:	d167      	bne.n	800c7f2 <__gethex+0x10e>
 800c722:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c726:	4626      	mov	r6, r4
 800c728:	f7ff ffc6 	bl	800c6b8 <__hexdig_fun>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d062      	beq.n	800c7f6 <__gethex+0x112>
 800c730:	4623      	mov	r3, r4
 800c732:	7818      	ldrb	r0, [r3, #0]
 800c734:	2830      	cmp	r0, #48	@ 0x30
 800c736:	4699      	mov	r9, r3
 800c738:	f103 0301 	add.w	r3, r3, #1
 800c73c:	d0f9      	beq.n	800c732 <__gethex+0x4e>
 800c73e:	f7ff ffbb 	bl	800c6b8 <__hexdig_fun>
 800c742:	fab0 f580 	clz	r5, r0
 800c746:	096d      	lsrs	r5, r5, #5
 800c748:	f04f 0b01 	mov.w	fp, #1
 800c74c:	464a      	mov	r2, r9
 800c74e:	4616      	mov	r6, r2
 800c750:	3201      	adds	r2, #1
 800c752:	7830      	ldrb	r0, [r6, #0]
 800c754:	f7ff ffb0 	bl	800c6b8 <__hexdig_fun>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d1f8      	bne.n	800c74e <__gethex+0x6a>
 800c75c:	498d      	ldr	r1, [pc, #564]	@ (800c994 <__gethex+0x2b0>)
 800c75e:	2201      	movs	r2, #1
 800c760:	4630      	mov	r0, r6
 800c762:	f7ff fef9 	bl	800c558 <strncmp>
 800c766:	2800      	cmp	r0, #0
 800c768:	d13f      	bne.n	800c7ea <__gethex+0x106>
 800c76a:	b944      	cbnz	r4, 800c77e <__gethex+0x9a>
 800c76c:	1c74      	adds	r4, r6, #1
 800c76e:	4622      	mov	r2, r4
 800c770:	4616      	mov	r6, r2
 800c772:	3201      	adds	r2, #1
 800c774:	7830      	ldrb	r0, [r6, #0]
 800c776:	f7ff ff9f 	bl	800c6b8 <__hexdig_fun>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f8      	bne.n	800c770 <__gethex+0x8c>
 800c77e:	1ba4      	subs	r4, r4, r6
 800c780:	00a7      	lsls	r7, r4, #2
 800c782:	7833      	ldrb	r3, [r6, #0]
 800c784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c788:	2b50      	cmp	r3, #80	@ 0x50
 800c78a:	d13e      	bne.n	800c80a <__gethex+0x126>
 800c78c:	7873      	ldrb	r3, [r6, #1]
 800c78e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c790:	d033      	beq.n	800c7fa <__gethex+0x116>
 800c792:	2b2d      	cmp	r3, #45	@ 0x2d
 800c794:	d034      	beq.n	800c800 <__gethex+0x11c>
 800c796:	1c71      	adds	r1, r6, #1
 800c798:	2400      	movs	r4, #0
 800c79a:	7808      	ldrb	r0, [r1, #0]
 800c79c:	f7ff ff8c 	bl	800c6b8 <__hexdig_fun>
 800c7a0:	1e43      	subs	r3, r0, #1
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b18      	cmp	r3, #24
 800c7a6:	d830      	bhi.n	800c80a <__gethex+0x126>
 800c7a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c7ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7b0:	f7ff ff82 	bl	800c6b8 <__hexdig_fun>
 800c7b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800c7bc:	f1bc 0f18 	cmp.w	ip, #24
 800c7c0:	f04f 030a 	mov.w	r3, #10
 800c7c4:	d91e      	bls.n	800c804 <__gethex+0x120>
 800c7c6:	b104      	cbz	r4, 800c7ca <__gethex+0xe6>
 800c7c8:	4252      	negs	r2, r2
 800c7ca:	4417      	add	r7, r2
 800c7cc:	f8ca 1000 	str.w	r1, [sl]
 800c7d0:	b1ed      	cbz	r5, 800c80e <__gethex+0x12a>
 800c7d2:	f1bb 0f00 	cmp.w	fp, #0
 800c7d6:	bf0c      	ite	eq
 800c7d8:	2506      	moveq	r5, #6
 800c7da:	2500      	movne	r5, #0
 800c7dc:	4628      	mov	r0, r5
 800c7de:	b005      	add	sp, #20
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	2500      	movs	r5, #0
 800c7e6:	462c      	mov	r4, r5
 800c7e8:	e7b0      	b.n	800c74c <__gethex+0x68>
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	d1c7      	bne.n	800c77e <__gethex+0x9a>
 800c7ee:	4627      	mov	r7, r4
 800c7f0:	e7c7      	b.n	800c782 <__gethex+0x9e>
 800c7f2:	464e      	mov	r6, r9
 800c7f4:	462f      	mov	r7, r5
 800c7f6:	2501      	movs	r5, #1
 800c7f8:	e7c3      	b.n	800c782 <__gethex+0x9e>
 800c7fa:	2400      	movs	r4, #0
 800c7fc:	1cb1      	adds	r1, r6, #2
 800c7fe:	e7cc      	b.n	800c79a <__gethex+0xb6>
 800c800:	2401      	movs	r4, #1
 800c802:	e7fb      	b.n	800c7fc <__gethex+0x118>
 800c804:	fb03 0002 	mla	r0, r3, r2, r0
 800c808:	e7ce      	b.n	800c7a8 <__gethex+0xc4>
 800c80a:	4631      	mov	r1, r6
 800c80c:	e7de      	b.n	800c7cc <__gethex+0xe8>
 800c80e:	eba6 0309 	sub.w	r3, r6, r9
 800c812:	3b01      	subs	r3, #1
 800c814:	4629      	mov	r1, r5
 800c816:	2b07      	cmp	r3, #7
 800c818:	dc0a      	bgt.n	800c830 <__gethex+0x14c>
 800c81a:	9801      	ldr	r0, [sp, #4]
 800c81c:	f7fe f950 	bl	800aac0 <_Balloc>
 800c820:	4604      	mov	r4, r0
 800c822:	b940      	cbnz	r0, 800c836 <__gethex+0x152>
 800c824:	4b5c      	ldr	r3, [pc, #368]	@ (800c998 <__gethex+0x2b4>)
 800c826:	4602      	mov	r2, r0
 800c828:	21e4      	movs	r1, #228	@ 0xe4
 800c82a:	485c      	ldr	r0, [pc, #368]	@ (800c99c <__gethex+0x2b8>)
 800c82c:	f7ff fec0 	bl	800c5b0 <__assert_func>
 800c830:	3101      	adds	r1, #1
 800c832:	105b      	asrs	r3, r3, #1
 800c834:	e7ef      	b.n	800c816 <__gethex+0x132>
 800c836:	f100 0a14 	add.w	sl, r0, #20
 800c83a:	2300      	movs	r3, #0
 800c83c:	4655      	mov	r5, sl
 800c83e:	469b      	mov	fp, r3
 800c840:	45b1      	cmp	r9, r6
 800c842:	d337      	bcc.n	800c8b4 <__gethex+0x1d0>
 800c844:	f845 bb04 	str.w	fp, [r5], #4
 800c848:	eba5 050a 	sub.w	r5, r5, sl
 800c84c:	10ad      	asrs	r5, r5, #2
 800c84e:	6125      	str	r5, [r4, #16]
 800c850:	4658      	mov	r0, fp
 800c852:	f7fe fa27 	bl	800aca4 <__hi0bits>
 800c856:	016d      	lsls	r5, r5, #5
 800c858:	f8d8 6000 	ldr.w	r6, [r8]
 800c85c:	1a2d      	subs	r5, r5, r0
 800c85e:	42b5      	cmp	r5, r6
 800c860:	dd54      	ble.n	800c90c <__gethex+0x228>
 800c862:	1bad      	subs	r5, r5, r6
 800c864:	4629      	mov	r1, r5
 800c866:	4620      	mov	r0, r4
 800c868:	f7fe fdb3 	bl	800b3d2 <__any_on>
 800c86c:	4681      	mov	r9, r0
 800c86e:	b178      	cbz	r0, 800c890 <__gethex+0x1ac>
 800c870:	1e6b      	subs	r3, r5, #1
 800c872:	1159      	asrs	r1, r3, #5
 800c874:	f003 021f 	and.w	r2, r3, #31
 800c878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c87c:	f04f 0901 	mov.w	r9, #1
 800c880:	fa09 f202 	lsl.w	r2, r9, r2
 800c884:	420a      	tst	r2, r1
 800c886:	d003      	beq.n	800c890 <__gethex+0x1ac>
 800c888:	454b      	cmp	r3, r9
 800c88a:	dc36      	bgt.n	800c8fa <__gethex+0x216>
 800c88c:	f04f 0902 	mov.w	r9, #2
 800c890:	4629      	mov	r1, r5
 800c892:	4620      	mov	r0, r4
 800c894:	f7ff febe 	bl	800c614 <rshift>
 800c898:	442f      	add	r7, r5
 800c89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c89e:	42bb      	cmp	r3, r7
 800c8a0:	da42      	bge.n	800c928 <__gethex+0x244>
 800c8a2:	9801      	ldr	r0, [sp, #4]
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f7fe f94b 	bl	800ab40 <_Bfree>
 800c8aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	25a3      	movs	r5, #163	@ 0xa3
 800c8b2:	e793      	b.n	800c7dc <__gethex+0xf8>
 800c8b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8ba:	d012      	beq.n	800c8e2 <__gethex+0x1fe>
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d104      	bne.n	800c8ca <__gethex+0x1e6>
 800c8c0:	f845 bb04 	str.w	fp, [r5], #4
 800c8c4:	f04f 0b00 	mov.w	fp, #0
 800c8c8:	465b      	mov	r3, fp
 800c8ca:	7830      	ldrb	r0, [r6, #0]
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	f7ff fef3 	bl	800c6b8 <__hexdig_fun>
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	f000 000f 	and.w	r0, r0, #15
 800c8d8:	4098      	lsls	r0, r3
 800c8da:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8de:	3304      	adds	r3, #4
 800c8e0:	e7ae      	b.n	800c840 <__gethex+0x15c>
 800c8e2:	45b1      	cmp	r9, r6
 800c8e4:	d8ea      	bhi.n	800c8bc <__gethex+0x1d8>
 800c8e6:	492b      	ldr	r1, [pc, #172]	@ (800c994 <__gethex+0x2b0>)
 800c8e8:	9303      	str	r3, [sp, #12]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff fe33 	bl	800c558 <strncmp>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d1e1      	bne.n	800c8bc <__gethex+0x1d8>
 800c8f8:	e7a2      	b.n	800c840 <__gethex+0x15c>
 800c8fa:	1ea9      	subs	r1, r5, #2
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7fe fd68 	bl	800b3d2 <__any_on>
 800c902:	2800      	cmp	r0, #0
 800c904:	d0c2      	beq.n	800c88c <__gethex+0x1a8>
 800c906:	f04f 0903 	mov.w	r9, #3
 800c90a:	e7c1      	b.n	800c890 <__gethex+0x1ac>
 800c90c:	da09      	bge.n	800c922 <__gethex+0x23e>
 800c90e:	1b75      	subs	r5, r6, r5
 800c910:	4621      	mov	r1, r4
 800c912:	9801      	ldr	r0, [sp, #4]
 800c914:	462a      	mov	r2, r5
 800c916:	f7fe fb23 	bl	800af60 <__lshift>
 800c91a:	1b7f      	subs	r7, r7, r5
 800c91c:	4604      	mov	r4, r0
 800c91e:	f100 0a14 	add.w	sl, r0, #20
 800c922:	f04f 0900 	mov.w	r9, #0
 800c926:	e7b8      	b.n	800c89a <__gethex+0x1b6>
 800c928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c92c:	42bd      	cmp	r5, r7
 800c92e:	dd6f      	ble.n	800ca10 <__gethex+0x32c>
 800c930:	1bed      	subs	r5, r5, r7
 800c932:	42ae      	cmp	r6, r5
 800c934:	dc34      	bgt.n	800c9a0 <__gethex+0x2bc>
 800c936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d022      	beq.n	800c984 <__gethex+0x2a0>
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d024      	beq.n	800c98c <__gethex+0x2a8>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d115      	bne.n	800c972 <__gethex+0x28e>
 800c946:	42ae      	cmp	r6, r5
 800c948:	d113      	bne.n	800c972 <__gethex+0x28e>
 800c94a:	2e01      	cmp	r6, #1
 800c94c:	d10b      	bne.n	800c966 <__gethex+0x282>
 800c94e:	9a02      	ldr	r2, [sp, #8]
 800c950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	2301      	movs	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	f8ca 3000 	str.w	r3, [sl]
 800c95e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c960:	2562      	movs	r5, #98	@ 0x62
 800c962:	601c      	str	r4, [r3, #0]
 800c964:	e73a      	b.n	800c7dc <__gethex+0xf8>
 800c966:	1e71      	subs	r1, r6, #1
 800c968:	4620      	mov	r0, r4
 800c96a:	f7fe fd32 	bl	800b3d2 <__any_on>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d1ed      	bne.n	800c94e <__gethex+0x26a>
 800c972:	9801      	ldr	r0, [sp, #4]
 800c974:	4621      	mov	r1, r4
 800c976:	f7fe f8e3 	bl	800ab40 <_Bfree>
 800c97a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c97c:	2300      	movs	r3, #0
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	2550      	movs	r5, #80	@ 0x50
 800c982:	e72b      	b.n	800c7dc <__gethex+0xf8>
 800c984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1f3      	bne.n	800c972 <__gethex+0x28e>
 800c98a:	e7e0      	b.n	800c94e <__gethex+0x26a>
 800c98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1dd      	bne.n	800c94e <__gethex+0x26a>
 800c992:	e7ee      	b.n	800c972 <__gethex+0x28e>
 800c994:	0800d557 	.word	0x0800d557
 800c998:	0800d4ed 	.word	0x0800d4ed
 800c99c:	0800d5ae 	.word	0x0800d5ae
 800c9a0:	1e6f      	subs	r7, r5, #1
 800c9a2:	f1b9 0f00 	cmp.w	r9, #0
 800c9a6:	d130      	bne.n	800ca0a <__gethex+0x326>
 800c9a8:	b127      	cbz	r7, 800c9b4 <__gethex+0x2d0>
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7fe fd10 	bl	800b3d2 <__any_on>
 800c9b2:	4681      	mov	r9, r0
 800c9b4:	117a      	asrs	r2, r7, #5
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9bc:	f007 071f 	and.w	r7, r7, #31
 800c9c0:	40bb      	lsls	r3, r7
 800c9c2:	4213      	tst	r3, r2
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	bf18      	it	ne
 800c9ca:	f049 0902 	orrne.w	r9, r9, #2
 800c9ce:	f7ff fe21 	bl	800c614 <rshift>
 800c9d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9d6:	1b76      	subs	r6, r6, r5
 800c9d8:	2502      	movs	r5, #2
 800c9da:	f1b9 0f00 	cmp.w	r9, #0
 800c9de:	d047      	beq.n	800ca70 <__gethex+0x38c>
 800c9e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d015      	beq.n	800ca14 <__gethex+0x330>
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d017      	beq.n	800ca1c <__gethex+0x338>
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d109      	bne.n	800ca04 <__gethex+0x320>
 800c9f0:	f019 0f02 	tst.w	r9, #2
 800c9f4:	d006      	beq.n	800ca04 <__gethex+0x320>
 800c9f6:	f8da 3000 	ldr.w	r3, [sl]
 800c9fa:	ea49 0903 	orr.w	r9, r9, r3
 800c9fe:	f019 0f01 	tst.w	r9, #1
 800ca02:	d10e      	bne.n	800ca22 <__gethex+0x33e>
 800ca04:	f045 0510 	orr.w	r5, r5, #16
 800ca08:	e032      	b.n	800ca70 <__gethex+0x38c>
 800ca0a:	f04f 0901 	mov.w	r9, #1
 800ca0e:	e7d1      	b.n	800c9b4 <__gethex+0x2d0>
 800ca10:	2501      	movs	r5, #1
 800ca12:	e7e2      	b.n	800c9da <__gethex+0x2f6>
 800ca14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca16:	f1c3 0301 	rsb	r3, r3, #1
 800ca1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0f0      	beq.n	800ca04 <__gethex+0x320>
 800ca22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca26:	f104 0314 	add.w	r3, r4, #20
 800ca2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca32:	f04f 0c00 	mov.w	ip, #0
 800ca36:	4618      	mov	r0, r3
 800ca38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca40:	d01b      	beq.n	800ca7a <__gethex+0x396>
 800ca42:	3201      	adds	r2, #1
 800ca44:	6002      	str	r2, [r0, #0]
 800ca46:	2d02      	cmp	r5, #2
 800ca48:	f104 0314 	add.w	r3, r4, #20
 800ca4c:	d13c      	bne.n	800cac8 <__gethex+0x3e4>
 800ca4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca52:	3a01      	subs	r2, #1
 800ca54:	42b2      	cmp	r2, r6
 800ca56:	d109      	bne.n	800ca6c <__gethex+0x388>
 800ca58:	1171      	asrs	r1, r6, #5
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca60:	f006 061f 	and.w	r6, r6, #31
 800ca64:	fa02 f606 	lsl.w	r6, r2, r6
 800ca68:	421e      	tst	r6, r3
 800ca6a:	d13a      	bne.n	800cae2 <__gethex+0x3fe>
 800ca6c:	f045 0520 	orr.w	r5, r5, #32
 800ca70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca72:	601c      	str	r4, [r3, #0]
 800ca74:	9b02      	ldr	r3, [sp, #8]
 800ca76:	601f      	str	r7, [r3, #0]
 800ca78:	e6b0      	b.n	800c7dc <__gethex+0xf8>
 800ca7a:	4299      	cmp	r1, r3
 800ca7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca80:	d8d9      	bhi.n	800ca36 <__gethex+0x352>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	459b      	cmp	fp, r3
 800ca86:	db17      	blt.n	800cab8 <__gethex+0x3d4>
 800ca88:	6861      	ldr	r1, [r4, #4]
 800ca8a:	9801      	ldr	r0, [sp, #4]
 800ca8c:	3101      	adds	r1, #1
 800ca8e:	f7fe f817 	bl	800aac0 <_Balloc>
 800ca92:	4681      	mov	r9, r0
 800ca94:	b918      	cbnz	r0, 800ca9e <__gethex+0x3ba>
 800ca96:	4b1a      	ldr	r3, [pc, #104]	@ (800cb00 <__gethex+0x41c>)
 800ca98:	4602      	mov	r2, r0
 800ca9a:	2184      	movs	r1, #132	@ 0x84
 800ca9c:	e6c5      	b.n	800c82a <__gethex+0x146>
 800ca9e:	6922      	ldr	r2, [r4, #16]
 800caa0:	3202      	adds	r2, #2
 800caa2:	f104 010c 	add.w	r1, r4, #12
 800caa6:	0092      	lsls	r2, r2, #2
 800caa8:	300c      	adds	r0, #12
 800caaa:	f7fd f89c 	bl	8009be6 <memcpy>
 800caae:	4621      	mov	r1, r4
 800cab0:	9801      	ldr	r0, [sp, #4]
 800cab2:	f7fe f845 	bl	800ab40 <_Bfree>
 800cab6:	464c      	mov	r4, r9
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cac0:	6122      	str	r2, [r4, #16]
 800cac2:	2201      	movs	r2, #1
 800cac4:	615a      	str	r2, [r3, #20]
 800cac6:	e7be      	b.n	800ca46 <__gethex+0x362>
 800cac8:	6922      	ldr	r2, [r4, #16]
 800caca:	455a      	cmp	r2, fp
 800cacc:	dd0b      	ble.n	800cae6 <__gethex+0x402>
 800cace:	2101      	movs	r1, #1
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7ff fd9f 	bl	800c614 <rshift>
 800cad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cada:	3701      	adds	r7, #1
 800cadc:	42bb      	cmp	r3, r7
 800cade:	f6ff aee0 	blt.w	800c8a2 <__gethex+0x1be>
 800cae2:	2501      	movs	r5, #1
 800cae4:	e7c2      	b.n	800ca6c <__gethex+0x388>
 800cae6:	f016 061f 	ands.w	r6, r6, #31
 800caea:	d0fa      	beq.n	800cae2 <__gethex+0x3fe>
 800caec:	4453      	add	r3, sl
 800caee:	f1c6 0620 	rsb	r6, r6, #32
 800caf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800caf6:	f7fe f8d5 	bl	800aca4 <__hi0bits>
 800cafa:	42b0      	cmp	r0, r6
 800cafc:	dbe7      	blt.n	800cace <__gethex+0x3ea>
 800cafe:	e7f0      	b.n	800cae2 <__gethex+0x3fe>
 800cb00:	0800d4ed 	.word	0x0800d4ed

0800cb04 <L_shift>:
 800cb04:	f1c2 0208 	rsb	r2, r2, #8
 800cb08:	0092      	lsls	r2, r2, #2
 800cb0a:	b570      	push	{r4, r5, r6, lr}
 800cb0c:	f1c2 0620 	rsb	r6, r2, #32
 800cb10:	6843      	ldr	r3, [r0, #4]
 800cb12:	6804      	ldr	r4, [r0, #0]
 800cb14:	fa03 f506 	lsl.w	r5, r3, r6
 800cb18:	432c      	orrs	r4, r5
 800cb1a:	40d3      	lsrs	r3, r2
 800cb1c:	6004      	str	r4, [r0, #0]
 800cb1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb22:	4288      	cmp	r0, r1
 800cb24:	d3f4      	bcc.n	800cb10 <L_shift+0xc>
 800cb26:	bd70      	pop	{r4, r5, r6, pc}

0800cb28 <__match>:
 800cb28:	b530      	push	{r4, r5, lr}
 800cb2a:	6803      	ldr	r3, [r0, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb32:	b914      	cbnz	r4, 800cb3a <__match+0x12>
 800cb34:	6003      	str	r3, [r0, #0]
 800cb36:	2001      	movs	r0, #1
 800cb38:	bd30      	pop	{r4, r5, pc}
 800cb3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb42:	2d19      	cmp	r5, #25
 800cb44:	bf98      	it	ls
 800cb46:	3220      	addls	r2, #32
 800cb48:	42a2      	cmp	r2, r4
 800cb4a:	d0f0      	beq.n	800cb2e <__match+0x6>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	e7f3      	b.n	800cb38 <__match+0x10>

0800cb50 <__hexnan>:
 800cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	680b      	ldr	r3, [r1, #0]
 800cb56:	6801      	ldr	r1, [r0, #0]
 800cb58:	115e      	asrs	r6, r3, #5
 800cb5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb5e:	f013 031f 	ands.w	r3, r3, #31
 800cb62:	b087      	sub	sp, #28
 800cb64:	bf18      	it	ne
 800cb66:	3604      	addne	r6, #4
 800cb68:	2500      	movs	r5, #0
 800cb6a:	1f37      	subs	r7, r6, #4
 800cb6c:	4682      	mov	sl, r0
 800cb6e:	4690      	mov	r8, r2
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb76:	46b9      	mov	r9, r7
 800cb78:	463c      	mov	r4, r7
 800cb7a:	9502      	str	r5, [sp, #8]
 800cb7c:	46ab      	mov	fp, r5
 800cb7e:	784a      	ldrb	r2, [r1, #1]
 800cb80:	1c4b      	adds	r3, r1, #1
 800cb82:	9303      	str	r3, [sp, #12]
 800cb84:	b342      	cbz	r2, 800cbd8 <__hexnan+0x88>
 800cb86:	4610      	mov	r0, r2
 800cb88:	9105      	str	r1, [sp, #20]
 800cb8a:	9204      	str	r2, [sp, #16]
 800cb8c:	f7ff fd94 	bl	800c6b8 <__hexdig_fun>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d151      	bne.n	800cc38 <__hexnan+0xe8>
 800cb94:	9a04      	ldr	r2, [sp, #16]
 800cb96:	9905      	ldr	r1, [sp, #20]
 800cb98:	2a20      	cmp	r2, #32
 800cb9a:	d818      	bhi.n	800cbce <__hexnan+0x7e>
 800cb9c:	9b02      	ldr	r3, [sp, #8]
 800cb9e:	459b      	cmp	fp, r3
 800cba0:	dd13      	ble.n	800cbca <__hexnan+0x7a>
 800cba2:	454c      	cmp	r4, r9
 800cba4:	d206      	bcs.n	800cbb4 <__hexnan+0x64>
 800cba6:	2d07      	cmp	r5, #7
 800cba8:	dc04      	bgt.n	800cbb4 <__hexnan+0x64>
 800cbaa:	462a      	mov	r2, r5
 800cbac:	4649      	mov	r1, r9
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f7ff ffa8 	bl	800cb04 <L_shift>
 800cbb4:	4544      	cmp	r4, r8
 800cbb6:	d952      	bls.n	800cc5e <__hexnan+0x10e>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f1a4 0904 	sub.w	r9, r4, #4
 800cbbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbc2:	f8cd b008 	str.w	fp, [sp, #8]
 800cbc6:	464c      	mov	r4, r9
 800cbc8:	461d      	mov	r5, r3
 800cbca:	9903      	ldr	r1, [sp, #12]
 800cbcc:	e7d7      	b.n	800cb7e <__hexnan+0x2e>
 800cbce:	2a29      	cmp	r2, #41	@ 0x29
 800cbd0:	d157      	bne.n	800cc82 <__hexnan+0x132>
 800cbd2:	3102      	adds	r1, #2
 800cbd4:	f8ca 1000 	str.w	r1, [sl]
 800cbd8:	f1bb 0f00 	cmp.w	fp, #0
 800cbdc:	d051      	beq.n	800cc82 <__hexnan+0x132>
 800cbde:	454c      	cmp	r4, r9
 800cbe0:	d206      	bcs.n	800cbf0 <__hexnan+0xa0>
 800cbe2:	2d07      	cmp	r5, #7
 800cbe4:	dc04      	bgt.n	800cbf0 <__hexnan+0xa0>
 800cbe6:	462a      	mov	r2, r5
 800cbe8:	4649      	mov	r1, r9
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7ff ff8a 	bl	800cb04 <L_shift>
 800cbf0:	4544      	cmp	r4, r8
 800cbf2:	d936      	bls.n	800cc62 <__hexnan+0x112>
 800cbf4:	f1a8 0204 	sub.w	r2, r8, #4
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbfe:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc02:	429f      	cmp	r7, r3
 800cc04:	d2f9      	bcs.n	800cbfa <__hexnan+0xaa>
 800cc06:	1b3b      	subs	r3, r7, r4
 800cc08:	f023 0303 	bic.w	r3, r3, #3
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	3401      	adds	r4, #1
 800cc10:	3e03      	subs	r6, #3
 800cc12:	42b4      	cmp	r4, r6
 800cc14:	bf88      	it	hi
 800cc16:	2304      	movhi	r3, #4
 800cc18:	4443      	add	r3, r8
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f843 2b04 	str.w	r2, [r3], #4
 800cc20:	429f      	cmp	r7, r3
 800cc22:	d2fb      	bcs.n	800cc1c <__hexnan+0xcc>
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	b91b      	cbnz	r3, 800cc30 <__hexnan+0xe0>
 800cc28:	4547      	cmp	r7, r8
 800cc2a:	d128      	bne.n	800cc7e <__hexnan+0x12e>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	2005      	movs	r0, #5
 800cc32:	b007      	add	sp, #28
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc38:	3501      	adds	r5, #1
 800cc3a:	2d08      	cmp	r5, #8
 800cc3c:	f10b 0b01 	add.w	fp, fp, #1
 800cc40:	dd06      	ble.n	800cc50 <__hexnan+0x100>
 800cc42:	4544      	cmp	r4, r8
 800cc44:	d9c1      	bls.n	800cbca <__hexnan+0x7a>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc4c:	2501      	movs	r5, #1
 800cc4e:	3c04      	subs	r4, #4
 800cc50:	6822      	ldr	r2, [r4, #0]
 800cc52:	f000 000f 	and.w	r0, r0, #15
 800cc56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc5a:	6020      	str	r0, [r4, #0]
 800cc5c:	e7b5      	b.n	800cbca <__hexnan+0x7a>
 800cc5e:	2508      	movs	r5, #8
 800cc60:	e7b3      	b.n	800cbca <__hexnan+0x7a>
 800cc62:	9b01      	ldr	r3, [sp, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0dd      	beq.n	800cc24 <__hexnan+0xd4>
 800cc68:	f1c3 0320 	rsb	r3, r3, #32
 800cc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc70:	40da      	lsrs	r2, r3
 800cc72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc76:	4013      	ands	r3, r2
 800cc78:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc7c:	e7d2      	b.n	800cc24 <__hexnan+0xd4>
 800cc7e:	3f04      	subs	r7, #4
 800cc80:	e7d0      	b.n	800cc24 <__hexnan+0xd4>
 800cc82:	2004      	movs	r0, #4
 800cc84:	e7d5      	b.n	800cc32 <__hexnan+0xe2>

0800cc86 <__ascii_mbtowc>:
 800cc86:	b082      	sub	sp, #8
 800cc88:	b901      	cbnz	r1, 800cc8c <__ascii_mbtowc+0x6>
 800cc8a:	a901      	add	r1, sp, #4
 800cc8c:	b142      	cbz	r2, 800cca0 <__ascii_mbtowc+0x1a>
 800cc8e:	b14b      	cbz	r3, 800cca4 <__ascii_mbtowc+0x1e>
 800cc90:	7813      	ldrb	r3, [r2, #0]
 800cc92:	600b      	str	r3, [r1, #0]
 800cc94:	7812      	ldrb	r2, [r2, #0]
 800cc96:	1e10      	subs	r0, r2, #0
 800cc98:	bf18      	it	ne
 800cc9a:	2001      	movne	r0, #1
 800cc9c:	b002      	add	sp, #8
 800cc9e:	4770      	bx	lr
 800cca0:	4610      	mov	r0, r2
 800cca2:	e7fb      	b.n	800cc9c <__ascii_mbtowc+0x16>
 800cca4:	f06f 0001 	mvn.w	r0, #1
 800cca8:	e7f8      	b.n	800cc9c <__ascii_mbtowc+0x16>

0800ccaa <_realloc_r>:
 800ccaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccae:	4607      	mov	r7, r0
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	b921      	cbnz	r1, 800ccc0 <_realloc_r+0x16>
 800ccb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccba:	4611      	mov	r1, r2
 800ccbc:	f7fd be74 	b.w	800a9a8 <_malloc_r>
 800ccc0:	b92a      	cbnz	r2, 800ccce <_realloc_r+0x24>
 800ccc2:	f7fd fdfd 	bl	800a8c0 <_free_r>
 800ccc6:	4625      	mov	r5, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccce:	f000 f840 	bl	800cd52 <_malloc_usable_size_r>
 800ccd2:	4284      	cmp	r4, r0
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	d802      	bhi.n	800ccde <_realloc_r+0x34>
 800ccd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccdc:	d8f4      	bhi.n	800ccc8 <_realloc_r+0x1e>
 800ccde:	4621      	mov	r1, r4
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7fd fe61 	bl	800a9a8 <_malloc_r>
 800cce6:	4680      	mov	r8, r0
 800cce8:	b908      	cbnz	r0, 800ccee <_realloc_r+0x44>
 800ccea:	4645      	mov	r5, r8
 800ccec:	e7ec      	b.n	800ccc8 <_realloc_r+0x1e>
 800ccee:	42b4      	cmp	r4, r6
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	bf28      	it	cs
 800ccf6:	4632      	movcs	r2, r6
 800ccf8:	f7fc ff75 	bl	8009be6 <memcpy>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7fd fdde 	bl	800a8c0 <_free_r>
 800cd04:	e7f1      	b.n	800ccea <_realloc_r+0x40>

0800cd06 <__ascii_wctomb>:
 800cd06:	4603      	mov	r3, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	b141      	cbz	r1, 800cd1e <__ascii_wctomb+0x18>
 800cd0c:	2aff      	cmp	r2, #255	@ 0xff
 800cd0e:	d904      	bls.n	800cd1a <__ascii_wctomb+0x14>
 800cd10:	228a      	movs	r2, #138	@ 0x8a
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	f04f 30ff 	mov.w	r0, #4294967295
 800cd18:	4770      	bx	lr
 800cd1a:	700a      	strb	r2, [r1, #0]
 800cd1c:	2001      	movs	r0, #1
 800cd1e:	4770      	bx	lr

0800cd20 <fiprintf>:
 800cd20:	b40e      	push	{r1, r2, r3}
 800cd22:	b503      	push	{r0, r1, lr}
 800cd24:	4601      	mov	r1, r0
 800cd26:	ab03      	add	r3, sp, #12
 800cd28:	4805      	ldr	r0, [pc, #20]	@ (800cd40 <fiprintf+0x20>)
 800cd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2e:	6800      	ldr	r0, [r0, #0]
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	f000 f83f 	bl	800cdb4 <_vfiprintf_r>
 800cd36:	b002      	add	sp, #8
 800cd38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd3c:	b003      	add	sp, #12
 800cd3e:	4770      	bx	lr
 800cd40:	2000001c 	.word	0x2000001c

0800cd44 <abort>:
 800cd44:	b508      	push	{r3, lr}
 800cd46:	2006      	movs	r0, #6
 800cd48:	f000 fa08 	bl	800d15c <raise>
 800cd4c:	2001      	movs	r0, #1
 800cd4e:	f7f5 f989 	bl	8002064 <_exit>

0800cd52 <_malloc_usable_size_r>:
 800cd52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd56:	1f18      	subs	r0, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfbc      	itt	lt
 800cd5c:	580b      	ldrlt	r3, [r1, r0]
 800cd5e:	18c0      	addlt	r0, r0, r3
 800cd60:	4770      	bx	lr

0800cd62 <__sfputc_r>:
 800cd62:	6893      	ldr	r3, [r2, #8]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	b410      	push	{r4}
 800cd6a:	6093      	str	r3, [r2, #8]
 800cd6c:	da08      	bge.n	800cd80 <__sfputc_r+0x1e>
 800cd6e:	6994      	ldr	r4, [r2, #24]
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	db01      	blt.n	800cd78 <__sfputc_r+0x16>
 800cd74:	290a      	cmp	r1, #10
 800cd76:	d103      	bne.n	800cd80 <__sfputc_r+0x1e>
 800cd78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd7c:	f000 b932 	b.w	800cfe4 <__swbuf_r>
 800cd80:	6813      	ldr	r3, [r2, #0]
 800cd82:	1c58      	adds	r0, r3, #1
 800cd84:	6010      	str	r0, [r2, #0]
 800cd86:	7019      	strb	r1, [r3, #0]
 800cd88:	4608      	mov	r0, r1
 800cd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <__sfputs_r>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	4606      	mov	r6, r0
 800cd94:	460f      	mov	r7, r1
 800cd96:	4614      	mov	r4, r2
 800cd98:	18d5      	adds	r5, r2, r3
 800cd9a:	42ac      	cmp	r4, r5
 800cd9c:	d101      	bne.n	800cda2 <__sfputs_r+0x12>
 800cd9e:	2000      	movs	r0, #0
 800cda0:	e007      	b.n	800cdb2 <__sfputs_r+0x22>
 800cda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda6:	463a      	mov	r2, r7
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7ff ffda 	bl	800cd62 <__sfputc_r>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d1f3      	bne.n	800cd9a <__sfputs_r+0xa>
 800cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cdb4 <_vfiprintf_r>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	460d      	mov	r5, r1
 800cdba:	b09d      	sub	sp, #116	@ 0x74
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	4698      	mov	r8, r3
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	b118      	cbz	r0, 800cdcc <_vfiprintf_r+0x18>
 800cdc4:	6a03      	ldr	r3, [r0, #32]
 800cdc6:	b90b      	cbnz	r3, 800cdcc <_vfiprintf_r+0x18>
 800cdc8:	f7fc fd5e 	bl	8009888 <__sinit>
 800cdcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdce:	07d9      	lsls	r1, r3, #31
 800cdd0:	d405      	bmi.n	800cdde <_vfiprintf_r+0x2a>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	059a      	lsls	r2, r3, #22
 800cdd6:	d402      	bmi.n	800cdde <_vfiprintf_r+0x2a>
 800cdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdda:	f7fc ff02 	bl	8009be2 <__retarget_lock_acquire_recursive>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	071b      	lsls	r3, r3, #28
 800cde2:	d501      	bpl.n	800cde8 <_vfiprintf_r+0x34>
 800cde4:	692b      	ldr	r3, [r5, #16]
 800cde6:	b99b      	cbnz	r3, 800ce10 <_vfiprintf_r+0x5c>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 f938 	bl	800d060 <__swsetup_r>
 800cdf0:	b170      	cbz	r0, 800ce10 <_vfiprintf_r+0x5c>
 800cdf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdf4:	07dc      	lsls	r4, r3, #31
 800cdf6:	d504      	bpl.n	800ce02 <_vfiprintf_r+0x4e>
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	b01d      	add	sp, #116	@ 0x74
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	0598      	lsls	r0, r3, #22
 800ce06:	d4f7      	bmi.n	800cdf8 <_vfiprintf_r+0x44>
 800ce08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce0a:	f7fc feeb 	bl	8009be4 <__retarget_lock_release_recursive>
 800ce0e:	e7f3      	b.n	800cdf8 <_vfiprintf_r+0x44>
 800ce10:	2300      	movs	r3, #0
 800ce12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce14:	2320      	movs	r3, #32
 800ce16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce1e:	2330      	movs	r3, #48	@ 0x30
 800ce20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfd0 <_vfiprintf_r+0x21c>
 800ce24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce28:	f04f 0901 	mov.w	r9, #1
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	469a      	mov	sl, r3
 800ce30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce34:	b10a      	cbz	r2, 800ce3a <_vfiprintf_r+0x86>
 800ce36:	2a25      	cmp	r2, #37	@ 0x25
 800ce38:	d1f9      	bne.n	800ce2e <_vfiprintf_r+0x7a>
 800ce3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce3e:	d00b      	beq.n	800ce58 <_vfiprintf_r+0xa4>
 800ce40:	465b      	mov	r3, fp
 800ce42:	4622      	mov	r2, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7ff ffa2 	bl	800cd90 <__sfputs_r>
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	f000 80a7 	beq.w	800cfa0 <_vfiprintf_r+0x1ec>
 800ce52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce54:	445a      	add	r2, fp
 800ce56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce58:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 809f 	beq.w	800cfa0 <_vfiprintf_r+0x1ec>
 800ce62:	2300      	movs	r3, #0
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6c:	f10a 0a01 	add.w	sl, sl, #1
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	9307      	str	r3, [sp, #28]
 800ce74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce7a:	4654      	mov	r4, sl
 800ce7c:	2205      	movs	r2, #5
 800ce7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce82:	4853      	ldr	r0, [pc, #332]	@ (800cfd0 <_vfiprintf_r+0x21c>)
 800ce84:	f7f3 f9ac 	bl	80001e0 <memchr>
 800ce88:	9a04      	ldr	r2, [sp, #16]
 800ce8a:	b9d8      	cbnz	r0, 800cec4 <_vfiprintf_r+0x110>
 800ce8c:	06d1      	lsls	r1, r2, #27
 800ce8e:	bf44      	itt	mi
 800ce90:	2320      	movmi	r3, #32
 800ce92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce96:	0713      	lsls	r3, r2, #28
 800ce98:	bf44      	itt	mi
 800ce9a:	232b      	movmi	r3, #43	@ 0x2b
 800ce9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cea0:	f89a 3000 	ldrb.w	r3, [sl]
 800cea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cea6:	d015      	beq.n	800ced4 <_vfiprintf_r+0x120>
 800cea8:	9a07      	ldr	r2, [sp, #28]
 800ceaa:	4654      	mov	r4, sl
 800ceac:	2000      	movs	r0, #0
 800ceae:	f04f 0c0a 	mov.w	ip, #10
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb8:	3b30      	subs	r3, #48	@ 0x30
 800ceba:	2b09      	cmp	r3, #9
 800cebc:	d94b      	bls.n	800cf56 <_vfiprintf_r+0x1a2>
 800cebe:	b1b0      	cbz	r0, 800ceee <_vfiprintf_r+0x13a>
 800cec0:	9207      	str	r2, [sp, #28]
 800cec2:	e014      	b.n	800ceee <_vfiprintf_r+0x13a>
 800cec4:	eba0 0308 	sub.w	r3, r0, r8
 800cec8:	fa09 f303 	lsl.w	r3, r9, r3
 800cecc:	4313      	orrs	r3, r2
 800cece:	9304      	str	r3, [sp, #16]
 800ced0:	46a2      	mov	sl, r4
 800ced2:	e7d2      	b.n	800ce7a <_vfiprintf_r+0xc6>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	1d19      	adds	r1, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	9103      	str	r1, [sp, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	bfbb      	ittet	lt
 800cee0:	425b      	neglt	r3, r3
 800cee2:	f042 0202 	orrlt.w	r2, r2, #2
 800cee6:	9307      	strge	r3, [sp, #28]
 800cee8:	9307      	strlt	r3, [sp, #28]
 800ceea:	bfb8      	it	lt
 800ceec:	9204      	strlt	r2, [sp, #16]
 800ceee:	7823      	ldrb	r3, [r4, #0]
 800cef0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cef2:	d10a      	bne.n	800cf0a <_vfiprintf_r+0x156>
 800cef4:	7863      	ldrb	r3, [r4, #1]
 800cef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cef8:	d132      	bne.n	800cf60 <_vfiprintf_r+0x1ac>
 800cefa:	9b03      	ldr	r3, [sp, #12]
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	9203      	str	r2, [sp, #12]
 800cf02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf06:	3402      	adds	r4, #2
 800cf08:	9305      	str	r3, [sp, #20]
 800cf0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfe0 <_vfiprintf_r+0x22c>
 800cf0e:	7821      	ldrb	r1, [r4, #0]
 800cf10:	2203      	movs	r2, #3
 800cf12:	4650      	mov	r0, sl
 800cf14:	f7f3 f964 	bl	80001e0 <memchr>
 800cf18:	b138      	cbz	r0, 800cf2a <_vfiprintf_r+0x176>
 800cf1a:	9b04      	ldr	r3, [sp, #16]
 800cf1c:	eba0 000a 	sub.w	r0, r0, sl
 800cf20:	2240      	movs	r2, #64	@ 0x40
 800cf22:	4082      	lsls	r2, r0
 800cf24:	4313      	orrs	r3, r2
 800cf26:	3401      	adds	r4, #1
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2e:	4829      	ldr	r0, [pc, #164]	@ (800cfd4 <_vfiprintf_r+0x220>)
 800cf30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf34:	2206      	movs	r2, #6
 800cf36:	f7f3 f953 	bl	80001e0 <memchr>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d03f      	beq.n	800cfbe <_vfiprintf_r+0x20a>
 800cf3e:	4b26      	ldr	r3, [pc, #152]	@ (800cfd8 <_vfiprintf_r+0x224>)
 800cf40:	bb1b      	cbnz	r3, 800cf8a <_vfiprintf_r+0x1d6>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	3307      	adds	r3, #7
 800cf46:	f023 0307 	bic.w	r3, r3, #7
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf50:	443b      	add	r3, r7
 800cf52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf54:	e76a      	b.n	800ce2c <_vfiprintf_r+0x78>
 800cf56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	e7a8      	b.n	800ceb2 <_vfiprintf_r+0xfe>
 800cf60:	2300      	movs	r3, #0
 800cf62:	3401      	adds	r4, #1
 800cf64:	9305      	str	r3, [sp, #20]
 800cf66:	4619      	mov	r1, r3
 800cf68:	f04f 0c0a 	mov.w	ip, #10
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf72:	3a30      	subs	r2, #48	@ 0x30
 800cf74:	2a09      	cmp	r2, #9
 800cf76:	d903      	bls.n	800cf80 <_vfiprintf_r+0x1cc>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d0c6      	beq.n	800cf0a <_vfiprintf_r+0x156>
 800cf7c:	9105      	str	r1, [sp, #20]
 800cf7e:	e7c4      	b.n	800cf0a <_vfiprintf_r+0x156>
 800cf80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf84:	4604      	mov	r4, r0
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7f0      	b.n	800cf6c <_vfiprintf_r+0x1b8>
 800cf8a:	ab03      	add	r3, sp, #12
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4b12      	ldr	r3, [pc, #72]	@ (800cfdc <_vfiprintf_r+0x228>)
 800cf92:	a904      	add	r1, sp, #16
 800cf94:	4630      	mov	r0, r6
 800cf96:	f7fb fe27 	bl	8008be8 <_printf_float>
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	1c78      	adds	r0, r7, #1
 800cf9e:	d1d6      	bne.n	800cf4e <_vfiprintf_r+0x19a>
 800cfa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa2:	07d9      	lsls	r1, r3, #31
 800cfa4:	d405      	bmi.n	800cfb2 <_vfiprintf_r+0x1fe>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	059a      	lsls	r2, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_vfiprintf_r+0x1fe>
 800cfac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfae:	f7fc fe19 	bl	8009be4 <__retarget_lock_release_recursive>
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	065b      	lsls	r3, r3, #25
 800cfb6:	f53f af1f 	bmi.w	800cdf8 <_vfiprintf_r+0x44>
 800cfba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfbc:	e71e      	b.n	800cdfc <_vfiprintf_r+0x48>
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4b05      	ldr	r3, [pc, #20]	@ (800cfdc <_vfiprintf_r+0x228>)
 800cfc6:	a904      	add	r1, sp, #16
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f7fc f8a5 	bl	8009118 <_printf_i>
 800cfce:	e7e4      	b.n	800cf9a <_vfiprintf_r+0x1e6>
 800cfd0:	0800d559 	.word	0x0800d559
 800cfd4:	0800d563 	.word	0x0800d563
 800cfd8:	08008be9 	.word	0x08008be9
 800cfdc:	0800cd91 	.word	0x0800cd91
 800cfe0:	0800d55f 	.word	0x0800d55f

0800cfe4 <__swbuf_r>:
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	4605      	mov	r5, r0
 800cfec:	b118      	cbz	r0, 800cff6 <__swbuf_r+0x12>
 800cfee:	6a03      	ldr	r3, [r0, #32]
 800cff0:	b90b      	cbnz	r3, 800cff6 <__swbuf_r+0x12>
 800cff2:	f7fc fc49 	bl	8009888 <__sinit>
 800cff6:	69a3      	ldr	r3, [r4, #24]
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	071a      	lsls	r2, r3, #28
 800cffe:	d501      	bpl.n	800d004 <__swbuf_r+0x20>
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	b943      	cbnz	r3, 800d016 <__swbuf_r+0x32>
 800d004:	4621      	mov	r1, r4
 800d006:	4628      	mov	r0, r5
 800d008:	f000 f82a 	bl	800d060 <__swsetup_r>
 800d00c:	b118      	cbz	r0, 800d016 <__swbuf_r+0x32>
 800d00e:	f04f 37ff 	mov.w	r7, #4294967295
 800d012:	4638      	mov	r0, r7
 800d014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	6922      	ldr	r2, [r4, #16]
 800d01a:	1a98      	subs	r0, r3, r2
 800d01c:	6963      	ldr	r3, [r4, #20]
 800d01e:	b2f6      	uxtb	r6, r6
 800d020:	4283      	cmp	r3, r0
 800d022:	4637      	mov	r7, r6
 800d024:	dc05      	bgt.n	800d032 <__swbuf_r+0x4e>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f7ff fa53 	bl	800c4d4 <_fflush_r>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d1ed      	bne.n	800d00e <__swbuf_r+0x2a>
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	3b01      	subs	r3, #1
 800d036:	60a3      	str	r3, [r4, #8]
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	701e      	strb	r6, [r3, #0]
 800d040:	6962      	ldr	r2, [r4, #20]
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	429a      	cmp	r2, r3
 800d046:	d004      	beq.n	800d052 <__swbuf_r+0x6e>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	07db      	lsls	r3, r3, #31
 800d04c:	d5e1      	bpl.n	800d012 <__swbuf_r+0x2e>
 800d04e:	2e0a      	cmp	r6, #10
 800d050:	d1df      	bne.n	800d012 <__swbuf_r+0x2e>
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f7ff fa3d 	bl	800c4d4 <_fflush_r>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0d9      	beq.n	800d012 <__swbuf_r+0x2e>
 800d05e:	e7d6      	b.n	800d00e <__swbuf_r+0x2a>

0800d060 <__swsetup_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4b29      	ldr	r3, [pc, #164]	@ (800d108 <__swsetup_r+0xa8>)
 800d064:	4605      	mov	r5, r0
 800d066:	6818      	ldr	r0, [r3, #0]
 800d068:	460c      	mov	r4, r1
 800d06a:	b118      	cbz	r0, 800d074 <__swsetup_r+0x14>
 800d06c:	6a03      	ldr	r3, [r0, #32]
 800d06e:	b90b      	cbnz	r3, 800d074 <__swsetup_r+0x14>
 800d070:	f7fc fc0a 	bl	8009888 <__sinit>
 800d074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d078:	0719      	lsls	r1, r3, #28
 800d07a:	d422      	bmi.n	800d0c2 <__swsetup_r+0x62>
 800d07c:	06da      	lsls	r2, r3, #27
 800d07e:	d407      	bmi.n	800d090 <__swsetup_r+0x30>
 800d080:	2209      	movs	r2, #9
 800d082:	602a      	str	r2, [r5, #0]
 800d084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	f04f 30ff 	mov.w	r0, #4294967295
 800d08e:	e033      	b.n	800d0f8 <__swsetup_r+0x98>
 800d090:	0758      	lsls	r0, r3, #29
 800d092:	d512      	bpl.n	800d0ba <__swsetup_r+0x5a>
 800d094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d096:	b141      	cbz	r1, 800d0aa <__swsetup_r+0x4a>
 800d098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d09c:	4299      	cmp	r1, r3
 800d09e:	d002      	beq.n	800d0a6 <__swsetup_r+0x46>
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f7fd fc0d 	bl	800a8c0 <_free_r>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6063      	str	r3, [r4, #4]
 800d0b6:	6923      	ldr	r3, [r4, #16]
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	f043 0308 	orr.w	r3, r3, #8
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	b94b      	cbnz	r3, 800d0da <__swsetup_r+0x7a>
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0d0:	d003      	beq.n	800d0da <__swsetup_r+0x7a>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f000 f883 	bl	800d1e0 <__smakebuf_r>
 800d0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0de:	f013 0201 	ands.w	r2, r3, #1
 800d0e2:	d00a      	beq.n	800d0fa <__swsetup_r+0x9a>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	60a2      	str	r2, [r4, #8]
 800d0e8:	6962      	ldr	r2, [r4, #20]
 800d0ea:	4252      	negs	r2, r2
 800d0ec:	61a2      	str	r2, [r4, #24]
 800d0ee:	6922      	ldr	r2, [r4, #16]
 800d0f0:	b942      	cbnz	r2, 800d104 <__swsetup_r+0xa4>
 800d0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0f6:	d1c5      	bne.n	800d084 <__swsetup_r+0x24>
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
 800d0fa:	0799      	lsls	r1, r3, #30
 800d0fc:	bf58      	it	pl
 800d0fe:	6962      	ldrpl	r2, [r4, #20]
 800d100:	60a2      	str	r2, [r4, #8]
 800d102:	e7f4      	b.n	800d0ee <__swsetup_r+0x8e>
 800d104:	2000      	movs	r0, #0
 800d106:	e7f7      	b.n	800d0f8 <__swsetup_r+0x98>
 800d108:	2000001c 	.word	0x2000001c

0800d10c <_raise_r>:
 800d10c:	291f      	cmp	r1, #31
 800d10e:	b538      	push	{r3, r4, r5, lr}
 800d110:	4605      	mov	r5, r0
 800d112:	460c      	mov	r4, r1
 800d114:	d904      	bls.n	800d120 <_raise_r+0x14>
 800d116:	2316      	movs	r3, #22
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	f04f 30ff 	mov.w	r0, #4294967295
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d122:	b112      	cbz	r2, 800d12a <_raise_r+0x1e>
 800d124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d128:	b94b      	cbnz	r3, 800d13e <_raise_r+0x32>
 800d12a:	4628      	mov	r0, r5
 800d12c:	f000 f830 	bl	800d190 <_getpid_r>
 800d130:	4622      	mov	r2, r4
 800d132:	4601      	mov	r1, r0
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d13a:	f000 b817 	b.w	800d16c <_kill_r>
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d00a      	beq.n	800d158 <_raise_r+0x4c>
 800d142:	1c59      	adds	r1, r3, #1
 800d144:	d103      	bne.n	800d14e <_raise_r+0x42>
 800d146:	2316      	movs	r3, #22
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	2001      	movs	r0, #1
 800d14c:	e7e7      	b.n	800d11e <_raise_r+0x12>
 800d14e:	2100      	movs	r1, #0
 800d150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d154:	4620      	mov	r0, r4
 800d156:	4798      	blx	r3
 800d158:	2000      	movs	r0, #0
 800d15a:	e7e0      	b.n	800d11e <_raise_r+0x12>

0800d15c <raise>:
 800d15c:	4b02      	ldr	r3, [pc, #8]	@ (800d168 <raise+0xc>)
 800d15e:	4601      	mov	r1, r0
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f7ff bfd3 	b.w	800d10c <_raise_r>
 800d166:	bf00      	nop
 800d168:	2000001c 	.word	0x2000001c

0800d16c <_kill_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4d07      	ldr	r5, [pc, #28]	@ (800d18c <_kill_r+0x20>)
 800d170:	2300      	movs	r3, #0
 800d172:	4604      	mov	r4, r0
 800d174:	4608      	mov	r0, r1
 800d176:	4611      	mov	r1, r2
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	f7f4 ff63 	bl	8002044 <_kill>
 800d17e:	1c43      	adds	r3, r0, #1
 800d180:	d102      	bne.n	800d188 <_kill_r+0x1c>
 800d182:	682b      	ldr	r3, [r5, #0]
 800d184:	b103      	cbz	r3, 800d188 <_kill_r+0x1c>
 800d186:	6023      	str	r3, [r4, #0]
 800d188:	bd38      	pop	{r3, r4, r5, pc}
 800d18a:	bf00      	nop
 800d18c:	20004efc 	.word	0x20004efc

0800d190 <_getpid_r>:
 800d190:	f7f4 bf50 	b.w	8002034 <_getpid>

0800d194 <__swhatbuf_r>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	460c      	mov	r4, r1
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	2900      	cmp	r1, #0
 800d19e:	b096      	sub	sp, #88	@ 0x58
 800d1a0:	4615      	mov	r5, r2
 800d1a2:	461e      	mov	r6, r3
 800d1a4:	da0d      	bge.n	800d1c2 <__swhatbuf_r+0x2e>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1ac:	f04f 0100 	mov.w	r1, #0
 800d1b0:	bf14      	ite	ne
 800d1b2:	2340      	movne	r3, #64	@ 0x40
 800d1b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	6031      	str	r1, [r6, #0]
 800d1bc:	602b      	str	r3, [r5, #0]
 800d1be:	b016      	add	sp, #88	@ 0x58
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
 800d1c2:	466a      	mov	r2, sp
 800d1c4:	f000 f848 	bl	800d258 <_fstat_r>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	dbec      	blt.n	800d1a6 <__swhatbuf_r+0x12>
 800d1cc:	9901      	ldr	r1, [sp, #4]
 800d1ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1d6:	4259      	negs	r1, r3
 800d1d8:	4159      	adcs	r1, r3
 800d1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1de:	e7eb      	b.n	800d1b8 <__swhatbuf_r+0x24>

0800d1e0 <__smakebuf_r>:
 800d1e0:	898b      	ldrh	r3, [r1, #12]
 800d1e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1e4:	079d      	lsls	r5, r3, #30
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	d507      	bpl.n	800d1fc <__smakebuf_r+0x1c>
 800d1ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	b003      	add	sp, #12
 800d1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1fc:	ab01      	add	r3, sp, #4
 800d1fe:	466a      	mov	r2, sp
 800d200:	f7ff ffc8 	bl	800d194 <__swhatbuf_r>
 800d204:	9f00      	ldr	r7, [sp, #0]
 800d206:	4605      	mov	r5, r0
 800d208:	4639      	mov	r1, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7fd fbcc 	bl	800a9a8 <_malloc_r>
 800d210:	b948      	cbnz	r0, 800d226 <__smakebuf_r+0x46>
 800d212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d216:	059a      	lsls	r2, r3, #22
 800d218:	d4ee      	bmi.n	800d1f8 <__smakebuf_r+0x18>
 800d21a:	f023 0303 	bic.w	r3, r3, #3
 800d21e:	f043 0302 	orr.w	r3, r3, #2
 800d222:	81a3      	strh	r3, [r4, #12]
 800d224:	e7e2      	b.n	800d1ec <__smakebuf_r+0xc>
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	6020      	str	r0, [r4, #0]
 800d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d236:	b15b      	cbz	r3, 800d250 <__smakebuf_r+0x70>
 800d238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d23c:	4630      	mov	r0, r6
 800d23e:	f000 f81d 	bl	800d27c <_isatty_r>
 800d242:	b128      	cbz	r0, 800d250 <__smakebuf_r+0x70>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	f023 0303 	bic.w	r3, r3, #3
 800d24a:	f043 0301 	orr.w	r3, r3, #1
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	431d      	orrs	r5, r3
 800d254:	81a5      	strh	r5, [r4, #12]
 800d256:	e7cf      	b.n	800d1f8 <__smakebuf_r+0x18>

0800d258 <_fstat_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d07      	ldr	r5, [pc, #28]	@ (800d278 <_fstat_r+0x20>)
 800d25c:	2300      	movs	r3, #0
 800d25e:	4604      	mov	r4, r0
 800d260:	4608      	mov	r0, r1
 800d262:	4611      	mov	r1, r2
 800d264:	602b      	str	r3, [r5, #0]
 800d266:	f7f4 ff4d 	bl	8002104 <_fstat>
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	d102      	bne.n	800d274 <_fstat_r+0x1c>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	b103      	cbz	r3, 800d274 <_fstat_r+0x1c>
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	bd38      	pop	{r3, r4, r5, pc}
 800d276:	bf00      	nop
 800d278:	20004efc 	.word	0x20004efc

0800d27c <_isatty_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d06      	ldr	r5, [pc, #24]	@ (800d298 <_isatty_r+0x1c>)
 800d280:	2300      	movs	r3, #0
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7f4 ff4c 	bl	8002124 <_isatty>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_isatty_r+0x1a>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_isatty_r+0x1a>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	20004efc 	.word	0x20004efc

0800d29c <_init>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	bf00      	nop
 800d2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a2:	bc08      	pop	{r3}
 800d2a4:	469e      	mov	lr, r3
 800d2a6:	4770      	bx	lr

0800d2a8 <_fini>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	bf00      	nop
 800d2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ae:	bc08      	pop	{r3}
 800d2b0:	469e      	mov	lr, r3
 800d2b2:	4770      	bx	lr
