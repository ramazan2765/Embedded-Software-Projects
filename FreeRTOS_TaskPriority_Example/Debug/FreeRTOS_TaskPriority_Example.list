
FreeRTOS_TaskPriority_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006764  08006764  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006764  08006764  00007764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800676c  0800676c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006774  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  2000006c  080067e0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb8  080067e0  00008bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016628  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003372  00000000  00000000  0001e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00021a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fed  00000000  00000000  00022ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004867  00000000  00000000  00023ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e02  00000000  00000000  00028714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a57c  00000000  00000000  0003e516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  000d8ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000dec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006578 	.word	0x08006578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006578 	.word	0x08006578

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fbc9 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f841 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8d1 	bl	8000770 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ce:	f000 f8a5 	bl	800071c <MX_USART1_UART_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Create tasks with different priorities */
      xTaskCreate(vLoggerTask, "Logger", 128, NULL, 1, NULL);         // Priority 1
 80005d2:	2300      	movs	r3, #0
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	4913      	ldr	r1, [pc, #76]	@ (800062c <main+0x70>)
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <main+0x74>)
 80005e2:	f002 ffb7 	bl	8003554 <xTaskCreate>
      xTaskCreate(vSensorTask, "Sensor", 128, NULL, 2, NULL);         // Priority 2
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	4910      	ldr	r1, [pc, #64]	@ (8000634 <main+0x78>)
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0x7c>)
 80005f6:	f002 ffad 	bl	8003554 <xTaskCreate>
      xTaskCreate(vCommTask, "Comm", 128, NULL, 3, NULL);             // Priority 3
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2303      	movs	r3, #3
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0x80>)
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <main+0x84>)
 800060a:	f002 ffa3 	bl	8003554 <xTaskCreate>
      xTaskCreate(vEmergencyTask, "Emergency", 128, NULL, 4, NULL);   // Priority 4
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2304      	movs	r3, #4
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	490a      	ldr	r1, [pc, #40]	@ (8000644 <main+0x88>)
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <main+0x8c>)
 800061e:	f002 ff99 	bl	8003554 <xTaskCreate>

      /* Start the scheduler */
      vTaskStartScheduler();
 8000622:	f003 f913 	bl	800384c <vTaskStartScheduler>

  while (1)
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0x6a>
 800062a:	bf00      	nop
 800062c:	08006590 	.word	0x08006590
 8000630:	080007a5 	.word	0x080007a5
 8000634:	08006598 	.word	0x08006598
 8000638:	080007f5 	.word	0x080007f5
 800063c:	080065a0 	.word	0x080065a0
 8000640:	0800085d 	.word	0x0800085d
 8000644:	080065a8 	.word	0x080065a8
 8000648:	080008b1 	.word	0x080008b1

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 ff3d 	bl	80054da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a26      	ldr	r2, [pc, #152]	@ (8000714 <SystemClock_Config+0xc8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <SystemClock_Config+0xcc>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c0:	2348      	movs	r3, #72	@ 0x48
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fde9 	bl	80012a8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f928 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f84b 	bl	8001798 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000708:	f000 f912 	bl	8000930 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f001 fca0 	bl	8002098 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8e7 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000088 	.word	0x20000088
 800076c:	40011000 	.word	0x40011000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x30>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x30>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x30>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <vLoggerTask>:

/**
 * @brief Lowest priority task. It only runs when CPU is idle.
 */
void vLoggerTask(void *pvParameters)
{
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b08e      	sub	sp, #56	@ 0x38
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	char msg[] = "[Logger] System is running normally...\r\n";
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <vLoggerTask+0x48>)
 80007ae:	f107 040c 	add.w	r4, r7, #12
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c0:	c403      	stmia	r4!, {r0, r1}
 80007c2:	7022      	strb	r2, [r4, #0]
    for(;;)
    {
        HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd09 	bl	80001e0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f107 010c 	add.w	r1, r7, #12
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <vLoggerTask+0x4c>)
 80007dc:	f001 fcac 	bl	8002138 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(2000));
 80007e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e4:	f002 fffc 	bl	80037e0 <vTaskDelay>
        HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007e8:	bf00      	nop
 80007ea:	e7eb      	b.n	80007c4 <vLoggerTask+0x20>
 80007ec:	080065b4 	.word	0x080065b4
 80007f0:	20000088 	.word	0x20000088

080007f4 <vSensorTask>:

/**
 * @brief Reads fake sensor data (simulated with random numbers).
 */
void vSensorTask(void *pvParameters)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	char msg[50];
	int sensorValue;

    for(;;)
    {
        sensorValue = rand() % 100;  // Simulated sensor data
 80007fc:	f004 fcf4 	bl	80051e8 <rand>
 8000800:	4603      	mov	r3, r0
 8000802:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <vSensorTask+0x5c>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1151      	asrs	r1, r2, #5
 800080a:	17da      	asrs	r2, r3, #31
 800080c:	1a8a      	subs	r2, r1, r2
 800080e:	2164      	movs	r1, #100	@ 0x64
 8000810:	fb01 f202 	mul.w	r2, r1, r2
 8000814:	1a9b      	subs	r3, r3, r2
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        snprintf(msg, sizeof(msg), "[Sensor] Value = %d\r\n", sensorValue);
 8000818:	f107 0008 	add.w	r0, r7, #8
 800081c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800081e:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <vSensorTask+0x60>)
 8000820:	2132      	movs	r1, #50	@ 0x32
 8000822:	f004 fde1 	bl	80053e8 <sniprintf>
        HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fcd8 	bl	80001e0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <vSensorTask+0x64>)
 800083e:	f001 fc7b 	bl	8002138 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1500));
 8000842:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000846:	f002 ffcb 	bl	80037e0 <vTaskDelay>
        sensorValue = rand() % 100;  // Simulated sensor data
 800084a:	bf00      	nop
 800084c:	e7d6      	b.n	80007fc <vSensorTask+0x8>
 800084e:	bf00      	nop
 8000850:	51eb851f 	.word	0x51eb851f
 8000854:	080065e0 	.word	0x080065e0
 8000858:	20000088 	.word	0x20000088

0800085c <vCommTask>:

/**
 * @brief Communication task that sends data over UART.
 */
void vCommTask(void *pvParameters)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	char msg[] = "[Comm] Sending data over UART...\r\n";
 8000864:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <vCommTask+0x4c>)
 8000866:	f107 040c 	add.w	r4, r7, #12
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	8022      	strh	r2, [r4, #0]
 800087a:	3402      	adds	r4, #2
 800087c:	0c1b      	lsrs	r3, r3, #16
 800087e:	7023      	strb	r3, [r4, #0]
	for(;;)
    {
		HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fcab 	bl	80001e0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <vCommTask+0x50>)
 8000898:	f001 fc4e 	bl	8002138 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 800089c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a0:	f002 ff9e 	bl	80037e0 <vTaskDelay>
		HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008a4:	bf00      	nop
 80008a6:	e7eb      	b.n	8000880 <vCommTask+0x24>
 80008a8:	080065f8 	.word	0x080065f8
 80008ac:	20000088 	.word	0x20000088

080008b0 <vEmergencyTask>:

/**
 * @brief Highest priority task. Interrupts all others when it runs.
 */
void vEmergencyTask(void *pvParameters)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b090      	sub	sp, #64	@ 0x40
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	char msg[] = "!!! [Emergency] Highest priority task is running !!!\r\n";
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <vEmergencyTask+0x54>)
 80008ba:	f107 0408 	add.w	r4, r7, #8
 80008be:	461d      	mov	r5, r3
 80008c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008d0:	6020      	str	r0, [r4, #0]
 80008d2:	3404      	adds	r4, #4
 80008d4:	8021      	strh	r1, [r4, #0]
 80008d6:	3402      	adds	r4, #2
 80008d8:	0c0b      	lsrs	r3, r1, #16
 80008da:	7023      	strb	r3, [r4, #0]
    for(;;)
    {
    	HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc7d 	bl	80001e0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f107 0108 	add.w	r1, r7, #8
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <vEmergencyTask+0x58>)
 80008f4:	f001 fc20 	bl	8002138 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(5000));  // Runs every 5 seconds
 80008f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008fc:	f002 ff70 	bl	80037e0 <vTaskDelay>
    	HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000900:	bf00      	nop
 8000902:	e7eb      	b.n	80008dc <vEmergencyTask+0x2c>
 8000904:	0800661c 	.word	0x0800661c
 8000908:	20000088 	.word	0x20000088

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800091e:	f000 fa3d 	bl	8000d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010000 	.word	0x40010000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000950:	6453      	str	r3, [r2, #68]	@ 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fae3 	bl	8000f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0c:	f000 fac8 	bl	8000fa0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <HAL_InitTick+0xd0>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000af4 <HAL_InitTick+0xd0>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a44:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <HAL_InitTick+0xd0>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 020c 	add.w	r2, r7, #12
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f87c 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a60:	f001 f866 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8000a64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_InitTick+0xd4>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <HAL_InitTick+0xdc>)
 8000a78:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a1e      	ldr	r2, [pc, #120]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <HAL_InitTick+0xd8>)
 8000a9c:	f001 f88e 	bl	8001bbc <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11b      	bne.n	8000ae6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aae:	4813      	ldr	r0, [pc, #76]	@ (8000afc <HAL_InitTick+0xd8>)
 8000ab0:	f001 f8de 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 fa5e 	bl	8000f84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	d808      	bhi.n	8000ae0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 fa3a 	bl	8000f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_InitTick+0xe0>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e002      	b.n	8000ae6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3730      	adds	r7, #48	@ 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	40010000 	.word	0x40010000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b46:	f001 f8f5 	bl	8001d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_kill>:

int _kill(int pid, int sig)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b6e:	f004 fd03 	bl	8005578 <__errno>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2216      	movs	r2, #22
 8000b76:	601a      	str	r2, [r3, #0]
  return -1;
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_exit>:

void _exit (int status)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffe7 	bl	8000b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b96:	bf00      	nop
 8000b98:	e7fd      	b.n	8000b96 <_exit+0x12>

08000b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e00a      	b.n	8000bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bac:	f3af 8000 	nop.w
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	60ba      	str	r2, [r7, #8]
 8000bb8:	b2ca      	uxtb	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dbf0      	blt.n	8000bac <_read+0x12>
  }

  return len;
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e009      	b.n	8000bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	60ba      	str	r2, [r7, #8]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbf1      	blt.n	8000be6 <_write+0x12>
  }
  return len;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_close>:

int _close(int file)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c34:	605a      	str	r2, [r3, #4]
  return 0;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_isatty>:

int _isatty(int file)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f004 fc68 	bl	8005578 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	20000118 	.word	0x20000118
 8000cdc:	20004bb8 	.word	0x20004bb8

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f004 fc27 	bl	8005584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc41 	bl	80005bc <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d48:	08006774 	.word	0x08006774
  ldr r2, =_sbss
 8000d4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d50:	20004bb8 	.word	0x20004bb8

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f8d8 	bl	8000f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff fe4c 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fdd6 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	2000011c 	.word	0x2000011c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000011c 	.word	0x2000011c

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	@ 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff4c 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5e:	f7ff ff61 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f7ff ffb1 	bl	8000ed0 <NVIC_EncodePriority>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff80 	bl	8000e7c <__NVIC_SetPriority>
}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff54 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e159      	b.n	8001270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8148 	bne.w	800126a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a2 	beq.w	800126a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b57      	ldr	r3, [pc, #348]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a56      	ldr	r2, [pc, #344]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a52      	ldr	r2, [pc, #328]	@ (800128c <HAL_GPIO_Init+0x2ec>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a49      	ldr	r2, [pc, #292]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x202>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a48      	ldr	r2, [pc, #288]	@ (8001294 <HAL_GPIO_Init+0x2f4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1fe>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	@ (8001298 <HAL_GPIO_Init+0x2f8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1fa>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	@ (800129c <HAL_GPIO_Init+0x2fc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1f6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1f2>
 800118e:	2304      	movs	r3, #4
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001192:	2307      	movs	r3, #7
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	@ (800128c <HAL_GPIO_Init+0x2ec>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123a:	4a1a      	ldr	r2, [pc, #104]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f aea2 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40013800 	.word	0x40013800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fd30 	bl	8000dc4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fd2c 	bl	8000dc4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fd1c 	bl	8000dc4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fd18 	bl	8000dc4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013be:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fcd1 	bl	8000dc4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fccd 	bl	8000dc4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fcb0 	bl	8000dc4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fcac 	bl	8000dc4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc90 	bl	8000dc4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc8c 	bl	8000dc4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fc79 	bl	8000dc4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc75 	bl	8000dc4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fc35 	bl	8000dc4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fc31 	bl	8000dc4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fbf6 	bl	8000dc4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fbf2 	bl	8000dc4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fbe0 	bl	8000dc4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fbdc 	bl	8000dc4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fbb0 	bl	8000dc4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fbac 	bl	8000dc4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb85 	bl	8000dc4 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb81 	bl	8000dc4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb6e 	bl	8000dc4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb6a 	bl	8000dc4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa9c 	bl	8000dc4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa98 	bl	8000dc4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f870 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	0800666c 	.word	0x0800666c
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b090      	sub	sp, #64	@ 0x40
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80a1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e09b      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800199c:	e09b      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019a2:	e098      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d028      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019cc:	2100      	movs	r1, #0
 80019ce:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	fb03 f201 	mul.w	r2, r3, r1
 80019d4:	2300      	movs	r3, #0
 80019d6:	fb00 f303 	mul.w	r3, r0, r3
 80019da:	4413      	add	r3, r2
 80019dc:	4a43      	ldr	r2, [pc, #268]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019de:	fba0 1202 	umull	r1, r2, r0, r2
 80019e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019e4:	460a      	mov	r2, r1
 80019e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ea:	4413      	add	r3, r2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2200      	movs	r2, #0
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	61fa      	str	r2, [r7, #28]
 80019f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019fe:	f7fe fc47 	bl	8000290 <__aeabi_uldivmod>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4613      	mov	r3, r2
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a0a:	e053      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	617a      	str	r2, [r7, #20]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a1e:	f04f 0b00 	mov.w	fp, #0
 8001a22:	4652      	mov	r2, sl
 8001a24:	465b      	mov	r3, fp
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a56:	ebb2 0408 	subs.w	r4, r2, r8
 8001a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	00eb      	lsls	r3, r5, #3
 8001a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6c:	00e2      	lsls	r2, r4, #3
 8001a6e:	4614      	mov	r4, r2
 8001a70:	461d      	mov	r5, r3
 8001a72:	eb14 030a 	adds.w	r3, r4, sl
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	eb45 030b 	adc.w	r3, r5, fp
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aa8:	f7fe fbf2 	bl	8000290 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3740      	adds	r7, #64	@ 0x40
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	017d7840 	.word	0x017d7840

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	0800667c 	.word	0x0800667c

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	0800667c 	.word	0x0800667c

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9b2 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e044      	b.n	8001d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d018      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb2:	d013      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00e      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d111      	bne.n	8001d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d010      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	e007      	b.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	40000c00 	.word	0x40000c00
 8001d30:	40014000 	.word	0x40014000

08001d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0202 	mvn.w	r2, #2
 8001d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8d2 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8c4 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8d5 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d020      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0204 	mvn.w	r2, #4
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8ac 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f89e 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8af 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f886 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f878 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f889 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f860 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f852 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f863 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fd36 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8e0 	bl	8002084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f834 	bl	8001f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0220 	mvn.w	r2, #32
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8b2 	bl	8002070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a37      	ldr	r2, [pc, #220]	@ (8002054 <TIM_Base_SetConfig+0xf0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a34      	ldr	r2, [pc, #208]	@ (8002058 <TIM_Base_SetConfig+0xf4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a33      	ldr	r2, [pc, #204]	@ (800205c <TIM_Base_SetConfig+0xf8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <TIM_Base_SetConfig+0xf0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a25      	ldr	r2, [pc, #148]	@ (8002058 <TIM_Base_SetConfig+0xf4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <TIM_Base_SetConfig+0xf8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <TIM_Base_SetConfig+0x100>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <TIM_Base_SetConfig+0x104>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	@ (800206c <TIM_Base_SetConfig+0x108>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0c      	ldr	r2, [pc, #48]	@ (8002054 <TIM_Base_SetConfig+0xf0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d103      	bne.n	800202e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f043 0204 	orr.w	r2, r3, #4
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800

08002070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e042      	b.n	8002130 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fc68 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f973 	bl	80023c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b20      	cmp	r3, #32
 8002156:	d175      	bne.n	8002244 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_UART_Transmit+0x2c>
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e06e      	b.n	8002246 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	@ 0x21
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002176:	f7fe fe25 	bl	8000dc4 <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	88fa      	ldrh	r2, [r7, #6]
 8002180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	88fa      	ldrh	r2, [r7, #6]
 8002186:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002190:	d108      	bne.n	80021a4 <HAL_UART_Transmit+0x6c>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	e003      	b.n	80021ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021ac:	e02e      	b.n	800220c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	@ 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f848 	bl	800224e <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e03a      	b.n	8002246 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	3302      	adds	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e007      	b.n	80021fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1cb      	bne.n	80021ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	2140      	movs	r1, #64	@ 0x40
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f814 	bl	800224e <UART_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225e:	e03b      	b.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d037      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7fe fdac 	bl	8000dc4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	6a3a      	ldr	r2, [r7, #32]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <UART_WaitOnFlagUntilTimeout+0x30>
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03a      	b.n	80022f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b80      	cmp	r3, #128	@ 0x80
 8002294:	d020      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d01d      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d116      	bne.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f81d 	bl	8002300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2208      	movs	r2, #8
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00f      	b.n	80022f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4013      	ands	r3, r2
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d0b4      	beq.n	8002260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002300:	b480      	push	{r7}
 8002302:	b095      	sub	sp, #84	@ 0x54
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002312:	e853 3f00 	ldrex	r3, [r3]
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800231e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002328:	643a      	str	r2, [r7, #64]	@ 0x40
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800232e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002330:	e841 2300 	strex	r3, r2, [r1]
 8002334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e5      	bne.n	8002308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3314      	adds	r3, #20
 8002342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	61fb      	str	r3, [r7, #28]
   return(result);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3314      	adds	r3, #20
 800235a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800235c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e5      	bne.n	800233c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	2b01      	cmp	r3, #1
 8002376:	d119      	bne.n	80023ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	e853 3f00 	ldrex	r3, [r3]
 8002386:	60bb      	str	r3, [r7, #8]
   return(result);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0310 	bic.w	r3, r3, #16
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002398:	61ba      	str	r2, [r7, #24]
 800239a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	e841 2300 	strex	r3, r2, [r1]
 80023a4:	613b      	str	r3, [r7, #16]
   return(result);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e5      	bne.n	8002378 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023ba:	bf00      	nop
 80023bc:	3754      	adds	r7, #84	@ 0x54
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b0c0      	sub	sp, #256	@ 0x100
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e4:	68d9      	ldr	r1, [r3, #12]
 80023e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	ea40 0301 	orr.w	r3, r0, r1
 80023f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	431a      	orrs	r2, r3
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	431a      	orrs	r2, r3
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002420:	f021 010c 	bic.w	r1, r1, #12
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002442:	6999      	ldr	r1, [r3, #24]
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	ea40 0301 	orr.w	r3, r0, r1
 800244e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b8f      	ldr	r3, [pc, #572]	@ (8002694 <UART_SetConfig+0x2cc>)
 8002458:	429a      	cmp	r2, r3
 800245a:	d005      	beq.n	8002468 <UART_SetConfig+0xa0>
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <UART_SetConfig+0x2d0>)
 8002464:	429a      	cmp	r2, r3
 8002466:	d104      	bne.n	8002472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002468:	f7ff fb62 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 800246c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002470:	e003      	b.n	800247a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002472:	f7ff fb49 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002476:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002484:	f040 810c 	bne.w	80026a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800248c:	2200      	movs	r2, #0
 800248e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002492:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800249a:	4622      	mov	r2, r4
 800249c:	462b      	mov	r3, r5
 800249e:	1891      	adds	r1, r2, r2
 80024a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024a2:	415b      	adcs	r3, r3
 80024a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024aa:	4621      	mov	r1, r4
 80024ac:	eb12 0801 	adds.w	r8, r2, r1
 80024b0:	4629      	mov	r1, r5
 80024b2:	eb43 0901 	adc.w	r9, r3, r1
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ca:	4690      	mov	r8, r2
 80024cc:	4699      	mov	r9, r3
 80024ce:	4623      	mov	r3, r4
 80024d0:	eb18 0303 	adds.w	r3, r8, r3
 80024d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024d8:	462b      	mov	r3, r5
 80024da:	eb49 0303 	adc.w	r3, r9, r3
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024f6:	460b      	mov	r3, r1
 80024f8:	18db      	adds	r3, r3, r3
 80024fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80024fc:	4613      	mov	r3, r2
 80024fe:	eb42 0303 	adc.w	r3, r2, r3
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54
 8002504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800250c:	f7fd fec0 	bl	8000290 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4b61      	ldr	r3, [pc, #388]	@ (800269c <UART_SetConfig+0x2d4>)
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	011c      	lsls	r4, r3, #4
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002528:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800252c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002538:	415b      	adcs	r3, r3
 800253a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800253c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002540:	4641      	mov	r1, r8
 8002542:	eb12 0a01 	adds.w	sl, r2, r1
 8002546:	4649      	mov	r1, r9
 8002548:	eb43 0b01 	adc.w	fp, r3, r1
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800255c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002560:	4692      	mov	sl, r2
 8002562:	469b      	mov	fp, r3
 8002564:	4643      	mov	r3, r8
 8002566:	eb1a 0303 	adds.w	r3, sl, r3
 800256a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800256e:	464b      	mov	r3, r9
 8002570:	eb4b 0303 	adc.w	r3, fp, r3
 8002574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002584:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800258c:	460b      	mov	r3, r1
 800258e:	18db      	adds	r3, r3, r3
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
 8002592:	4613      	mov	r3, r2
 8002594:	eb42 0303 	adc.w	r3, r2, r3
 8002598:	647b      	str	r3, [r7, #68]	@ 0x44
 800259a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800259e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025a2:	f7fd fe75 	bl	8000290 <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <UART_SetConfig+0x2d4>)
 80025ae:	fba3 2301 	umull	r2, r3, r3, r1
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2264      	movs	r2, #100	@ 0x64
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	1acb      	subs	r3, r1, r3
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025c2:	4b36      	ldr	r3, [pc, #216]	@ (800269c <UART_SetConfig+0x2d4>)
 80025c4:	fba3 2302 	umull	r2, r3, r3, r2
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025d0:	441c      	add	r4, r3
 80025d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025ec:	415b      	adcs	r3, r3
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025f4:	4641      	mov	r1, r8
 80025f6:	1851      	adds	r1, r2, r1
 80025f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80025fa:	4649      	mov	r1, r9
 80025fc:	414b      	adcs	r3, r1
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800260c:	4659      	mov	r1, fp
 800260e:	00cb      	lsls	r3, r1, #3
 8002610:	4651      	mov	r1, sl
 8002612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002616:	4651      	mov	r1, sl
 8002618:	00ca      	lsls	r2, r1, #3
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	4603      	mov	r3, r0
 8002620:	4642      	mov	r2, r8
 8002622:	189b      	adds	r3, r3, r2
 8002624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002628:	464b      	mov	r3, r9
 800262a:	460a      	mov	r2, r1
 800262c:	eb42 0303 	adc.w	r3, r2, r3
 8002630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002640:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002648:	460b      	mov	r3, r1
 800264a:	18db      	adds	r3, r3, r3
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264e:	4613      	mov	r3, r2
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800265a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800265e:	f7fd fe17 	bl	8000290 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <UART_SetConfig+0x2d4>)
 8002668:	fba3 1302 	umull	r1, r3, r3, r2
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	2164      	movs	r1, #100	@ 0x64
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	3332      	adds	r3, #50	@ 0x32
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <UART_SetConfig+0x2d4>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	f003 0207 	and.w	r2, r3, #7
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4422      	add	r2, r4
 800268e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002690:	e106      	b.n	80028a0 <UART_SetConfig+0x4d8>
 8002692:	bf00      	nop
 8002694:	40011000 	.word	0x40011000
 8002698:	40011400 	.word	0x40011400
 800269c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026b2:	4642      	mov	r2, r8
 80026b4:	464b      	mov	r3, r9
 80026b6:	1891      	adds	r1, r2, r2
 80026b8:	6239      	str	r1, [r7, #32]
 80026ba:	415b      	adcs	r3, r3
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026c2:	4641      	mov	r1, r8
 80026c4:	1854      	adds	r4, r2, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	eb43 0501 	adc.w	r5, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	00eb      	lsls	r3, r5, #3
 80026d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026da:	00e2      	lsls	r2, r4, #3
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	4643      	mov	r3, r8
 80026e2:	18e3      	adds	r3, r4, r3
 80026e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026e8:	464b      	mov	r3, r9
 80026ea:	eb45 0303 	adc.w	r3, r5, r3
 80026ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800270e:	4629      	mov	r1, r5
 8002710:	008b      	lsls	r3, r1, #2
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002718:	4621      	mov	r1, r4
 800271a:	008a      	lsls	r2, r1, #2
 800271c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002720:	f7fd fdb6 	bl	8000290 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4b60      	ldr	r3, [pc, #384]	@ (80028ac <UART_SetConfig+0x4e4>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011c      	lsls	r4, r3, #4
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800273c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	61b9      	str	r1, [r7, #24]
 800274c:	415b      	adcs	r3, r3
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002754:	4641      	mov	r1, r8
 8002756:	1851      	adds	r1, r2, r1
 8002758:	6139      	str	r1, [r7, #16]
 800275a:	4649      	mov	r1, r9
 800275c:	414b      	adcs	r3, r1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800276c:	4659      	mov	r1, fp
 800276e:	00cb      	lsls	r3, r1, #3
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002776:	4651      	mov	r1, sl
 8002778:	00ca      	lsls	r2, r1, #3
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	4603      	mov	r3, r0
 8002780:	4642      	mov	r2, r8
 8002782:	189b      	adds	r3, r3, r2
 8002784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002788:	464b      	mov	r3, r9
 800278a:	460a      	mov	r2, r1
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800279e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027ac:	4649      	mov	r1, r9
 80027ae:	008b      	lsls	r3, r1, #2
 80027b0:	4641      	mov	r1, r8
 80027b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b6:	4641      	mov	r1, r8
 80027b8:	008a      	lsls	r2, r1, #2
 80027ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027be:	f7fd fd67 	bl	8000290 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	4b38      	ldr	r3, [pc, #224]	@ (80028ac <UART_SetConfig+0x4e4>)
 80027ca:	fba3 2301 	umull	r2, r3, r3, r1
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2264      	movs	r2, #100	@ 0x64
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	1acb      	subs	r3, r1, r3
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	3332      	adds	r3, #50	@ 0x32
 80027dc:	4a33      	ldr	r2, [pc, #204]	@ (80028ac <UART_SetConfig+0x4e4>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e8:	441c      	add	r4, r3
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80027f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80027f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	415b      	adcs	r3, r3
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002808:	4641      	mov	r1, r8
 800280a:	1851      	adds	r1, r2, r1
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	4649      	mov	r1, r9
 8002810:	414b      	adcs	r3, r1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002820:	4659      	mov	r1, fp
 8002822:	00cb      	lsls	r3, r1, #3
 8002824:	4651      	mov	r1, sl
 8002826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282a:	4651      	mov	r1, sl
 800282c:	00ca      	lsls	r2, r1, #3
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	4603      	mov	r3, r0
 8002834:	4642      	mov	r2, r8
 8002836:	189b      	adds	r3, r3, r2
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800283a:	464b      	mov	r3, r9
 800283c:	460a      	mov	r2, r1
 800283e:	eb42 0303 	adc.w	r3, r2, r3
 8002842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	663b      	str	r3, [r7, #96]	@ 0x60
 800284e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800285c:	4649      	mov	r1, r9
 800285e:	008b      	lsls	r3, r1, #2
 8002860:	4641      	mov	r1, r8
 8002862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002866:	4641      	mov	r1, r8
 8002868:	008a      	lsls	r2, r1, #2
 800286a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800286e:	f7fd fd0f 	bl	8000290 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <UART_SetConfig+0x4e4>)
 8002878:	fba3 1302 	umull	r1, r3, r3, r2
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	2164      	movs	r1, #100	@ 0x64
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	3332      	adds	r3, #50	@ 0x32
 800288a:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <UART_SetConfig+0x4e4>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4422      	add	r2, r4
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028a6:	46bd      	mov	sp, r7
 80028a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ac:	51eb851f 	.word	0x51eb851f

080028b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <SysTick_Handler+0x1c>)
 80028b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028b8:	f001 fc16 	bl	80040e8 <xTaskGetSchedulerState>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028c2:	f002 fa11 	bl	8004ce8 <xPortSysTickHandler>
  }
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010

080028d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <vApplicationGetIdleTaskMemory+0x2c>)
 80028e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <vApplicationGetIdleTaskMemory+0x30>)
 80028e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000120 	.word	0x20000120
 8002900:	2000017c 	.word	0x2000017c

08002904 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <vApplicationGetTimerTaskMemory+0x2c>)
 8002914:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <vApplicationGetTimerTaskMemory+0x30>)
 800291a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	2000037c 	.word	0x2000037c
 8002934:	200003d8 	.word	0x200003d8

08002938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f103 0208 	add.w	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f103 0208 	add.w	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d103      	bne.n	80029fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e00c      	b.n	8002a14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3308      	adds	r3, #8
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e002      	b.n	8002a08 <vListInsert+0x2e>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d2f6      	bcs.n	8002a02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6852      	ldr	r2, [r2, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d103      	bne.n	8002a80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002acc:	f002 f87c 	bl	8004bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	441a      	add	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	3b01      	subs	r3, #1
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	441a      	add	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	22ff      	movs	r2, #255	@ 0xff
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d114      	bne.n	8002b4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01a      	beq.n	8002b60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f91a 	bl	8003d68 <xTaskRemoveFromEventList>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <xQueueGenericReset+0xd0>)
 8002b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	e009      	b.n	8002b60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3310      	adds	r3, #16
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fef1 	bl	8002938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3324      	adds	r3, #36	@ 0x24
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff feec 	bl	8002938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b60:	f002 f864 	bl	8004c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	@ 0x38
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <xQueueGenericCreateStatic+0x56>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <xQueueGenericCreateStatic+0x5a>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericCreateStatic+0x5c>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <xQueueGenericCreateStatic+0x84>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <xQueueGenericCreateStatic+0x88>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <xQueueGenericCreateStatic+0x8a>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10b      	bne.n	8002c1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	61fb      	str	r3, [r7, #28]
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	e7fd      	b.n	8002c16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c1a:	2350      	movs	r3, #80	@ 0x50
 8002c1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b50      	cmp	r3, #80	@ 0x50
 8002c22:	d00b      	beq.n	8002c3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61bb      	str	r3, [r7, #24]
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f805 	bl	8002c6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	@ 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e002      	b.n	8002c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	69b8      	ldr	r0, [r7, #24]
 8002ca0:	f7ff fefe 	bl	8002aa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	@ 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <xQueueGenericSend+0x34>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <xQueueGenericSend+0x42>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueGenericSend+0x46>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueGenericSend+0x48>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <xQueueGenericSend+0x64>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d103      	bne.n	8002d26 <xQueueGenericSend+0x72>
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <xQueueGenericSend+0x76>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <xQueueGenericSend+0x78>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueGenericSend+0x94>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	623b      	str	r3, [r7, #32]
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d48:	f001 f9ce 	bl	80040e8 <xTaskGetSchedulerState>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <xQueueGenericSend+0xa4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xQueueGenericSend+0xa8>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xQueueGenericSend+0xaa>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <xQueueGenericSend+0xc6>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	61fb      	str	r3, [r7, #28]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d7a:	f001 ff25 	bl	8004bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <xQueueGenericSend+0xdc>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d129      	bne.n	8002de4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d96:	f000 fa0f 	bl	80031b8 <prvCopyDataToQueue>
 8002d9a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	3324      	adds	r3, #36	@ 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 ffdd 	bl	8003d68 <xTaskRemoveFromEventList>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <xQueueGenericSend+0x200>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	e00a      	b.n	8002ddc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b39      	ldr	r3, [pc, #228]	@ (8002eb4 <xQueueGenericSend+0x200>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ddc:	f001 ff26 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e063      	b.n	8002eac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dea:	f001 ff1f 	bl	8004c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e05c      	b.n	8002eac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 f817 	bl	8003e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e06:	f001 ff11 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e0a:	f000 fd87 	bl	800391c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e0e:	f001 fedb 	bl	8004bc8 <vPortEnterCritical>
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d103      	bne.n	8002e28 <xQueueGenericSend+0x174>
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d103      	bne.n	8002e3e <xQueueGenericSend+0x18a>
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e3e:	f001 fef5 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e42:	1d3a      	adds	r2, r7, #4
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 f806 	bl	8003e5c <xTaskCheckForTimeOut>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d124      	bne.n	8002ea0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e58:	f000 faa6 	bl	80033a8 <prvIsQueueFull>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	3310      	adds	r3, #16
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ff2a 	bl	8003cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e72:	f000 fa31 	bl	80032d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e76:	f000 fd5f 	bl	8003938 <xTaskResumeAll>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f af7c 	bne.w	8002d7a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <xQueueGenericSend+0x200>)
 8002e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	e772      	b.n	8002d7a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e96:	f000 fa1f 	bl	80032d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e9a:	f000 fd4d 	bl	8003938 <xTaskResumeAll>
 8002e9e:	e76c      	b.n	8002d7a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea2:	f000 fa19 	bl	80032d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ea6:	f000 fd47 	bl	8003938 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3738      	adds	r7, #56	@ 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	e000ed04 	.word	0xe000ed04

08002eb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	@ 0x40
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <xQueueGenericSendFromISR+0x3e>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGenericSendFromISR+0x42>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericSendFromISR+0x44>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d103      	bne.n	8002f26 <xQueueGenericSendFromISR+0x6e>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <xQueueGenericSendFromISR+0x72>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <xQueueGenericSendFromISR+0x74>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	623b      	str	r3, [r7, #32]
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f48:	f001 ff1e 	bl	8004d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f4c:	f3ef 8211 	mrs	r2, BASEPRI
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f64:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <xQueueGenericSendFromISR+0xc2>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d12f      	bne.n	8002fda <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f90:	f000 f912 	bl	80031b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f94:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d112      	bne.n	8002fc4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa8:	3324      	adds	r3, #36	@ 0x24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fedc 	bl	8003d68 <xTaskRemoveFromEventList>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e007      	b.n	8002fd4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	b25a      	sxtb	r2, r3
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002fd8:	e001      	b.n	8002fde <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fe8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3740      	adds	r7, #64	@ 0x40
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	@ 0x30
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <xQueueReceive+0x32>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	623b      	str	r3, [r7, #32]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueReceive+0x40>
 800302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueReceive+0x44>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueReceive+0x46>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <xQueueReceive+0x62>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	61fb      	str	r3, [r7, #28]
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003056:	f001 f847 	bl	80040e8 <xTaskGetSchedulerState>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <xQueueReceive+0x72>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <xQueueReceive+0x76>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueReceive+0x78>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <xQueueReceive+0x94>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61bb      	str	r3, [r7, #24]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003088:	f001 fd9e 	bl	8004bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01f      	beq.n	80030d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800309c:	f000 f8f6 	bl	800328c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00f      	beq.n	80030d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	3310      	adds	r3, #16
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fe57 	bl	8003d68 <xTaskRemoveFromEventList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030c0:	4b3c      	ldr	r3, [pc, #240]	@ (80031b4 <xQueueReceive+0x1c0>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030d0:	f001 fdac 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e069      	b.n	80031ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030de:	f001 fda5 	bl	8004c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e062      	b.n	80031ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fe9d 	bl	8003e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030fa:	f001 fd97 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030fe:	f000 fc0d 	bl	800391c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003102:	f001 fd61 	bl	8004bc8 <vPortEnterCritical>
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800310c:	b25b      	sxtb	r3, r3
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d103      	bne.n	800311c <xQueueReceive+0x128>
 8003114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003122:	b25b      	sxtb	r3, r3
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d103      	bne.n	8003132 <xQueueReceive+0x13e>
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003132:	f001 fd7b 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003136:	1d3a      	adds	r2, r7, #4
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe8c 	bl	8003e5c <xTaskCheckForTimeOut>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d123      	bne.n	8003192 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800314a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314c:	f000 f916 	bl	800337c <prvIsQueueEmpty>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d017      	beq.n	8003186 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	3324      	adds	r3, #36	@ 0x24
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fdb0 	bl	8003cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003166:	f000 f8b7 	bl	80032d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800316a:	f000 fbe5 	bl	8003938 <xTaskResumeAll>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d189      	bne.n	8003088 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <xQueueReceive+0x1c0>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	e780      	b.n	8003088 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003188:	f000 f8a6 	bl	80032d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318c:	f000 fbd4 	bl	8003938 <xTaskResumeAll>
 8003190:	e77a      	b.n	8003088 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003194:	f000 f8a0 	bl	80032d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003198:	f000 fbce 	bl	8003938 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800319e:	f000 f8ed 	bl	800337c <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f43f af6f 	beq.w	8003088 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3730      	adds	r7, #48	@ 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d14d      	bne.n	800327a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 ff9e 	bl	8004124 <xTaskPriorityDisinherit>
 80031e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	e043      	b.n	800327a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d119      	bne.n	800322c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6858      	ldr	r0, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	461a      	mov	r2, r3
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	f002 f9e5 	bl	80055d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d32b      	bcc.n	800327a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e026      	b.n	800327a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68d8      	ldr	r0, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f002 f9cb 	bl	80055d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	425b      	negs	r3, r3
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	425b      	negs	r3, r3
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d105      	bne.n	800327a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3b01      	subs	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003282:	697b      	ldr	r3, [r7, #20]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d303      	bcc.n	80032c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	461a      	mov	r2, r3
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f002 f981 	bl	80055d2 <memcpy>
	}
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032e0:	f001 fc72 	bl	8004bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ec:	e011      	b.n	8003312 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	@ 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fd34 	bl	8003d68 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003306:	f000 fe0d 	bl	8003f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dce9      	bgt.n	80032ee <prvUnlockQueue+0x16>
 800331a:	e000      	b.n	800331e <prvUnlockQueue+0x46>
					break;
 800331c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	22ff      	movs	r2, #255	@ 0xff
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003326:	f001 fc81 	bl	8004c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800332a:	f001 fc4d 	bl	8004bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003334:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003336:	e011      	b.n	800335c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3310      	adds	r3, #16
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fd0f 	bl	8003d68 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003350:	f000 fde8 	bl	8003f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800335c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dce9      	bgt.n	8003338 <prvUnlockQueue+0x60>
 8003364:	e000      	b.n	8003368 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003366:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003370:	f001 fc5c 	bl	8004c2c <vPortExitCritical>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003384:	f001 fc20 	bl	8004bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800339a:	f001 fc47 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033b0:	f001 fc0a 	bl	8004bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d102      	bne.n	80033c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e001      	b.n	80033ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ca:	f001 fc2f 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e014      	b.n	8003412 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <vQueueAddToRegistry+0x50>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033f4:	490c      	ldr	r1, [pc, #48]	@ (8003428 <vQueueAddToRegistry+0x50>)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <vQueueAddToRegistry+0x50>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800340a:	e006      	b.n	800341a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b07      	cmp	r3, #7
 8003416:	d9e7      	bls.n	80033e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200007d8 	.word	0x200007d8

0800342c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800343c:	f001 fbc4 	bl	8004bc8 <vPortEnterCritical>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <vQueueWaitForMessageRestricted+0x2a>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d103      	bne.n	800346c <vQueueWaitForMessageRestricted+0x40>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800346c:	f001 fbde 	bl	8004c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3324      	adds	r3, #36	@ 0x24
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fc45 	bl	8003d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff26 	bl	80032d8 <prvUnlockQueue>
	}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	@ 0x38
 8003498:	af04      	add	r7, sp, #16
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	623b      	str	r3, [r7, #32]
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <xTaskCreateStatic+0x4a>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	61fb      	str	r3, [r7, #28]
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	e7fd      	b.n	80034da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034de:	235c      	movs	r3, #92	@ 0x5c
 80034e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80034e6:	d00b      	beq.n	8003500 <xTaskCreateStatic+0x6c>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61bb      	str	r3, [r7, #24]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003500:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01e      	beq.n	8003546 <xTaskCreateStatic+0xb2>
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01b      	beq.n	8003546 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003520:	2300      	movs	r3, #0
 8003522:	9303      	str	r3, [sp, #12]
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f850 	bl	80035de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800353e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003540:	f000 f8de 	bl	8003700 <prvAddNewTaskToReadyList>
 8003544:	e001      	b.n	800354a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800354a:	697b      	ldr	r3, [r7, #20]
	}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af04      	add	r7, sp, #16
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f001 fc4f 	bl	8004e0c <pvPortMalloc>
 800356e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003576:	205c      	movs	r0, #92	@ 0x5c
 8003578:	f001 fc48 	bl	8004e0c <pvPortMalloc>
 800357c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
 800358a:	e005      	b.n	8003598 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800358c:	6978      	ldr	r0, [r7, #20]
 800358e:	f001 fd0b 	bl	8004fa8 <vPortFree>
 8003592:	e001      	b.n	8003598 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9303      	str	r3, [sp, #12]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	9302      	str	r3, [sp, #8]
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f80e 	bl	80035de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035c2:	69f8      	ldr	r0, [r7, #28]
 80035c4:	f000 f89c 	bl	8003700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035c8:	2301      	movs	r3, #1
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e002      	b.n	80035d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035d4:	69bb      	ldr	r3, [r7, #24]
	}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	21a5      	movs	r1, #165	@ 0xa5
 80035f8:	f001 ff6f 	bl	80054da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003606:	3b01      	subs	r3, #1
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f023 0307 	bic.w	r3, r3, #7
 8003614:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	617b      	str	r3, [r7, #20]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01f      	beq.n	800367e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e012      	b.n	800366a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	7819      	ldrb	r1, [r3, #0]
 800364c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	3334      	adds	r3, #52	@ 0x34
 8003654:	460a      	mov	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	3301      	adds	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d9e9      	bls.n	8003644 <prvInitialiseNewTask+0x66>
 8003670:	e000      	b.n	8003674 <prvInitialiseNewTask+0x96>
			{
				break;
 8003672:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800367c:	e003      	b.n	8003686 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	2b37      	cmp	r3, #55	@ 0x37
 800368a:	d901      	bls.n	8003690 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800368c:	2337      	movs	r3, #55	@ 0x37
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003694:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800369a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	2200      	movs	r2, #0
 80036a0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f966 	bl	8002978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	3318      	adds	r3, #24
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f961 	bl	8002978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68f9      	ldr	r1, [r7, #12]
 80036de:	69b8      	ldr	r0, [r7, #24]
 80036e0:	f001 f93e 	bl	8004960 <pxPortInitialiseStack>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f6:	bf00      	nop
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003708:	f001 fa5e 	bl	8004bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a2c      	ldr	r2, [pc, #176]	@ (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003716:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800371e:	4a2a      	ldr	r2, [pc, #168]	@ (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003724:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d110      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800372c:	f000 fc1e 	bl	8003f6c <prvInitialiseTaskLists>
 8003730:	e00d      	b.n	800374e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003732:	4b26      	ldr	r3, [pc, #152]	@ (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373a:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d802      	bhi.n	800374e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003748:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800374e:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a1e      	ldr	r2, [pc, #120]	@ (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003756:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003764:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <prvAddNewTaskToReadyList+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <prvAddNewTaskToReadyList+0xd8>)
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7ff f901 	bl	8002992 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003790:	f001 fa4c 	bl	8004c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d207      	bcs.n	80037ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <prvAddNewTaskToReadyList+0xdc>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000cec 	.word	0x20000cec
 80037c8:	20000818 	.word	0x20000818
 80037cc:	20000cf8 	.word	0x20000cf8
 80037d0:	20000d08 	.word	0x20000d08
 80037d4:	20000cf4 	.word	0x20000cf4
 80037d8:	2000081c 	.word	0x2000081c
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d018      	beq.n	8003824 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037f2:	4b14      	ldr	r3, [pc, #80]	@ (8003844 <vTaskDelay+0x64>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <vTaskDelay+0x32>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	e7fd      	b.n	800380e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003812:	f000 f883 	bl	800391c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003816:	2100      	movs	r1, #0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fcf3 	bl	8004204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800381e:	f000 f88b 	bl	8003938 <xTaskResumeAll>
 8003822:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <vTaskDelay+0x68>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000d14 	.word	0x20000d14
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	@ 0x28
 8003850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800385a:	463a      	mov	r2, r7
 800385c:	1d39      	adds	r1, r7, #4
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f834 	bl	80028d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	9202      	str	r2, [sp, #8]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	460a      	mov	r2, r1
 800387a:	4922      	ldr	r1, [pc, #136]	@ (8003904 <vTaskStartScheduler+0xb8>)
 800387c:	4822      	ldr	r0, [pc, #136]	@ (8003908 <vTaskStartScheduler+0xbc>)
 800387e:	f7ff fe09 	bl	8003494 <xTaskCreateStatic>
 8003882:	4603      	mov	r3, r0
 8003884:	4a21      	ldr	r2, [pc, #132]	@ (800390c <vTaskStartScheduler+0xc0>)
 8003886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <vTaskStartScheduler+0xc0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e001      	b.n	800389a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038a0:	f000 fd04 	bl	80042ac <xTimerCreateTimerTask>
 80038a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d116      	bne.n	80038da <vTaskStartScheduler+0x8e>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
}
 80038be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <vTaskStartScheduler+0xc4>)
 80038c2:	f04f 32ff 	mov.w	r2, #4294967295
 80038c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c8:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <vTaskStartScheduler+0xc8>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <vTaskStartScheduler+0xcc>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038d4:	f001 f8d4 	bl	8004a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d8:	e00f      	b.n	80038fa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d10b      	bne.n	80038fa <vTaskStartScheduler+0xae>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	60fb      	str	r3, [r7, #12]
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	e7fd      	b.n	80038f6 <vTaskStartScheduler+0xaa>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	08006654 	.word	0x08006654
 8003908:	08003f3d 	.word	0x08003f3d
 800390c:	20000d10 	.word	0x20000d10
 8003910:	20000d0c 	.word	0x20000d0c
 8003914:	20000cf8 	.word	0x20000cf8
 8003918:	20000cf0 	.word	0x20000cf0

0800391c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003920:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a03      	ldr	r2, [pc, #12]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003928:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000d14 	.word	0x20000d14

08003938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003946:	4b42      	ldr	r3, [pc, #264]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xTaskResumeAll+0x2e>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	603b      	str	r3, [r7, #0]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003966:	f001 f92f 	bl	8004bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800396a:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <xTaskResumeAll+0x118>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	4a37      	ldr	r2, [pc, #220]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003972:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003974:	4b36      	ldr	r3, [pc, #216]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d162      	bne.n	8003a42 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800397c:	4b35      	ldr	r3, [pc, #212]	@ (8003a54 <xTaskResumeAll+0x11c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05e      	beq.n	8003a42 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003984:	e02f      	b.n	80039e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b34      	ldr	r3, [pc, #208]	@ (8003a58 <xTaskResumeAll+0x120>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3318      	adds	r3, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f85a 	bl	8002a4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f855 	bl	8002a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <xTaskResumeAll+0x124>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d903      	bls.n	80039b6 <xTaskResumeAll+0x7e>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <xTaskResumeAll+0x124>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <xTaskResumeAll+0x128>)
 80039c4:	441a      	add	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe ffe0 	bl	8002992 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <xTaskResumeAll+0x12c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039e0:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <xTaskResumeAll+0x130>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <xTaskResumeAll+0x120>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1cb      	bne.n	8003986 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039f4:	f000 fb58 	bl	80040a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039f8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <xTaskResumeAll+0x134>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a04:	f000 f846 	bl	8003a94 <xTaskIncrementTick>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <xTaskResumeAll+0x130>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f1      	bne.n	8003a04 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003a20:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <xTaskResumeAll+0x134>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <xTaskResumeAll+0x130>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <xTaskResumeAll+0x138>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f001 f8f3 	bl	8004c2c <vPortExitCritical>

	return xAlreadyYielded;
 8003a46:	68bb      	ldr	r3, [r7, #8]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000d14 	.word	0x20000d14
 8003a54:	20000cec 	.word	0x20000cec
 8003a58:	20000cac 	.word	0x20000cac
 8003a5c:	20000cf4 	.word	0x20000cf4
 8003a60:	2000081c 	.word	0x2000081c
 8003a64:	20000818 	.word	0x20000818
 8003a68:	20000d00 	.word	0x20000d00
 8003a6c:	20000cfc 	.word	0x20000cfc
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a7a:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <xTaskGetTickCount+0x1c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000cf0 	.word	0x20000cf0

08003a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bdc <xTaskIncrementTick+0x148>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8090 	bne.w	8003bc8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8003be0 <xTaskIncrementTick+0x14c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8003be0 <xTaskIncrementTick+0x14c>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d121      	bne.n	8003b00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003abc:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <xTaskIncrementTick+0x150>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	603b      	str	r3, [r7, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <xTaskIncrementTick+0x46>
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <xTaskIncrementTick+0x150>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <xTaskIncrementTick+0x154>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8003be4 <xTaskIncrementTick+0x150>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4a3e      	ldr	r2, [pc, #248]	@ (8003be8 <xTaskIncrementTick+0x154>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <xTaskIncrementTick+0x158>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bec <xTaskIncrementTick+0x158>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	f000 fad4 	bl	80040a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b00:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <xTaskIncrementTick+0x15c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d349      	bcc.n	8003b9e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b0a:	4b36      	ldr	r3, [pc, #216]	@ (8003be4 <xTaskIncrementTick+0x150>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b14:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <xTaskIncrementTick+0x15c>)
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1a:	601a      	str	r2, [r3, #0]
					break;
 8003b1c:	e03f      	b.n	8003b9e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b1e:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <xTaskIncrementTick+0x150>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d203      	bcs.n	8003b3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b36:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <xTaskIncrementTick+0x15c>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b3c:	e02f      	b.n	8003b9e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ff82 	bl	8002a4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe ff79 	bl	8002a4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b5e:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <xTaskIncrementTick+0x160>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d903      	bls.n	8003b6e <xTaskIncrementTick+0xda>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <xTaskIncrementTick+0x160>)
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <xTaskIncrementTick+0x164>)
 8003b7c:	441a      	add	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fe ff04 	bl	8002992 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bfc <xTaskIncrementTick+0x168>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3b8      	bcc.n	8003b0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9c:	e7b5      	b.n	8003b0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b9e:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <xTaskIncrementTick+0x168>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba4:	4914      	ldr	r1, [pc, #80]	@ (8003bf8 <xTaskIncrementTick+0x164>)
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d901      	bls.n	8003bba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bba:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <xTaskIncrementTick+0x16c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e004      	b.n	8003bd2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <xTaskIncrementTick+0x170>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <xTaskIncrementTick+0x170>)
 8003bd0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000d14 	.word	0x20000d14
 8003be0:	20000cf0 	.word	0x20000cf0
 8003be4:	20000ca4 	.word	0x20000ca4
 8003be8:	20000ca8 	.word	0x20000ca8
 8003bec:	20000d04 	.word	0x20000d04
 8003bf0:	20000d0c 	.word	0x20000d0c
 8003bf4:	20000cf4 	.word	0x20000cf4
 8003bf8:	2000081c 	.word	0x2000081c
 8003bfc:	20000818 	.word	0x20000818
 8003c00:	20000d00 	.word	0x20000d00
 8003c04:	20000cfc 	.word	0x20000cfc

08003c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c0e:	4b28      	ldr	r3, [pc, #160]	@ (8003cb0 <vTaskSwitchContext+0xa8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <vTaskSwitchContext+0xac>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c1c:	e042      	b.n	8003ca4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <vTaskSwitchContext+0xac>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c24:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <vTaskSwitchContext+0xb0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e011      	b.n	8003c50 <vTaskSwitchContext+0x48>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <vTaskSwitchContext+0x42>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	607b      	str	r3, [r7, #4]
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	e7fd      	b.n	8003c46 <vTaskSwitchContext+0x3e>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <vTaskSwitchContext+0xb4>)
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0e3      	beq.n	8003c2c <vTaskSwitchContext+0x24>
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <vTaskSwitchContext+0xb4>)
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3308      	adds	r3, #8
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d104      	bne.n	8003c94 <vTaskSwitchContext+0x8c>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <vTaskSwitchContext+0xb8>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <vTaskSwitchContext+0xb0>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000d14 	.word	0x20000d14
 8003cb4:	20000d00 	.word	0x20000d00
 8003cb8:	20000cf4 	.word	0x20000cf4
 8003cbc:	2000081c 	.word	0x2000081c
 8003cc0:	20000818 	.word	0x20000818

08003cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60fb      	str	r3, [r7, #12]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <vTaskPlaceOnEventList+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe fe70 	bl	80029da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 fa81 	bl	8004204 <prvAddCurrentTaskToDelayedList>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000818 	.word	0x20000818

08003d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	617b      	str	r3, [r7, #20]
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3318      	adds	r3, #24
 8003d40:	4619      	mov	r1, r3
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fe fe25 	bl	8002992 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f000 fa54 	bl	8004204 <prvAddCurrentTaskToDelayedList>
	}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000818 	.word	0x20000818

08003d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60fb      	str	r3, [r7, #12]
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	e7fd      	b.n	8003d92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fe56 	bl	8002a4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <xTaskRemoveFromEventList+0xb0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11d      	bne.n	8003de4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fe4d 	bl	8002a4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db6:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <xTaskRemoveFromEventList+0xb4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d903      	bls.n	8003dc6 <xTaskRemoveFromEventList+0x5e>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <xTaskRemoveFromEventList+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <xTaskRemoveFromEventList+0xb8>)
 8003dd4:	441a      	add	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fe fdd8 	bl	8002992 <vListInsertEnd>
 8003de2:	e005      	b.n	8003df0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3318      	adds	r3, #24
 8003de8:	4619      	mov	r1, r3
 8003dea:	480e      	ldr	r0, [pc, #56]	@ (8003e24 <xTaskRemoveFromEventList+0xbc>)
 8003dec:	f7fe fdd1 	bl	8002992 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <xTaskRemoveFromEventList+0xc0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d905      	bls.n	8003e0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <xTaskRemoveFromEventList+0xc4>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e001      	b.n	8003e0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000d14 	.word	0x20000d14
 8003e1c:	20000cf4 	.word	0x20000cf4
 8003e20:	2000081c 	.word	0x2000081c
 8003e24:	20000cac 	.word	0x20000cac
 8003e28:	20000818 	.word	0x20000818
 8003e2c:	20000d00 	.word	0x20000d00

08003e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <vTaskInternalSetTimeOutState+0x24>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <vTaskInternalSetTimeOutState+0x28>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	20000d04 	.word	0x20000d04
 8003e58:	20000cf0 	.word	0x20000cf0

08003e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	613b      	str	r3, [r7, #16]
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	e7fd      	b.n	8003e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60fb      	str	r3, [r7, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	e7fd      	b.n	8003e9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ea2:	f000 fe91 	bl	8004bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <xTaskCheckForTimeOut+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d102      	bne.n	8003ec6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e023      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <xTaskCheckForTimeOut+0xc4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d007      	beq.n	8003ee2 <xTaskCheckForTimeOut+0x86>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e015      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d20b      	bcs.n	8003f04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff99 	bl	8003e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e004      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f0e:	f000 fe8d 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 8003f12:	69fb      	ldr	r3, [r7, #28]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000cf0 	.word	0x20000cf0
 8003f20:	20000d04 	.word	0x20000d04

08003f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <vTaskMissedYield+0x14>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	20000d00 	.word	0x20000d00

08003f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f44:	f000 f852 	bl	8003fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <prvIdleTask+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9f9      	bls.n	8003f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <prvIdleTask+0x2c>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f60:	e7f0      	b.n	8003f44 <prvIdleTask+0x8>
 8003f62:	bf00      	nop
 8003f64:	2000081c 	.word	0x2000081c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	e00c      	b.n	8003f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <prvInitialiseTaskLists+0x60>)
 8003f84:	4413      	add	r3, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fcd6 	bl	8002938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b37      	cmp	r3, #55	@ 0x37
 8003f96:	d9ef      	bls.n	8003f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f98:	480d      	ldr	r0, [pc, #52]	@ (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003f9a:	f7fe fccd 	bl	8002938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f9e:	480d      	ldr	r0, [pc, #52]	@ (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fa0:	f7fe fcca 	bl	8002938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fa4:	480c      	ldr	r0, [pc, #48]	@ (8003fd8 <prvInitialiseTaskLists+0x6c>)
 8003fa6:	f7fe fcc7 	bl	8002938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003faa:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <prvInitialiseTaskLists+0x70>)
 8003fac:	f7fe fcc4 	bl	8002938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb0:	480b      	ldr	r0, [pc, #44]	@ (8003fe0 <prvInitialiseTaskLists+0x74>)
 8003fb2:	f7fe fcc1 	bl	8002938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <prvInitialiseTaskLists+0x78>)
 8003fb8:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <prvInitialiseTaskLists+0x7c>)
 8003fbe:	4a05      	ldr	r2, [pc, #20]	@ (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	2000081c 	.word	0x2000081c
 8003fd0:	20000c7c 	.word	0x20000c7c
 8003fd4:	20000c90 	.word	0x20000c90
 8003fd8:	20000cac 	.word	0x20000cac
 8003fdc:	20000cc0 	.word	0x20000cc0
 8003fe0:	20000cd8 	.word	0x20000cd8
 8003fe4:	20000ca4 	.word	0x20000ca4
 8003fe8:	20000ca8 	.word	0x20000ca8

08003fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff2:	e019      	b.n	8004028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ff4:	f000 fde8 	bl	8004bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff8:	4b10      	ldr	r3, [pc, #64]	@ (800403c <prvCheckTasksWaitingTermination+0x50>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fd21 	bl	8002a4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <prvCheckTasksWaitingTermination+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <prvCheckTasksWaitingTermination+0x54>)
 8004012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	4a0a      	ldr	r2, [pc, #40]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800401c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800401e:	f000 fe05 	bl	8004c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f810 	bl	8004048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e1      	bne.n	8003ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000cc0 	.word	0x20000cc0
 8004040:	20000cec 	.word	0x20000cec
 8004044:	20000cd4 	.word	0x20000cd4

08004048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ffa2 	bl	8004fa8 <vPortFree>
				vPortFree( pxTCB );
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 ff9f 	bl	8004fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800406a:	e019      	b.n	80040a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004072:	2b01      	cmp	r3, #1
 8004074:	d103      	bne.n	800407e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 ff96 	bl	8004fa8 <vPortFree>
	}
 800407c:	e010      	b.n	80040a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004084:	2b02      	cmp	r3, #2
 8004086:	d00b      	beq.n	80040a0 <prvDeleteTCB+0x58>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <prvDeleteTCB+0x54>
	}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <prvResetNextTaskUnblockTime+0x38>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <prvResetNextTaskUnblockTime+0x3c>)
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040c0:	e008      	b.n	80040d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c2:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <prvResetNextTaskUnblockTime+0x38>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a04      	ldr	r2, [pc, #16]	@ (80040e4 <prvResetNextTaskUnblockTime+0x3c>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000ca4 	.word	0x20000ca4
 80040e4:	20000d0c 	.word	0x20000d0c

080040e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <xTaskGetSchedulerState+0x34>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040f6:	2301      	movs	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	e008      	b.n	800410e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040fc:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <xTaskGetSchedulerState+0x38>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004104:	2302      	movs	r3, #2
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e001      	b.n	800410e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800410e:	687b      	ldr	r3, [r7, #4]
	}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000cf8 	.word	0x20000cf8
 8004120:	20000d14 	.word	0x20000d14

08004124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d058      	beq.n	80041ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800413a:	4b2f      	ldr	r3, [pc, #188]	@ (80041f8 <xTaskPriorityDisinherit+0xd4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d00b      	beq.n	800415c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60bb      	str	r3, [r7, #8]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	1e5a      	subs	r2, r3, #1
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	429a      	cmp	r2, r3
 8004190:	d02c      	beq.n	80041ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d128      	bne.n	80041ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc54 	bl	8002a4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041bc:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <xTaskPriorityDisinherit+0xd8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d903      	bls.n	80041cc <xTaskPriorityDisinherit+0xa8>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a0c      	ldr	r2, [pc, #48]	@ (80041fc <xTaskPriorityDisinherit+0xd8>)
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4a09      	ldr	r2, [pc, #36]	@ (8004200 <xTaskPriorityDisinherit+0xdc>)
 80041da:	441a      	add	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fe fbd5 	bl	8002992 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041ec:	697b      	ldr	r3, [r7, #20]
	}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000818 	.word	0x20000818
 80041fc:	20000cf4 	.word	0x20000cf4
 8004200:	2000081c 	.word	0x2000081c

08004204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800420e:	4b21      	ldr	r3, [pc, #132]	@ (8004294 <prvAddCurrentTaskToDelayedList+0x90>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004214:	4b20      	ldr	r3, [pc, #128]	@ (8004298 <prvAddCurrentTaskToDelayedList+0x94>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3304      	adds	r3, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fc16 	bl	8002a4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d10a      	bne.n	800423e <prvAddCurrentTaskToDelayedList+0x3a>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800422e:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <prvAddCurrentTaskToDelayedList+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4819      	ldr	r0, [pc, #100]	@ (800429c <prvAddCurrentTaskToDelayedList+0x98>)
 8004238:	f7fe fbab 	bl	8002992 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800423c:	e026      	b.n	800428c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <prvAddCurrentTaskToDelayedList+0x94>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	429a      	cmp	r2, r3
 8004254:	d209      	bcs.n	800426a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004256:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fbb9 	bl	80029da <vListInsert>
}
 8004268:	e010      	b.n	800428c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800426a:	4b0e      	ldr	r3, [pc, #56]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <prvAddCurrentTaskToDelayedList+0x94>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe fbaf 	bl	80029da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	d202      	bcs.n	800428c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004286:	4a08      	ldr	r2, [pc, #32]	@ (80042a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000cf0 	.word	0x20000cf0
 8004298:	20000818 	.word	0x20000818
 800429c:	20000cd8 	.word	0x20000cd8
 80042a0:	20000ca8 	.word	0x20000ca8
 80042a4:	20000ca4 	.word	0x20000ca4
 80042a8:	20000d0c 	.word	0x20000d0c

080042ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042b6:	f000 fb13 	bl	80048e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <xTimerCreateTimerTask+0x84>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d021      	beq.n	8004306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042ca:	1d3a      	adds	r2, r7, #4
 80042cc:	f107 0108 	add.w	r1, r7, #8
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fb15 	bl	8002904 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	9202      	str	r2, [sp, #8]
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2302      	movs	r3, #2
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	460a      	mov	r2, r1
 80042ec:	4911      	ldr	r1, [pc, #68]	@ (8004334 <xTimerCreateTimerTask+0x88>)
 80042ee:	4812      	ldr	r0, [pc, #72]	@ (8004338 <xTimerCreateTimerTask+0x8c>)
 80042f0:	f7ff f8d0 	bl	8003494 <xTaskCreateStatic>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4a11      	ldr	r2, [pc, #68]	@ (800433c <xTimerCreateTimerTask+0x90>)
 80042f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042fa:	4b10      	ldr	r3, [pc, #64]	@ (800433c <xTimerCreateTimerTask+0x90>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004302:	2301      	movs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000d48 	.word	0x20000d48
 8004334:	0800665c 	.word	0x0800665c
 8004338:	08004479 	.word	0x08004479
 800433c:	20000d4c 	.word	0x20000d4c

08004340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <xTimerGenericCommand+0x30>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <xTimerGenericCommand+0x98>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02a      	beq.n	80043ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b05      	cmp	r3, #5
 8004388:	dc18      	bgt.n	80043bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800438a:	f7ff fead 	bl	80040e8 <xTaskGetSchedulerState>
 800438e:	4603      	mov	r3, r0
 8004390:	2b02      	cmp	r3, #2
 8004392:	d109      	bne.n	80043a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004394:	4b10      	ldr	r3, [pc, #64]	@ (80043d8 <xTimerGenericCommand+0x98>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	f107 0110 	add.w	r1, r7, #16
 800439c:	2300      	movs	r3, #0
 800439e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a0:	f7fe fc88 	bl	8002cb4 <xQueueGenericSend>
 80043a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80043a6:	e012      	b.n	80043ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <xTimerGenericCommand+0x98>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	f107 0110 	add.w	r1, r7, #16
 80043b0:	2300      	movs	r3, #0
 80043b2:	2200      	movs	r2, #0
 80043b4:	f7fe fc7e 	bl	8002cb4 <xQueueGenericSend>
 80043b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80043ba:	e008      	b.n	80043ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <xTimerGenericCommand+0x98>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	f107 0110 	add.w	r1, r7, #16
 80043c4:	2300      	movs	r3, #0
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	f7fe fd76 	bl	8002eb8 <xQueueGenericSendFromISR>
 80043cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000d48 	.word	0x20000d48

080043dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <prvProcessExpiredTimer+0x98>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fb29 	bl	8002a4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d023      	beq.n	8004450 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	18d1      	adds	r1, r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6978      	ldr	r0, [r7, #20]
 8004416:	f000 f8d5 	bl	80045c4 <prvInsertTimerInActiveList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff88 	bl	8004340 <xTimerGenericCommand>
 8004430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d114      	bne.n	8004462 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	b2da      	uxtb	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	6978      	ldr	r0, [r7, #20]
 8004468:	4798      	blx	r3
}
 800446a:	bf00      	nop
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000d40 	.word	0x20000d40

08004478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f859 	bl	800453c <prvGetNextExpireTime>
 800448a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4619      	mov	r1, r3
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f805 	bl	80044a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004496:	f000 f8d7 	bl	8004648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800449a:	bf00      	nop
 800449c:	e7f0      	b.n	8004480 <prvTimerTask+0x8>
	...

080044a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044aa:	f7ff fa37 	bl	800391c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f866 	bl	8004584 <prvSampleTimeNow>
 80044b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d130      	bne.n	8004522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <prvProcessTimerOrBlockTask+0x3c>
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d806      	bhi.n	80044dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044ce:	f7ff fa33 	bl	8003938 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff81 	bl	80043dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044da:	e024      	b.n	8004526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044e2:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <prvProcessTimerOrBlockTask+0x90>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <prvProcessTimerOrBlockTask+0x50>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <prvProcessTimerOrBlockTask+0x52>
 80044f0:	2300      	movs	r3, #0
 80044f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <prvProcessTimerOrBlockTask+0x94>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	4619      	mov	r1, r3
 8004502:	f7fe ff93 	bl	800342c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004506:	f7ff fa17 	bl	8003938 <xTaskResumeAll>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004510:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <prvProcessTimerOrBlockTask+0x98>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
}
 8004520:	e001      	b.n	8004526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004522:	f7ff fa09 	bl	8003938 <xTaskResumeAll>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000d44 	.word	0x20000d44
 8004534:	20000d48 	.word	0x20000d48
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004544:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <prvGetNextExpireTime+0x44>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <prvGetNextExpireTime+0x16>
 800454e:	2201      	movs	r2, #1
 8004550:	e000      	b.n	8004554 <prvGetNextExpireTime+0x18>
 8004552:	2200      	movs	r2, #0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <prvGetNextExpireTime+0x44>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e001      	b.n	8004570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000d40 	.word	0x20000d40

08004584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800458c:	f7ff fa72 	bl	8003a74 <xTaskGetTickCount>
 8004590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <prvSampleTimeNow+0x3c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d205      	bcs.n	80045a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800459c:	f000 f93a 	bl	8004814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e002      	b.n	80045ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045ae:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <prvSampleTimeNow+0x3c>)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045b4:	68fb      	ldr	r3, [r7, #12]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000d50 	.word	0x20000d50

080045c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d812      	bhi.n	8004610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e01b      	b.n	8004636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045fe:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <prvInsertTimerInActiveList+0x7c>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f7fe f9e6 	bl	80029da <vListInsert>
 800460e:	e012      	b.n	8004636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d206      	bcs.n	8004626 <prvInsertTimerInActiveList+0x62>
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e007      	b.n	8004636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004626:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <prvInsertTimerInActiveList+0x80>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7fe f9d2 	bl	80029da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004636:	697b      	ldr	r3, [r7, #20]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000d44 	.word	0x20000d44
 8004644:	20000d40 	.word	0x20000d40

08004648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	@ 0x38
 800464c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800464e:	e0ce      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da19      	bge.n	800468a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	3304      	adds	r3, #4
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	61fb      	str	r3, [r7, #28]
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004680:	6850      	ldr	r0, [r2, #4]
 8004682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	4611      	mov	r1, r2
 8004688:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f2c0 80ae 	blt.w	80047ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe f9d2 	bl	8002a4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046a8:	463b      	mov	r3, r7
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff ff6a 	bl	8004584 <prvSampleTimeNow>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	f200 8097 	bhi.w	80047e8 <prvProcessReceivedCommands+0x1a0>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <prvProcessReceivedCommands+0x78>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	080046e9 	.word	0x080046e9
 80046cc:	0800475f 	.word	0x0800475f
 80046d0:	08004773 	.word	0x08004773
 80046d4:	080047bf 	.word	0x080047bf
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046e9 	.word	0x080046e9
 80046e0:	0800475f 	.word	0x0800475f
 80046e4:	08004773 	.word	0x08004773
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	18d1      	adds	r1, r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004708:	f7ff ff5c 	bl	80045c4 <prvInsertTimerInActiveList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d06c      	beq.n	80047ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d061      	beq.n	80047ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	441a      	add	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2300      	movs	r3, #0
 8004736:	2100      	movs	r1, #0
 8004738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800473a:	f7ff fe01 	bl	8004340 <xTimerGenericCommand>
 800473e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d152      	bne.n	80047ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	61bb      	str	r3, [r7, #24]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004770:	e03d      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	617b      	str	r3, [r7, #20]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	18d1      	adds	r1, r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047b8:	f7ff ff04 	bl	80045c4 <prvInsertTimerInActiveList>
					break;
 80047bc:	e017      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047ce:	f000 fbeb 	bl	8004fa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047d2:	e00c      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047e6:	e002      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80047e8:	bf00      	nop
 80047ea:	e000      	b.n	80047ee <prvProcessReceivedCommands+0x1a6>
					break;
 80047ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <prvProcessReceivedCommands+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1d39      	adds	r1, r7, #4
 80047f4:	2200      	movs	r2, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fbfc 	bl	8002ff4 <xQueueReceive>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f47f af26 	bne.w	8004650 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	3730      	adds	r7, #48	@ 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000d48 	.word	0x20000d48

08004814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800481a:	e049      	b.n	80048b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800481c:	4b2e      	ldr	r3, [pc, #184]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3304      	adds	r3, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe f909 	bl	8002a4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02f      	beq.n	80048b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	429a      	cmp	r2, r3
 8004860:	d90e      	bls.n	8004880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f7fe f8ae 	bl	80029da <vListInsert>
 800487e:	e017      	b.n	80048b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	2100      	movs	r1, #0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff fd58 	bl	8004340 <xTimerGenericCommand>
 8004890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	603b      	str	r3, [r7, #0]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b0:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1b0      	bne.n	800481c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048ba:	4b07      	ldr	r3, [pc, #28]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <prvSwitchTimerLists+0xc8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a04      	ldr	r2, [pc, #16]	@ (80048d8 <prvSwitchTimerLists+0xc4>)
 80048c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048c8:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <prvSwitchTimerLists+0xc8>)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6013      	str	r3, [r2, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000d40 	.word	0x20000d40
 80048dc:	20000d44 	.word	0x20000d44

080048e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048e6:	f000 f96f 	bl	8004bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048ea:	4b15      	ldr	r3, [pc, #84]	@ (8004940 <prvCheckForValidListAndQueue+0x60>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d120      	bne.n	8004934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048f2:	4814      	ldr	r0, [pc, #80]	@ (8004944 <prvCheckForValidListAndQueue+0x64>)
 80048f4:	f7fe f820 	bl	8002938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048f8:	4813      	ldr	r0, [pc, #76]	@ (8004948 <prvCheckForValidListAndQueue+0x68>)
 80048fa:	f7fe f81d 	bl	8002938 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <prvCheckForValidListAndQueue+0x6c>)
 8004900:	4a10      	ldr	r2, [pc, #64]	@ (8004944 <prvCheckForValidListAndQueue+0x64>)
 8004902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004904:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <prvCheckForValidListAndQueue+0x70>)
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <prvCheckForValidListAndQueue+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <prvCheckForValidListAndQueue+0x74>)
 8004910:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <prvCheckForValidListAndQueue+0x78>)
 8004912:	2110      	movs	r1, #16
 8004914:	200a      	movs	r0, #10
 8004916:	f7fe f92d 	bl	8002b74 <xQueueGenericCreateStatic>
 800491a:	4603      	mov	r3, r0
 800491c:	4a08      	ldr	r2, [pc, #32]	@ (8004940 <prvCheckForValidListAndQueue+0x60>)
 800491e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004920:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <prvCheckForValidListAndQueue+0x60>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <prvCheckForValidListAndQueue+0x60>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	490b      	ldr	r1, [pc, #44]	@ (800495c <prvCheckForValidListAndQueue+0x7c>)
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fd52 	bl	80033d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004934:	f000 f97a 	bl	8004c2c <vPortExitCritical>
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000d48 	.word	0x20000d48
 8004944:	20000d18 	.word	0x20000d18
 8004948:	20000d2c 	.word	0x20000d2c
 800494c:	20000d40 	.word	0x20000d40
 8004950:	20000d44 	.word	0x20000d44
 8004954:	20000df4 	.word	0x20000df4
 8004958:	20000d54 	.word	0x20000d54
 800495c:	08006664 	.word	0x08006664

08004960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b04      	subs	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004990:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <pxPortInitialiseStack+0x64>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b14      	subs	r3, #20
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f06f 0202 	mvn.w	r2, #2
 80049ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b20      	subs	r3, #32
 80049b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	080049c9 	.word	0x080049c9

080049c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049d2:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <prvTaskExitError+0x58>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d00b      	beq.n	80049f4 <prvTaskExitError+0x2c>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <prvTaskExitError+0x28>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60bb      	str	r3, [r7, #8]
}
 8004a06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a08:	bf00      	nop
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0fc      	beq.n	8004a0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000000c 	.word	0x2000000c
	...

08004a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <pxCurrentTCBConst2>)
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6808      	ldr	r0, [r1, #0]
 8004a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	f380 8809 	msr	PSP, r0
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8811 	msr	BASEPRI, r0
 8004a4a:	4770      	bx	lr
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst2>:
 8004a50:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a58:	4808      	ldr	r0, [pc, #32]	@ (8004a7c <prvPortStartFirstTask+0x24>)
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f380 8808 	msr	MSP, r0
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8814 	msr	CONTROL, r0
 8004a6a:	b662      	cpsie	i
 8004a6c:	b661      	cpsie	f
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	df00      	svc	0
 8004a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed08 	.word	0xe000ed08

08004a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a86:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <xPortStartScheduler+0x124>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ba8 <xPortStartScheduler+0x128>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10b      	bne.n	8004aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <xPortStartScheduler+0x124>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3f      	ldr	r2, [pc, #252]	@ (8004bac <xPortStartScheduler+0x12c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10b      	bne.n	8004aca <xPortStartScheduler+0x4a>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	613b      	str	r3, [r7, #16]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aca:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <xPortStartScheduler+0x130>)
 8004acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	22ff      	movs	r2, #255	@ 0xff
 8004ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <xPortStartScheduler+0x134>)
 8004af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004af8:	e009      	b.n	8004b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004afa:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b80      	cmp	r3, #128	@ 0x80
 8004b18:	d0ef      	beq.n	8004afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d00b      	beq.n	8004b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b50:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b74:	f000 f8da 	bl	8004d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b78:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <xPortStartScheduler+0x140>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b7e:	f000 f8f9 	bl	8004d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <xPortStartScheduler+0x144>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc4 <xPortStartScheduler+0x144>)
 8004b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b8e:	f7ff ff63 	bl	8004a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b92:	f7ff f839 	bl	8003c08 <vTaskSwitchContext>
	prvTaskExitError();
 8004b96:	f7ff ff17 	bl	80049c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	410fc271 	.word	0x410fc271
 8004bac:	410fc270 	.word	0x410fc270
 8004bb0:	e000e400 	.word	0xe000e400
 8004bb4:	20000e44 	.word	0x20000e44
 8004bb8:	20000e48 	.word	0x20000e48
 8004bbc:	e000ed20 	.word	0xe000ed20
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	e000ef34 	.word	0xe000ef34

08004bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a0e      	ldr	r2, [pc, #56]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bec:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d110      	bne.n	8004c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <vPortEnterCritical+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	603b      	str	r3, [r7, #0]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <vPortEnterCritical+0x4a>
	}
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000000c 	.word	0x2000000c
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <vPortExitCritical+0x26>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <vPortExitCritical+0x44>
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ca4:	f380 8811 	msr	BASEPRI, r0
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f7fe ffaa 	bl	8003c08 <vTaskSwitchContext>
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	bc09      	pop	{r0, r3}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	f01e 0f10 	tst.w	lr, #16
 8004cca:	bf08      	it	eq
 8004ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd0:	f380 8809 	msr	PSP, r0
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d02:	f7fe fec7 	bl	8003a94 <xTaskIncrementTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <xPortSysTickHandler+0x40>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <vPortSetupTimerInterrupt+0x44>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010
 8004d64:	e000e018 	.word	0xe000e018
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	10624dd3 	.word	0x10624dd3
 8004d70:	e000e014 	.word	0xe000e014

08004d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d84 <vPortEnableVFP+0x10>
 8004d78:	6801      	ldr	r1, [r0, #0]
 8004d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d7e:	6001      	str	r1, [r0, #0]
 8004d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d82:	bf00      	nop
 8004d84:	e000ed88 	.word	0xe000ed88

08004d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d915      	bls.n	8004dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <vPortValidateInterruptPriority+0x74>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <vPortValidateInterruptPriority+0x78>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	7afa      	ldrb	r2, [r7, #11]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20b      	bcs.n	8004dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <vPortValidateInterruptPriority+0x7c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004dce:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <vPortValidateInterruptPriority+0x80>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d90b      	bls.n	8004dee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	603b      	str	r3, [r7, #0]
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	e7fd      	b.n	8004dea <vPortValidateInterruptPriority+0x62>
	}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000e3f0 	.word	0xe000e3f0
 8004e00:	20000e44 	.word	0x20000e44
 8004e04:	e000ed0c 	.word	0xe000ed0c
 8004e08:	20000e48 	.word	0x20000e48

08004e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	@ 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e18:	f7fe fd80 	bl	800391c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f90 <pvPortMalloc+0x184>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e24:	f000 f924 	bl	8005070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e28:	4b5a      	ldr	r3, [pc, #360]	@ (8004f94 <pvPortMalloc+0x188>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 8095 	bne.w	8004f60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01e      	beq.n	8004e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	3308      	adds	r3, #8
 8004e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <pvPortMalloc+0x6e>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	617b      	str	r3, [r7, #20]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d06f      	beq.n	8004f60 <pvPortMalloc+0x154>
 8004e80:	4b45      	ldr	r3, [pc, #276]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d86a      	bhi.n	8004f60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e8a:	4b44      	ldr	r3, [pc, #272]	@ (8004f9c <pvPortMalloc+0x190>)
 8004e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e8e:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <pvPortMalloc+0x190>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e94:	e004      	b.n	8004ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <pvPortMalloc+0xa6>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f1      	bne.n	8004e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eb2:	4b37      	ldr	r3, [pc, #220]	@ (8004f90 <pvPortMalloc+0x184>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d051      	beq.n	8004f60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d920      	bls.n	8004f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <pvPortMalloc+0xfc>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f1a:	69b8      	ldr	r0, [r7, #24]
 8004f1c:	f000 f90a 	bl	8005134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <pvPortMalloc+0x194>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d203      	bcs.n	8004f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f3a:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	@ (8004fa0 <pvPortMalloc+0x194>)
 8004f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <pvPortMalloc+0x188>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f56:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <pvPortMalloc+0x198>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a11      	ldr	r2, [pc, #68]	@ (8004fa4 <pvPortMalloc+0x198>)
 8004f5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f60:	f7fe fcea 	bl	8003938 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <pvPortMalloc+0x17a>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <pvPortMalloc+0x176>
	return pvReturn;
 8004f86:	69fb      	ldr	r3, [r7, #28]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20004a54 	.word	0x20004a54
 8004f94:	20004a68 	.word	0x20004a68
 8004f98:	20004a58 	.word	0x20004a58
 8004f9c:	20004a4c 	.word	0x20004a4c
 8004fa0:	20004a5c 	.word	0x20004a5c
 8004fa4:	20004a60 	.word	0x20004a60

08004fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04f      	beq.n	800505a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fba:	2308      	movs	r3, #8
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	4b25      	ldr	r3, [pc, #148]	@ (8005064 <vPortFree+0xbc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <vPortFree+0x46>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60fb      	str	r3, [r7, #12]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <vPortFree+0x66>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	4b14      	ldr	r3, [pc, #80]	@ (8005064 <vPortFree+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01e      	beq.n	800505a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11a      	bne.n	800505a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4b0e      	ldr	r3, [pc, #56]	@ (8005064 <vPortFree+0xbc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	43db      	mvns	r3, r3
 800502e:	401a      	ands	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005034:	f7fe fc72 	bl	800391c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <vPortFree+0xc0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4413      	add	r3, r2
 8005042:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <vPortFree+0xc0>)
 8005044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005046:	6938      	ldr	r0, [r7, #16]
 8005048:	f000 f874 	bl	8005134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <vPortFree+0xc4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	4a06      	ldr	r2, [pc, #24]	@ (800506c <vPortFree+0xc4>)
 8005054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005056:	f7fe fc6f 	bl	8003938 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20004a68 	.word	0x20004a68
 8005068:	20004a58 	.word	0x20004a58
 800506c:	20004a64 	.word	0x20004a64

08005070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005076:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800507a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800507c:	4b27      	ldr	r3, [pc, #156]	@ (800511c <prvHeapInit+0xac>)
 800507e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3307      	adds	r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	4a1f      	ldr	r2, [pc, #124]	@ (800511c <prvHeapInit+0xac>)
 80050a0:	4413      	add	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <prvHeapInit+0xb0>)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <prvHeapInit+0xb0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050bc:	2208      	movs	r2, #8
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0307 	bic.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <prvHeapInit+0xb4>)
 80050d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050d2:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <prvHeapInit+0xb4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <prvHeapInit+0xb4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	1ad2      	subs	r2, r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <prvHeapInit+0xb4>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005128 <prvHeapInit+0xb8>)
 80050fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a09      	ldr	r2, [pc, #36]	@ (800512c <prvHeapInit+0xbc>)
 8005106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005108:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <prvHeapInit+0xc0>)
 800510a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800510e:	601a      	str	r2, [r3, #0]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000e4c 	.word	0x20000e4c
 8005120:	20004a4c 	.word	0x20004a4c
 8005124:	20004a54 	.word	0x20004a54
 8005128:	20004a5c 	.word	0x20004a5c
 800512c:	20004a58 	.word	0x20004a58
 8005130:	20004a68 	.word	0x20004a68

08005134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800513c:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <prvInsertBlockIntoFreeList+0xac>)
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e002      	b.n	8005148 <prvInsertBlockIntoFreeList+0x14>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d8f7      	bhi.n	8005142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d108      	bne.n	8005176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	441a      	add	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d118      	bne.n	80051bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d00d      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	441a      	add	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e008      	b.n	80051c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <prvInsertBlockIntoFreeList+0xb0>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e003      	b.n	80051c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d002      	beq.n	80051d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20004a4c 	.word	0x20004a4c
 80051e4:	20004a54 	.word	0x20004a54

080051e8 <rand>:
 80051e8:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <rand+0x5c>)
 80051ea:	b510      	push	{r4, lr}
 80051ec:	681c      	ldr	r4, [r3, #0]
 80051ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80051f0:	b9b3      	cbnz	r3, 8005220 <rand+0x38>
 80051f2:	2018      	movs	r0, #24
 80051f4:	f000 fa64 	bl	80056c0 <malloc>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80051fc:	b920      	cbnz	r0, 8005208 <rand+0x20>
 80051fe:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <rand+0x60>)
 8005200:	4812      	ldr	r0, [pc, #72]	@ (800524c <rand+0x64>)
 8005202:	2152      	movs	r1, #82	@ 0x52
 8005204:	f000 f9f4 	bl	80055f0 <__assert_func>
 8005208:	4911      	ldr	r1, [pc, #68]	@ (8005250 <rand+0x68>)
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <rand+0x6c>)
 800520c:	e9c0 1300 	strd	r1, r3, [r0]
 8005210:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <rand+0x70>)
 8005212:	6083      	str	r3, [r0, #8]
 8005214:	230b      	movs	r3, #11
 8005216:	8183      	strh	r3, [r0, #12]
 8005218:	2100      	movs	r1, #0
 800521a:	2001      	movs	r0, #1
 800521c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005220:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005222:	480e      	ldr	r0, [pc, #56]	@ (800525c <rand+0x74>)
 8005224:	690b      	ldr	r3, [r1, #16]
 8005226:	694c      	ldr	r4, [r1, #20]
 8005228:	4a0d      	ldr	r2, [pc, #52]	@ (8005260 <rand+0x78>)
 800522a:	4358      	muls	r0, r3
 800522c:	fb02 0004 	mla	r0, r2, r4, r0
 8005230:	fba3 3202 	umull	r3, r2, r3, r2
 8005234:	3301      	adds	r3, #1
 8005236:	eb40 0002 	adc.w	r0, r0, r2
 800523a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800523e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005242:	bd10      	pop	{r4, pc}
 8005244:	2000001c 	.word	0x2000001c
 8005248:	08006684 	.word	0x08006684
 800524c:	0800669b 	.word	0x0800669b
 8005250:	abcd330e 	.word	0xabcd330e
 8005254:	e66d1234 	.word	0xe66d1234
 8005258:	0005deec 	.word	0x0005deec
 800525c:	5851f42d 	.word	0x5851f42d
 8005260:	4c957f2d 	.word	0x4c957f2d

08005264 <std>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	4604      	mov	r4, r0
 800526a:	e9c0 3300 	strd	r3, r3, [r0]
 800526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005272:	6083      	str	r3, [r0, #8]
 8005274:	8181      	strh	r1, [r0, #12]
 8005276:	6643      	str	r3, [r0, #100]	@ 0x64
 8005278:	81c2      	strh	r2, [r0, #14]
 800527a:	6183      	str	r3, [r0, #24]
 800527c:	4619      	mov	r1, r3
 800527e:	2208      	movs	r2, #8
 8005280:	305c      	adds	r0, #92	@ 0x5c
 8005282:	f000 f92a 	bl	80054da <memset>
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <std+0x58>)
 8005288:	6263      	str	r3, [r4, #36]	@ 0x24
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <std+0x5c>)
 800528c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <std+0x60>)
 8005290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <std+0x64>)
 8005294:	6323      	str	r3, [r4, #48]	@ 0x30
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <std+0x68>)
 8005298:	6224      	str	r4, [r4, #32]
 800529a:	429c      	cmp	r4, r3
 800529c:	d006      	beq.n	80052ac <std+0x48>
 800529e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052a2:	4294      	cmp	r4, r2
 80052a4:	d002      	beq.n	80052ac <std+0x48>
 80052a6:	33d0      	adds	r3, #208	@ 0xd0
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d105      	bne.n	80052b8 <std+0x54>
 80052ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b4:	f000 b98a 	b.w	80055cc <__retarget_lock_init_recursive>
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	bf00      	nop
 80052bc:	08005455 	.word	0x08005455
 80052c0:	08005477 	.word	0x08005477
 80052c4:	080054af 	.word	0x080054af
 80052c8:	080054d3 	.word	0x080054d3
 80052cc:	20004a6c 	.word	0x20004a6c

080052d0 <stdio_exit_handler>:
 80052d0:	4a02      	ldr	r2, [pc, #8]	@ (80052dc <stdio_exit_handler+0xc>)
 80052d2:	4903      	ldr	r1, [pc, #12]	@ (80052e0 <stdio_exit_handler+0x10>)
 80052d4:	4803      	ldr	r0, [pc, #12]	@ (80052e4 <stdio_exit_handler+0x14>)
 80052d6:	f000 b869 	b.w	80053ac <_fwalk_sglue>
 80052da:	bf00      	nop
 80052dc:	20000010 	.word	0x20000010
 80052e0:	08005efd 	.word	0x08005efd
 80052e4:	20000020 	.word	0x20000020

080052e8 <cleanup_stdio>:
 80052e8:	6841      	ldr	r1, [r0, #4]
 80052ea:	4b0c      	ldr	r3, [pc, #48]	@ (800531c <cleanup_stdio+0x34>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	b510      	push	{r4, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	d001      	beq.n	80052f8 <cleanup_stdio+0x10>
 80052f4:	f000 fe02 	bl	8005efc <_fflush_r>
 80052f8:	68a1      	ldr	r1, [r4, #8]
 80052fa:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <cleanup_stdio+0x38>)
 80052fc:	4299      	cmp	r1, r3
 80052fe:	d002      	beq.n	8005306 <cleanup_stdio+0x1e>
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fdfb 	bl	8005efc <_fflush_r>
 8005306:	68e1      	ldr	r1, [r4, #12]
 8005308:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <cleanup_stdio+0x3c>)
 800530a:	4299      	cmp	r1, r3
 800530c:	d004      	beq.n	8005318 <cleanup_stdio+0x30>
 800530e:	4620      	mov	r0, r4
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f000 bdf2 	b.w	8005efc <_fflush_r>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	20004a6c 	.word	0x20004a6c
 8005320:	20004ad4 	.word	0x20004ad4
 8005324:	20004b3c 	.word	0x20004b3c

08005328 <global_stdio_init.part.0>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <global_stdio_init.part.0+0x30>)
 800532c:	4c0b      	ldr	r4, [pc, #44]	@ (800535c <global_stdio_init.part.0+0x34>)
 800532e:	4a0c      	ldr	r2, [pc, #48]	@ (8005360 <global_stdio_init.part.0+0x38>)
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	2200      	movs	r2, #0
 8005336:	2104      	movs	r1, #4
 8005338:	f7ff ff94 	bl	8005264 <std>
 800533c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005340:	2201      	movs	r2, #1
 8005342:	2109      	movs	r1, #9
 8005344:	f7ff ff8e 	bl	8005264 <std>
 8005348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800534c:	2202      	movs	r2, #2
 800534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005352:	2112      	movs	r1, #18
 8005354:	f7ff bf86 	b.w	8005264 <std>
 8005358:	20004ba4 	.word	0x20004ba4
 800535c:	20004a6c 	.word	0x20004a6c
 8005360:	080052d1 	.word	0x080052d1

08005364 <__sfp_lock_acquire>:
 8005364:	4801      	ldr	r0, [pc, #4]	@ (800536c <__sfp_lock_acquire+0x8>)
 8005366:	f000 b932 	b.w	80055ce <__retarget_lock_acquire_recursive>
 800536a:	bf00      	nop
 800536c:	20004bad 	.word	0x20004bad

08005370 <__sfp_lock_release>:
 8005370:	4801      	ldr	r0, [pc, #4]	@ (8005378 <__sfp_lock_release+0x8>)
 8005372:	f000 b92d 	b.w	80055d0 <__retarget_lock_release_recursive>
 8005376:	bf00      	nop
 8005378:	20004bad 	.word	0x20004bad

0800537c <__sinit>:
 800537c:	b510      	push	{r4, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	f7ff fff0 	bl	8005364 <__sfp_lock_acquire>
 8005384:	6a23      	ldr	r3, [r4, #32]
 8005386:	b11b      	cbz	r3, 8005390 <__sinit+0x14>
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f7ff bff0 	b.w	8005370 <__sfp_lock_release>
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <__sinit+0x28>)
 8005392:	6223      	str	r3, [r4, #32]
 8005394:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <__sinit+0x2c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f5      	bne.n	8005388 <__sinit+0xc>
 800539c:	f7ff ffc4 	bl	8005328 <global_stdio_init.part.0>
 80053a0:	e7f2      	b.n	8005388 <__sinit+0xc>
 80053a2:	bf00      	nop
 80053a4:	080052e9 	.word	0x080052e9
 80053a8:	20004ba4 	.word	0x20004ba4

080053ac <_fwalk_sglue>:
 80053ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b0:	4607      	mov	r7, r0
 80053b2:	4688      	mov	r8, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	2600      	movs	r6, #0
 80053b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053bc:	f1b9 0901 	subs.w	r9, r9, #1
 80053c0:	d505      	bpl.n	80053ce <_fwalk_sglue+0x22>
 80053c2:	6824      	ldr	r4, [r4, #0]
 80053c4:	2c00      	cmp	r4, #0
 80053c6:	d1f7      	bne.n	80053b8 <_fwalk_sglue+0xc>
 80053c8:	4630      	mov	r0, r6
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d907      	bls.n	80053e4 <_fwalk_sglue+0x38>
 80053d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053d8:	3301      	adds	r3, #1
 80053da:	d003      	beq.n	80053e4 <_fwalk_sglue+0x38>
 80053dc:	4629      	mov	r1, r5
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	4306      	orrs	r6, r0
 80053e4:	3568      	adds	r5, #104	@ 0x68
 80053e6:	e7e9      	b.n	80053bc <_fwalk_sglue+0x10>

080053e8 <sniprintf>:
 80053e8:	b40c      	push	{r2, r3}
 80053ea:	b530      	push	{r4, r5, lr}
 80053ec:	4b18      	ldr	r3, [pc, #96]	@ (8005450 <sniprintf+0x68>)
 80053ee:	1e0c      	subs	r4, r1, #0
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	b09d      	sub	sp, #116	@ 0x74
 80053f4:	da08      	bge.n	8005408 <sniprintf+0x20>
 80053f6:	238b      	movs	r3, #139	@ 0x8b
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
 80053fe:	b01d      	add	sp, #116	@ 0x74
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	b002      	add	sp, #8
 8005406:	4770      	bx	lr
 8005408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800540c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005416:	bf14      	ite	ne
 8005418:	f104 33ff 	addne.w	r3, r4, #4294967295
 800541c:	4623      	moveq	r3, r4
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	9307      	str	r3, [sp, #28]
 8005422:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005426:	9002      	str	r0, [sp, #8]
 8005428:	9006      	str	r0, [sp, #24]
 800542a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800542e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005430:	ab21      	add	r3, sp, #132	@ 0x84
 8005432:	a902      	add	r1, sp, #8
 8005434:	4628      	mov	r0, r5
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 fa54 	bl	80058e4 <_svfiprintf_r>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	bfbc      	itt	lt
 8005440:	238b      	movlt	r3, #139	@ 0x8b
 8005442:	602b      	strlt	r3, [r5, #0]
 8005444:	2c00      	cmp	r4, #0
 8005446:	d0da      	beq.n	80053fe <sniprintf+0x16>
 8005448:	9b02      	ldr	r3, [sp, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e7d6      	b.n	80053fe <sniprintf+0x16>
 8005450:	2000001c 	.word	0x2000001c

08005454 <__sread>:
 8005454:	b510      	push	{r4, lr}
 8005456:	460c      	mov	r4, r1
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	f000 f868 	bl	8005530 <_read_r>
 8005460:	2800      	cmp	r0, #0
 8005462:	bfab      	itete	ge
 8005464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005466:	89a3      	ldrhlt	r3, [r4, #12]
 8005468:	181b      	addge	r3, r3, r0
 800546a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800546e:	bfac      	ite	ge
 8005470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005472:	81a3      	strhlt	r3, [r4, #12]
 8005474:	bd10      	pop	{r4, pc}

08005476 <__swrite>:
 8005476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547a:	461f      	mov	r7, r3
 800547c:	898b      	ldrh	r3, [r1, #12]
 800547e:	05db      	lsls	r3, r3, #23
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4616      	mov	r6, r2
 8005486:	d505      	bpl.n	8005494 <__swrite+0x1e>
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	2302      	movs	r3, #2
 800548e:	2200      	movs	r2, #0
 8005490:	f000 f83c 	bl	800550c <_lseek_r>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800549a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	f000 b853 	b.w	8005554 <_write_r>

080054ae <__sseek>:
 80054ae:	b510      	push	{r4, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b6:	f000 f829 	bl	800550c <_lseek_r>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	bf15      	itete	ne
 80054c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ca:	81a3      	strheq	r3, [r4, #12]
 80054cc:	bf18      	it	ne
 80054ce:	81a3      	strhne	r3, [r4, #12]
 80054d0:	bd10      	pop	{r4, pc}

080054d2 <__sclose>:
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 b809 	b.w	80054ec <_close_r>

080054da <memset>:
 80054da:	4402      	add	r2, r0
 80054dc:	4603      	mov	r3, r0
 80054de:	4293      	cmp	r3, r2
 80054e0:	d100      	bne.n	80054e4 <memset+0xa>
 80054e2:	4770      	bx	lr
 80054e4:	f803 1b01 	strb.w	r1, [r3], #1
 80054e8:	e7f9      	b.n	80054de <memset+0x4>
	...

080054ec <_close_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d06      	ldr	r5, [pc, #24]	@ (8005508 <_close_r+0x1c>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fb88 	bl	8000c0c <_close>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_close_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_close_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20004ba8 	.word	0x20004ba8

0800550c <_lseek_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	@ (800552c <_lseek_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fb fb9d 	bl	8000c5a <_lseek>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_lseek_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_lseek_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20004ba8 	.word	0x20004ba8

08005530 <_read_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	@ (8005550 <_read_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb fb2b 	bl	8000b9a <_read>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_read_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_read_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20004ba8 	.word	0x20004ba8

08005554 <_write_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d07      	ldr	r5, [pc, #28]	@ (8005574 <_write_r+0x20>)
 8005558:	4604      	mov	r4, r0
 800555a:	4608      	mov	r0, r1
 800555c:	4611      	mov	r1, r2
 800555e:	2200      	movs	r2, #0
 8005560:	602a      	str	r2, [r5, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f7fb fb36 	bl	8000bd4 <_write>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_write_r+0x1e>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_write_r+0x1e>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20004ba8 	.word	0x20004ba8

08005578 <__errno>:
 8005578:	4b01      	ldr	r3, [pc, #4]	@ (8005580 <__errno+0x8>)
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000001c 	.word	0x2000001c

08005584 <__libc_init_array>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4d0d      	ldr	r5, [pc, #52]	@ (80055bc <__libc_init_array+0x38>)
 8005588:	4c0d      	ldr	r4, [pc, #52]	@ (80055c0 <__libc_init_array+0x3c>)
 800558a:	1b64      	subs	r4, r4, r5
 800558c:	10a4      	asrs	r4, r4, #2
 800558e:	2600      	movs	r6, #0
 8005590:	42a6      	cmp	r6, r4
 8005592:	d109      	bne.n	80055a8 <__libc_init_array+0x24>
 8005594:	4d0b      	ldr	r5, [pc, #44]	@ (80055c4 <__libc_init_array+0x40>)
 8005596:	4c0c      	ldr	r4, [pc, #48]	@ (80055c8 <__libc_init_array+0x44>)
 8005598:	f000 ffee 	bl	8006578 <_init>
 800559c:	1b64      	subs	r4, r4, r5
 800559e:	10a4      	asrs	r4, r4, #2
 80055a0:	2600      	movs	r6, #0
 80055a2:	42a6      	cmp	r6, r4
 80055a4:	d105      	bne.n	80055b2 <__libc_init_array+0x2e>
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ac:	4798      	blx	r3
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7ee      	b.n	8005590 <__libc_init_array+0xc>
 80055b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b6:	4798      	blx	r3
 80055b8:	3601      	adds	r6, #1
 80055ba:	e7f2      	b.n	80055a2 <__libc_init_array+0x1e>
 80055bc:	0800676c 	.word	0x0800676c
 80055c0:	0800676c 	.word	0x0800676c
 80055c4:	0800676c 	.word	0x0800676c
 80055c8:	08006770 	.word	0x08006770

080055cc <__retarget_lock_init_recursive>:
 80055cc:	4770      	bx	lr

080055ce <__retarget_lock_acquire_recursive>:
 80055ce:	4770      	bx	lr

080055d0 <__retarget_lock_release_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <memcpy>:
 80055d2:	440a      	add	r2, r1
 80055d4:	4291      	cmp	r1, r2
 80055d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80055da:	d100      	bne.n	80055de <memcpy+0xc>
 80055dc:	4770      	bx	lr
 80055de:	b510      	push	{r4, lr}
 80055e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e8:	4291      	cmp	r1, r2
 80055ea:	d1f9      	bne.n	80055e0 <memcpy+0xe>
 80055ec:	bd10      	pop	{r4, pc}
	...

080055f0 <__assert_func>:
 80055f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055f2:	4614      	mov	r4, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <__assert_func+0x2c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4605      	mov	r5, r0
 80055fc:	68d8      	ldr	r0, [r3, #12]
 80055fe:	b14c      	cbz	r4, 8005614 <__assert_func+0x24>
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <__assert_func+0x30>)
 8005602:	9100      	str	r1, [sp, #0]
 8005604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005608:	4906      	ldr	r1, [pc, #24]	@ (8005624 <__assert_func+0x34>)
 800560a:	462b      	mov	r3, r5
 800560c:	f000 fc9e 	bl	8005f4c <fiprintf>
 8005610:	f000 fcd8 	bl	8005fc4 <abort>
 8005614:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <__assert_func+0x38>)
 8005616:	461c      	mov	r4, r3
 8005618:	e7f3      	b.n	8005602 <__assert_func+0x12>
 800561a:	bf00      	nop
 800561c:	2000001c 	.word	0x2000001c
 8005620:	080066f3 	.word	0x080066f3
 8005624:	08006700 	.word	0x08006700
 8005628:	0800672e 	.word	0x0800672e

0800562c <_free_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4605      	mov	r5, r0
 8005630:	2900      	cmp	r1, #0
 8005632:	d041      	beq.n	80056b8 <_free_r+0x8c>
 8005634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005638:	1f0c      	subs	r4, r1, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfb8      	it	lt
 800563e:	18e4      	addlt	r4, r4, r3
 8005640:	f000 f8e8 	bl	8005814 <__malloc_lock>
 8005644:	4a1d      	ldr	r2, [pc, #116]	@ (80056bc <_free_r+0x90>)
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	b933      	cbnz	r3, 8005658 <_free_r+0x2c>
 800564a:	6063      	str	r3, [r4, #4]
 800564c:	6014      	str	r4, [r2, #0]
 800564e:	4628      	mov	r0, r5
 8005650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005654:	f000 b8e4 	b.w	8005820 <__malloc_unlock>
 8005658:	42a3      	cmp	r3, r4
 800565a:	d908      	bls.n	800566e <_free_r+0x42>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	1821      	adds	r1, r4, r0
 8005660:	428b      	cmp	r3, r1
 8005662:	bf01      	itttt	eq
 8005664:	6819      	ldreq	r1, [r3, #0]
 8005666:	685b      	ldreq	r3, [r3, #4]
 8005668:	1809      	addeq	r1, r1, r0
 800566a:	6021      	streq	r1, [r4, #0]
 800566c:	e7ed      	b.n	800564a <_free_r+0x1e>
 800566e:	461a      	mov	r2, r3
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	b10b      	cbz	r3, 8005678 <_free_r+0x4c>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d9fa      	bls.n	800566e <_free_r+0x42>
 8005678:	6811      	ldr	r1, [r2, #0]
 800567a:	1850      	adds	r0, r2, r1
 800567c:	42a0      	cmp	r0, r4
 800567e:	d10b      	bne.n	8005698 <_free_r+0x6c>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	4401      	add	r1, r0
 8005684:	1850      	adds	r0, r2, r1
 8005686:	4283      	cmp	r3, r0
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	d1e0      	bne.n	800564e <_free_r+0x22>
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	6053      	str	r3, [r2, #4]
 8005692:	4408      	add	r0, r1
 8005694:	6010      	str	r0, [r2, #0]
 8005696:	e7da      	b.n	800564e <_free_r+0x22>
 8005698:	d902      	bls.n	80056a0 <_free_r+0x74>
 800569a:	230c      	movs	r3, #12
 800569c:	602b      	str	r3, [r5, #0]
 800569e:	e7d6      	b.n	800564e <_free_r+0x22>
 80056a0:	6820      	ldr	r0, [r4, #0]
 80056a2:	1821      	adds	r1, r4, r0
 80056a4:	428b      	cmp	r3, r1
 80056a6:	bf04      	itt	eq
 80056a8:	6819      	ldreq	r1, [r3, #0]
 80056aa:	685b      	ldreq	r3, [r3, #4]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	bf04      	itt	eq
 80056b0:	1809      	addeq	r1, r1, r0
 80056b2:	6021      	streq	r1, [r4, #0]
 80056b4:	6054      	str	r4, [r2, #4]
 80056b6:	e7ca      	b.n	800564e <_free_r+0x22>
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	20004bb4 	.word	0x20004bb4

080056c0 <malloc>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	@ (80056cc <malloc+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f000 b825 	b.w	8005714 <_malloc_r>
 80056ca:	bf00      	nop
 80056cc:	2000001c 	.word	0x2000001c

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005710 <sbrk_aligned+0x40>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 fc62 	bl	8005fa4 <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fc5d 	bl	8005fa4 <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d103      	bne.n	80056f6 <sbrk_aligned+0x26>
 80056ee:	f04f 34ff 	mov.w	r4, #4294967295
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d0f8      	beq.n	80056f2 <sbrk_aligned+0x22>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fc4e 	bl	8005fa4 <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d1f2      	bne.n	80056f2 <sbrk_aligned+0x22>
 800570c:	e7ef      	b.n	80056ee <sbrk_aligned+0x1e>
 800570e:	bf00      	nop
 8005710:	20004bb0 	.word	0x20004bb0

08005714 <_malloc_r>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	1ccd      	adds	r5, r1, #3
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	2d00      	cmp	r5, #0
 8005728:	4606      	mov	r6, r0
 800572a:	db01      	blt.n	8005730 <_malloc_r+0x1c>
 800572c:	42a9      	cmp	r1, r5
 800572e:	d904      	bls.n	800573a <_malloc_r+0x26>
 8005730:	230c      	movs	r3, #12
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	2000      	movs	r0, #0
 8005736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005810 <_malloc_r+0xfc>
 800573e:	f000 f869 	bl	8005814 <__malloc_lock>
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	461c      	mov	r4, r3
 8005748:	bb44      	cbnz	r4, 800579c <_malloc_r+0x88>
 800574a:	4629      	mov	r1, r5
 800574c:	4630      	mov	r0, r6
 800574e:	f7ff ffbf 	bl	80056d0 <sbrk_aligned>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	4604      	mov	r4, r0
 8005756:	d158      	bne.n	800580a <_malloc_r+0xf6>
 8005758:	f8d8 4000 	ldr.w	r4, [r8]
 800575c:	4627      	mov	r7, r4
 800575e:	2f00      	cmp	r7, #0
 8005760:	d143      	bne.n	80057ea <_malloc_r+0xd6>
 8005762:	2c00      	cmp	r4, #0
 8005764:	d04b      	beq.n	80057fe <_malloc_r+0xea>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4639      	mov	r1, r7
 800576a:	4630      	mov	r0, r6
 800576c:	eb04 0903 	add.w	r9, r4, r3
 8005770:	f000 fc18 	bl	8005fa4 <_sbrk_r>
 8005774:	4581      	cmp	r9, r0
 8005776:	d142      	bne.n	80057fe <_malloc_r+0xea>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	1a6d      	subs	r5, r5, r1
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffa6 	bl	80056d0 <sbrk_aligned>
 8005784:	3001      	adds	r0, #1
 8005786:	d03a      	beq.n	80057fe <_malloc_r+0xea>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	442b      	add	r3, r5
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	f8d8 3000 	ldr.w	r3, [r8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	bb62      	cbnz	r2, 80057f0 <_malloc_r+0xdc>
 8005796:	f8c8 7000 	str.w	r7, [r8]
 800579a:	e00f      	b.n	80057bc <_malloc_r+0xa8>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	1b52      	subs	r2, r2, r5
 80057a0:	d420      	bmi.n	80057e4 <_malloc_r+0xd0>
 80057a2:	2a0b      	cmp	r2, #11
 80057a4:	d917      	bls.n	80057d6 <_malloc_r+0xc2>
 80057a6:	1961      	adds	r1, r4, r5
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	6025      	str	r5, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	6059      	strne	r1, [r3, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	bf08      	it	eq
 80057b4:	f8c8 1000 	streq.w	r1, [r8]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f82f 	bl	8005820 <__malloc_unlock>
 80057c2:	f104 000b 	add.w	r0, r4, #11
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	f020 0007 	bic.w	r0, r0, #7
 80057cc:	1ac2      	subs	r2, r0, r3
 80057ce:	bf1c      	itt	ne
 80057d0:	1a1b      	subne	r3, r3, r0
 80057d2:	50a3      	strne	r3, [r4, r2]
 80057d4:	e7af      	b.n	8005736 <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	f8c8 2000 	streq.w	r2, [r8]
 80057e0:	605a      	strne	r2, [r3, #4]
 80057e2:	e7eb      	b.n	80057bc <_malloc_r+0xa8>
 80057e4:	4623      	mov	r3, r4
 80057e6:	6864      	ldr	r4, [r4, #4]
 80057e8:	e7ae      	b.n	8005748 <_malloc_r+0x34>
 80057ea:	463c      	mov	r4, r7
 80057ec:	687f      	ldr	r7, [r7, #4]
 80057ee:	e7b6      	b.n	800575e <_malloc_r+0x4a>
 80057f0:	461a      	mov	r2, r3
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d1fb      	bne.n	80057f0 <_malloc_r+0xdc>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6053      	str	r3, [r2, #4]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa8>
 80057fe:	230c      	movs	r3, #12
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	4630      	mov	r0, r6
 8005804:	f000 f80c 	bl	8005820 <__malloc_unlock>
 8005808:	e794      	b.n	8005734 <_malloc_r+0x20>
 800580a:	6005      	str	r5, [r0, #0]
 800580c:	e7d6      	b.n	80057bc <_malloc_r+0xa8>
 800580e:	bf00      	nop
 8005810:	20004bb4 	.word	0x20004bb4

08005814 <__malloc_lock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_lock+0x8>)
 8005816:	f7ff beda 	b.w	80055ce <__retarget_lock_acquire_recursive>
 800581a:	bf00      	nop
 800581c:	20004bac 	.word	0x20004bac

08005820 <__malloc_unlock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_unlock+0x8>)
 8005822:	f7ff bed5 	b.w	80055d0 <__retarget_lock_release_recursive>
 8005826:	bf00      	nop
 8005828:	20004bac 	.word	0x20004bac

0800582c <__ssputs_r>:
 800582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	688e      	ldr	r6, [r1, #8]
 8005832:	461f      	mov	r7, r3
 8005834:	42be      	cmp	r6, r7
 8005836:	680b      	ldr	r3, [r1, #0]
 8005838:	4682      	mov	sl, r0
 800583a:	460c      	mov	r4, r1
 800583c:	4690      	mov	r8, r2
 800583e:	d82d      	bhi.n	800589c <__ssputs_r+0x70>
 8005840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005848:	d026      	beq.n	8005898 <__ssputs_r+0x6c>
 800584a:	6965      	ldr	r5, [r4, #20]
 800584c:	6909      	ldr	r1, [r1, #16]
 800584e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005852:	eba3 0901 	sub.w	r9, r3, r1
 8005856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800585a:	1c7b      	adds	r3, r7, #1
 800585c:	444b      	add	r3, r9
 800585e:	106d      	asrs	r5, r5, #1
 8005860:	429d      	cmp	r5, r3
 8005862:	bf38      	it	cc
 8005864:	461d      	movcc	r5, r3
 8005866:	0553      	lsls	r3, r2, #21
 8005868:	d527      	bpl.n	80058ba <__ssputs_r+0x8e>
 800586a:	4629      	mov	r1, r5
 800586c:	f7ff ff52 	bl	8005714 <_malloc_r>
 8005870:	4606      	mov	r6, r0
 8005872:	b360      	cbz	r0, 80058ce <__ssputs_r+0xa2>
 8005874:	6921      	ldr	r1, [r4, #16]
 8005876:	464a      	mov	r2, r9
 8005878:	f7ff feab 	bl	80055d2 <memcpy>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	6126      	str	r6, [r4, #16]
 800588a:	6165      	str	r5, [r4, #20]
 800588c:	444e      	add	r6, r9
 800588e:	eba5 0509 	sub.w	r5, r5, r9
 8005892:	6026      	str	r6, [r4, #0]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	463e      	mov	r6, r7
 8005898:	42be      	cmp	r6, r7
 800589a:	d900      	bls.n	800589e <__ssputs_r+0x72>
 800589c:	463e      	mov	r6, r7
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	4632      	mov	r2, r6
 80058a2:	4641      	mov	r1, r8
 80058a4:	f000 fb64 	bl	8005f70 <memmove>
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	1b9b      	subs	r3, r3, r6
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	4433      	add	r3, r6
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	462a      	mov	r2, r5
 80058bc:	f000 fb89 	bl	8005fd2 <_realloc_r>
 80058c0:	4606      	mov	r6, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1e0      	bne.n	8005888 <__ssputs_r+0x5c>
 80058c6:	6921      	ldr	r1, [r4, #16]
 80058c8:	4650      	mov	r0, sl
 80058ca:	f7ff feaf 	bl	800562c <_free_r>
 80058ce:	230c      	movs	r3, #12
 80058d0:	f8ca 3000 	str.w	r3, [sl]
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e7e9      	b.n	80058b6 <__ssputs_r+0x8a>
	...

080058e4 <_svfiprintf_r>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	4698      	mov	r8, r3
 80058ea:	898b      	ldrh	r3, [r1, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	b09d      	sub	sp, #116	@ 0x74
 80058f0:	4607      	mov	r7, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	d510      	bpl.n	800591a <_svfiprintf_r+0x36>
 80058f8:	690b      	ldr	r3, [r1, #16]
 80058fa:	b973      	cbnz	r3, 800591a <_svfiprintf_r+0x36>
 80058fc:	2140      	movs	r1, #64	@ 0x40
 80058fe:	f7ff ff09 	bl	8005714 <_malloc_r>
 8005902:	6028      	str	r0, [r5, #0]
 8005904:	6128      	str	r0, [r5, #16]
 8005906:	b930      	cbnz	r0, 8005916 <_svfiprintf_r+0x32>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b01d      	add	sp, #116	@ 0x74
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	2340      	movs	r3, #64	@ 0x40
 8005918:	616b      	str	r3, [r5, #20]
 800591a:	2300      	movs	r3, #0
 800591c:	9309      	str	r3, [sp, #36]	@ 0x24
 800591e:	2320      	movs	r3, #32
 8005920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005924:	f8cd 800c 	str.w	r8, [sp, #12]
 8005928:	2330      	movs	r3, #48	@ 0x30
 800592a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ac8 <_svfiprintf_r+0x1e4>
 800592e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005932:	f04f 0901 	mov.w	r9, #1
 8005936:	4623      	mov	r3, r4
 8005938:	469a      	mov	sl, r3
 800593a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593e:	b10a      	cbz	r2, 8005944 <_svfiprintf_r+0x60>
 8005940:	2a25      	cmp	r2, #37	@ 0x25
 8005942:	d1f9      	bne.n	8005938 <_svfiprintf_r+0x54>
 8005944:	ebba 0b04 	subs.w	fp, sl, r4
 8005948:	d00b      	beq.n	8005962 <_svfiprintf_r+0x7e>
 800594a:	465b      	mov	r3, fp
 800594c:	4622      	mov	r2, r4
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ff6b 	bl	800582c <__ssputs_r>
 8005956:	3001      	adds	r0, #1
 8005958:	f000 80a7 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800595c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595e:	445a      	add	r2, fp
 8005960:	9209      	str	r2, [sp, #36]	@ 0x24
 8005962:	f89a 3000 	ldrb.w	r3, [sl]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 809f 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800596c:	2300      	movs	r3, #0
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005976:	f10a 0a01 	add.w	sl, sl, #1
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005982:	931a      	str	r3, [sp, #104]	@ 0x68
 8005984:	4654      	mov	r4, sl
 8005986:	2205      	movs	r2, #5
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	484e      	ldr	r0, [pc, #312]	@ (8005ac8 <_svfiprintf_r+0x1e4>)
 800598e:	f7fa fc2f 	bl	80001f0 <memchr>
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	b9d8      	cbnz	r0, 80059ce <_svfiprintf_r+0xea>
 8005996:	06d0      	lsls	r0, r2, #27
 8005998:	bf44      	itt	mi
 800599a:	2320      	movmi	r3, #32
 800599c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a0:	0711      	lsls	r1, r2, #28
 80059a2:	bf44      	itt	mi
 80059a4:	232b      	movmi	r3, #43	@ 0x2b
 80059a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059aa:	f89a 3000 	ldrb.w	r3, [sl]
 80059ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b0:	d015      	beq.n	80059de <_svfiprintf_r+0xfa>
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	4654      	mov	r4, sl
 80059b6:	2000      	movs	r0, #0
 80059b8:	f04f 0c0a 	mov.w	ip, #10
 80059bc:	4621      	mov	r1, r4
 80059be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c2:	3b30      	subs	r3, #48	@ 0x30
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d94b      	bls.n	8005a60 <_svfiprintf_r+0x17c>
 80059c8:	b1b0      	cbz	r0, 80059f8 <_svfiprintf_r+0x114>
 80059ca:	9207      	str	r2, [sp, #28]
 80059cc:	e014      	b.n	80059f8 <_svfiprintf_r+0x114>
 80059ce:	eba0 0308 	sub.w	r3, r0, r8
 80059d2:	fa09 f303 	lsl.w	r3, r9, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	46a2      	mov	sl, r4
 80059dc:	e7d2      	b.n	8005984 <_svfiprintf_r+0xa0>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	9103      	str	r1, [sp, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bfbb      	ittet	lt
 80059ea:	425b      	neglt	r3, r3
 80059ec:	f042 0202 	orrlt.w	r2, r2, #2
 80059f0:	9307      	strge	r3, [sp, #28]
 80059f2:	9307      	strlt	r3, [sp, #28]
 80059f4:	bfb8      	it	lt
 80059f6:	9204      	strlt	r2, [sp, #16]
 80059f8:	7823      	ldrb	r3, [r4, #0]
 80059fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80059fc:	d10a      	bne.n	8005a14 <_svfiprintf_r+0x130>
 80059fe:	7863      	ldrb	r3, [r4, #1]
 8005a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a02:	d132      	bne.n	8005a6a <_svfiprintf_r+0x186>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9203      	str	r2, [sp, #12]
 8005a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a10:	3402      	adds	r4, #2
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ad8 <_svfiprintf_r+0x1f4>
 8005a18:	7821      	ldrb	r1, [r4, #0]
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	f7fa fbe7 	bl	80001f0 <memchr>
 8005a22:	b138      	cbz	r0, 8005a34 <_svfiprintf_r+0x150>
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	eba0 000a 	sub.w	r0, r0, sl
 8005a2a:	2240      	movs	r2, #64	@ 0x40
 8005a2c:	4082      	lsls	r2, r0
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	3401      	adds	r4, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	4824      	ldr	r0, [pc, #144]	@ (8005acc <_svfiprintf_r+0x1e8>)
 8005a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a3e:	2206      	movs	r2, #6
 8005a40:	f7fa fbd6 	bl	80001f0 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d036      	beq.n	8005ab6 <_svfiprintf_r+0x1d2>
 8005a48:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <_svfiprintf_r+0x1ec>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_svfiprintf_r+0x1b0>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5a:	4433      	add	r3, r6
 8005a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5e:	e76a      	b.n	8005936 <_svfiprintf_r+0x52>
 8005a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a64:	460c      	mov	r4, r1
 8005a66:	2001      	movs	r0, #1
 8005a68:	e7a8      	b.n	80059bc <_svfiprintf_r+0xd8>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	3401      	adds	r4, #1
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4620      	mov	r0, r4
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	@ 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_svfiprintf_r+0x1a6>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c6      	beq.n	8005a14 <_svfiprintf_r+0x130>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c4      	b.n	8005a14 <_svfiprintf_r+0x130>
 8005a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8e:	4604      	mov	r4, r0
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7f0      	b.n	8005a76 <_svfiprintf_r+0x192>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <_svfiprintf_r+0x1f0>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	1c42      	adds	r2, r0, #1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	d1d6      	bne.n	8005a58 <_svfiprintf_r+0x174>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	065b      	lsls	r3, r3, #25
 8005aae:	f53f af2d 	bmi.w	800590c <_svfiprintf_r+0x28>
 8005ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ab4:	e72c      	b.n	8005910 <_svfiprintf_r+0x2c>
 8005ab6:	ab03      	add	r3, sp, #12
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	462a      	mov	r2, r5
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <_svfiprintf_r+0x1f0>)
 8005abe:	a904      	add	r1, sp, #16
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f000 f879 	bl	8005bb8 <_printf_i>
 8005ac6:	e7ed      	b.n	8005aa4 <_svfiprintf_r+0x1c0>
 8005ac8:	0800672f 	.word	0x0800672f
 8005acc:	08006739 	.word	0x08006739
 8005ad0:	00000000 	.word	0x00000000
 8005ad4:	0800582d 	.word	0x0800582d
 8005ad8:	08006735 	.word	0x08006735

08005adc <_printf_common>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bfb8      	it	lt
 8005af0:	4613      	movlt	r3, r2
 8005af2:	6033      	str	r3, [r6, #0]
 8005af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005af8:	4607      	mov	r7, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b10a      	cbz	r2, 8005b02 <_printf_common+0x26>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0699      	lsls	r1, r3, #26
 8005b06:	bf42      	ittt	mi
 8005b08:	6833      	ldrmi	r3, [r6, #0]
 8005b0a:	3302      	addmi	r3, #2
 8005b0c:	6033      	strmi	r3, [r6, #0]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d106      	bne.n	8005b24 <_printf_common+0x48>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	6832      	ldr	r2, [r6, #0]
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc26      	bgt.n	8005b72 <_printf_common+0x96>
 8005b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	3b00      	subs	r3, #0
 8005b2c:	bf18      	it	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	d42b      	bmi.n	8005b8c <_printf_common+0xb0>
 8005b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d01e      	beq.n	8005b80 <_printf_common+0xa4>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	f003 0306 	and.w	r3, r3, #6
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	bf02      	ittt	eq
 8005b4e:	68e5      	ldreq	r5, [r4, #12]
 8005b50:	6833      	ldreq	r3, [r6, #0]
 8005b52:	1aed      	subeq	r5, r5, r3
 8005b54:	68a3      	ldr	r3, [r4, #8]
 8005b56:	bf0c      	ite	eq
 8005b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b5c:	2500      	movne	r5, #0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bfc4      	itt	gt
 8005b62:	1a9b      	subgt	r3, r3, r2
 8005b64:	18ed      	addgt	r5, r5, r3
 8005b66:	2600      	movs	r6, #0
 8005b68:	341a      	adds	r4, #26
 8005b6a:	42b5      	cmp	r5, r6
 8005b6c:	d11a      	bne.n	8005ba4 <_printf_common+0xc8>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e008      	b.n	8005b84 <_printf_common+0xa8>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4652      	mov	r2, sl
 8005b76:	4641      	mov	r1, r8
 8005b78:	4638      	mov	r0, r7
 8005b7a:	47c8      	blx	r9
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d103      	bne.n	8005b88 <_printf_common+0xac>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	3501      	adds	r5, #1
 8005b8a:	e7c6      	b.n	8005b1a <_printf_common+0x3e>
 8005b8c:	18e1      	adds	r1, r4, r3
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	2030      	movs	r0, #48	@ 0x30
 8005b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b96:	4422      	add	r2, r4
 8005b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	e7c7      	b.n	8005b34 <_printf_common+0x58>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c8      	blx	r9
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d0e6      	beq.n	8005b80 <_printf_common+0xa4>
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7d9      	b.n	8005b6a <_printf_common+0x8e>
	...

08005bb8 <_printf_i>:
 8005bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	7e0f      	ldrb	r7, [r1, #24]
 8005bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bc0:	2f78      	cmp	r7, #120	@ 0x78
 8005bc2:	4691      	mov	r9, r2
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	469a      	mov	sl, r3
 8005bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bce:	d807      	bhi.n	8005be0 <_printf_i+0x28>
 8005bd0:	2f62      	cmp	r7, #98	@ 0x62
 8005bd2:	d80a      	bhi.n	8005bea <_printf_i+0x32>
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	f000 80d1 	beq.w	8005d7c <_printf_i+0x1c4>
 8005bda:	2f58      	cmp	r7, #88	@ 0x58
 8005bdc:	f000 80b8 	beq.w	8005d50 <_printf_i+0x198>
 8005be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005be8:	e03a      	b.n	8005c60 <_printf_i+0xa8>
 8005bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bee:	2b15      	cmp	r3, #21
 8005bf0:	d8f6      	bhi.n	8005be0 <_printf_i+0x28>
 8005bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bf8 <_printf_i+0x40>)
 8005bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005be1 	.word	0x08005be1
 8005c04:	08005be1 	.word	0x08005be1
 8005c08:	08005be1 	.word	0x08005be1
 8005c0c:	08005be1 	.word	0x08005be1
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005be1 	.word	0x08005be1
 8005c18:	08005be1 	.word	0x08005be1
 8005c1c:	08005be1 	.word	0x08005be1
 8005c20:	08005be1 	.word	0x08005be1
 8005c24:	08005d63 	.word	0x08005d63
 8005c28:	08005c8f 	.word	0x08005c8f
 8005c2c:	08005d1d 	.word	0x08005d1d
 8005c30:	08005be1 	.word	0x08005be1
 8005c34:	08005be1 	.word	0x08005be1
 8005c38:	08005d85 	.word	0x08005d85
 8005c3c:	08005be1 	.word	0x08005be1
 8005c40:	08005c8f 	.word	0x08005c8f
 8005c44:	08005be1 	.word	0x08005be1
 8005c48:	08005be1 	.word	0x08005be1
 8005c4c:	08005d25 	.word	0x08005d25
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6032      	str	r2, [r6, #0]
 8005c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c60:	2301      	movs	r3, #1
 8005c62:	e09c      	b.n	8005d9e <_printf_i+0x1e6>
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	6031      	str	r1, [r6, #0]
 8005c6c:	0606      	lsls	r6, r0, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0xbc>
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	e003      	b.n	8005c7c <_printf_i+0xc4>
 8005c74:	0645      	lsls	r5, r0, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0xb8>
 8005c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	da03      	bge.n	8005c88 <_printf_i+0xd0>
 8005c80:	232d      	movs	r3, #45	@ 0x2d
 8005c82:	426d      	negs	r5, r5
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c88:	4858      	ldr	r0, [pc, #352]	@ (8005dec <_printf_i+0x234>)
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	e011      	b.n	8005cb2 <_printf_i+0xfa>
 8005c8e:	6821      	ldr	r1, [r4, #0]
 8005c90:	6833      	ldr	r3, [r6, #0]
 8005c92:	0608      	lsls	r0, r1, #24
 8005c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c98:	d402      	bmi.n	8005ca0 <_printf_i+0xe8>
 8005c9a:	0649      	lsls	r1, r1, #25
 8005c9c:	bf48      	it	mi
 8005c9e:	b2ad      	uxthmi	r5, r5
 8005ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ca2:	4852      	ldr	r0, [pc, #328]	@ (8005dec <_printf_i+0x234>)
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	bf14      	ite	ne
 8005ca8:	230a      	movne	r3, #10
 8005caa:	2308      	moveq	r3, #8
 8005cac:	2100      	movs	r1, #0
 8005cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cb2:	6866      	ldr	r6, [r4, #4]
 8005cb4:	60a6      	str	r6, [r4, #8]
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	db05      	blt.n	8005cc6 <_printf_i+0x10e>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	432e      	orrs	r6, r5
 8005cbe:	f021 0104 	bic.w	r1, r1, #4
 8005cc2:	6021      	str	r1, [r4, #0]
 8005cc4:	d04b      	beq.n	8005d5e <_printf_i+0x1a6>
 8005cc6:	4616      	mov	r6, r2
 8005cc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ccc:	fb03 5711 	mls	r7, r3, r1, r5
 8005cd0:	5dc7      	ldrb	r7, [r0, r7]
 8005cd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cd6:	462f      	mov	r7, r5
 8005cd8:	42bb      	cmp	r3, r7
 8005cda:	460d      	mov	r5, r1
 8005cdc:	d9f4      	bls.n	8005cc8 <_printf_i+0x110>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d10b      	bne.n	8005cfa <_printf_i+0x142>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	07df      	lsls	r7, r3, #31
 8005ce6:	d508      	bpl.n	8005cfa <_printf_i+0x142>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	6861      	ldr	r1, [r4, #4]
 8005cec:	4299      	cmp	r1, r3
 8005cee:	bfde      	ittt	le
 8005cf0:	2330      	movle	r3, #48	@ 0x30
 8005cf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cfa:	1b92      	subs	r2, r2, r6
 8005cfc:	6122      	str	r2, [r4, #16]
 8005cfe:	f8cd a000 	str.w	sl, [sp]
 8005d02:	464b      	mov	r3, r9
 8005d04:	aa03      	add	r2, sp, #12
 8005d06:	4621      	mov	r1, r4
 8005d08:	4640      	mov	r0, r8
 8005d0a:	f7ff fee7 	bl	8005adc <_printf_common>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d14a      	bne.n	8005da8 <_printf_i+0x1f0>
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	b004      	add	sp, #16
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	f043 0320 	orr.w	r3, r3, #32
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	4832      	ldr	r0, [pc, #200]	@ (8005df0 <_printf_i+0x238>)
 8005d26:	2778      	movs	r7, #120	@ 0x78
 8005d28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	061f      	lsls	r7, r3, #24
 8005d32:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d36:	d402      	bmi.n	8005d3e <_printf_i+0x186>
 8005d38:	065f      	lsls	r7, r3, #25
 8005d3a:	bf48      	it	mi
 8005d3c:	b2ad      	uxthmi	r5, r5
 8005d3e:	6031      	str	r1, [r6, #0]
 8005d40:	07d9      	lsls	r1, r3, #31
 8005d42:	bf44      	itt	mi
 8005d44:	f043 0320 	orrmi.w	r3, r3, #32
 8005d48:	6023      	strmi	r3, [r4, #0]
 8005d4a:	b11d      	cbz	r5, 8005d54 <_printf_i+0x19c>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	e7ad      	b.n	8005cac <_printf_i+0xf4>
 8005d50:	4826      	ldr	r0, [pc, #152]	@ (8005dec <_printf_i+0x234>)
 8005d52:	e7e9      	b.n	8005d28 <_printf_i+0x170>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	f023 0320 	bic.w	r3, r3, #32
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	e7f6      	b.n	8005d4c <_printf_i+0x194>
 8005d5e:	4616      	mov	r6, r2
 8005d60:	e7bd      	b.n	8005cde <_printf_i+0x126>
 8005d62:	6833      	ldr	r3, [r6, #0]
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	6961      	ldr	r1, [r4, #20]
 8005d68:	1d18      	adds	r0, r3, #4
 8005d6a:	6030      	str	r0, [r6, #0]
 8005d6c:	062e      	lsls	r6, r5, #24
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	d501      	bpl.n	8005d76 <_printf_i+0x1be>
 8005d72:	6019      	str	r1, [r3, #0]
 8005d74:	e002      	b.n	8005d7c <_printf_i+0x1c4>
 8005d76:	0668      	lsls	r0, r5, #25
 8005d78:	d5fb      	bpl.n	8005d72 <_printf_i+0x1ba>
 8005d7a:	8019      	strh	r1, [r3, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	4616      	mov	r6, r2
 8005d82:	e7bc      	b.n	8005cfe <_printf_i+0x146>
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	6032      	str	r2, [r6, #0]
 8005d8a:	681e      	ldr	r6, [r3, #0]
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7fa fa2d 	bl	80001f0 <memchr>
 8005d96:	b108      	cbz	r0, 8005d9c <_printf_i+0x1e4>
 8005d98:	1b80      	subs	r0, r0, r6
 8005d9a:	6060      	str	r0, [r4, #4]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	2300      	movs	r3, #0
 8005da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005da6:	e7aa      	b.n	8005cfe <_printf_i+0x146>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	4632      	mov	r2, r6
 8005dac:	4649      	mov	r1, r9
 8005dae:	4640      	mov	r0, r8
 8005db0:	47d0      	blx	sl
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0ad      	beq.n	8005d12 <_printf_i+0x15a>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	079b      	lsls	r3, r3, #30
 8005dba:	d413      	bmi.n	8005de4 <_printf_i+0x22c>
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	4618      	movlt	r0, r3
 8005dc6:	e7a6      	b.n	8005d16 <_printf_i+0x15e>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4632      	mov	r2, r6
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4640      	mov	r0, r8
 8005dd0:	47d0      	blx	sl
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d09d      	beq.n	8005d12 <_printf_i+0x15a>
 8005dd6:	3501      	adds	r5, #1
 8005dd8:	68e3      	ldr	r3, [r4, #12]
 8005dda:	9903      	ldr	r1, [sp, #12]
 8005ddc:	1a5b      	subs	r3, r3, r1
 8005dde:	42ab      	cmp	r3, r5
 8005de0:	dcf2      	bgt.n	8005dc8 <_printf_i+0x210>
 8005de2:	e7eb      	b.n	8005dbc <_printf_i+0x204>
 8005de4:	2500      	movs	r5, #0
 8005de6:	f104 0619 	add.w	r6, r4, #25
 8005dea:	e7f5      	b.n	8005dd8 <_printf_i+0x220>
 8005dec:	08006740 	.word	0x08006740
 8005df0:	08006751 	.word	0x08006751

08005df4 <__sflush_r>:
 8005df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	0716      	lsls	r6, r2, #28
 8005dfe:	4605      	mov	r5, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	d454      	bmi.n	8005eae <__sflush_r+0xba>
 8005e04:	684b      	ldr	r3, [r1, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dc02      	bgt.n	8005e10 <__sflush_r+0x1c>
 8005e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd48      	ble.n	8005ea2 <__sflush_r+0xae>
 8005e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d045      	beq.n	8005ea2 <__sflush_r+0xae>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e1c:	682f      	ldr	r7, [r5, #0]
 8005e1e:	6a21      	ldr	r1, [r4, #32]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	d030      	beq.n	8005e86 <__sflush_r+0x92>
 8005e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	0759      	lsls	r1, r3, #29
 8005e2a:	d505      	bpl.n	8005e38 <__sflush_r+0x44>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e32:	b10b      	cbz	r3, 8005e38 <__sflush_r+0x44>
 8005e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e3c:	6a21      	ldr	r1, [r4, #32]
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b0      	blx	r6
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	d106      	bne.n	8005e56 <__sflush_r+0x62>
 8005e48:	6829      	ldr	r1, [r5, #0]
 8005e4a:	291d      	cmp	r1, #29
 8005e4c:	d82b      	bhi.n	8005ea6 <__sflush_r+0xb2>
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <__sflush_r+0x104>)
 8005e50:	40ca      	lsrs	r2, r1
 8005e52:	07d6      	lsls	r6, r2, #31
 8005e54:	d527      	bpl.n	8005ea6 <__sflush_r+0xb2>
 8005e56:	2200      	movs	r2, #0
 8005e58:	6062      	str	r2, [r4, #4]
 8005e5a:	04d9      	lsls	r1, r3, #19
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	d504      	bpl.n	8005e6c <__sflush_r+0x78>
 8005e62:	1c42      	adds	r2, r0, #1
 8005e64:	d101      	bne.n	8005e6a <__sflush_r+0x76>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b903      	cbnz	r3, 8005e6c <__sflush_r+0x78>
 8005e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e6e:	602f      	str	r7, [r5, #0]
 8005e70:	b1b9      	cbz	r1, 8005ea2 <__sflush_r+0xae>
 8005e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e76:	4299      	cmp	r1, r3
 8005e78:	d002      	beq.n	8005e80 <__sflush_r+0x8c>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff fbd6 	bl	800562c <_free_r>
 8005e80:	2300      	movs	r3, #0
 8005e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e84:	e00d      	b.n	8005ea2 <__sflush_r+0xae>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b0      	blx	r6
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	1c50      	adds	r0, r2, #1
 8005e90:	d1c9      	bne.n	8005e26 <__sflush_r+0x32>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0c6      	beq.n	8005e26 <__sflush_r+0x32>
 8005e98:	2b1d      	cmp	r3, #29
 8005e9a:	d001      	beq.n	8005ea0 <__sflush_r+0xac>
 8005e9c:	2b16      	cmp	r3, #22
 8005e9e:	d11e      	bne.n	8005ede <__sflush_r+0xea>
 8005ea0:	602f      	str	r7, [r5, #0]
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e022      	b.n	8005eec <__sflush_r+0xf8>
 8005ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	e01b      	b.n	8005ee6 <__sflush_r+0xf2>
 8005eae:	690f      	ldr	r7, [r1, #16]
 8005eb0:	2f00      	cmp	r7, #0
 8005eb2:	d0f6      	beq.n	8005ea2 <__sflush_r+0xae>
 8005eb4:	0793      	lsls	r3, r2, #30
 8005eb6:	680e      	ldr	r6, [r1, #0]
 8005eb8:	bf08      	it	eq
 8005eba:	694b      	ldreq	r3, [r1, #20]
 8005ebc:	600f      	str	r7, [r1, #0]
 8005ebe:	bf18      	it	ne
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	eba6 0807 	sub.w	r8, r6, r7
 8005ec6:	608b      	str	r3, [r1, #8]
 8005ec8:	f1b8 0f00 	cmp.w	r8, #0
 8005ecc:	dde9      	ble.n	8005ea2 <__sflush_r+0xae>
 8005ece:	6a21      	ldr	r1, [r4, #32]
 8005ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ed2:	4643      	mov	r3, r8
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b0      	blx	r6
 8005eda:	2800      	cmp	r0, #0
 8005edc:	dc08      	bgt.n	8005ef0 <__sflush_r+0xfc>
 8005ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	4407      	add	r7, r0
 8005ef2:	eba8 0800 	sub.w	r8, r8, r0
 8005ef6:	e7e7      	b.n	8005ec8 <__sflush_r+0xd4>
 8005ef8:	20400001 	.word	0x20400001

08005efc <_fflush_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	690b      	ldr	r3, [r1, #16]
 8005f00:	4605      	mov	r5, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	b913      	cbnz	r3, 8005f0c <_fflush_r+0x10>
 8005f06:	2500      	movs	r5, #0
 8005f08:	4628      	mov	r0, r5
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	b118      	cbz	r0, 8005f16 <_fflush_r+0x1a>
 8005f0e:	6a03      	ldr	r3, [r0, #32]
 8005f10:	b90b      	cbnz	r3, 8005f16 <_fflush_r+0x1a>
 8005f12:	f7ff fa33 	bl	800537c <__sinit>
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f3      	beq.n	8005f06 <_fflush_r+0xa>
 8005f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f20:	07d0      	lsls	r0, r2, #31
 8005f22:	d404      	bmi.n	8005f2e <_fflush_r+0x32>
 8005f24:	0599      	lsls	r1, r3, #22
 8005f26:	d402      	bmi.n	8005f2e <_fflush_r+0x32>
 8005f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f2a:	f7ff fb50 	bl	80055ce <__retarget_lock_acquire_recursive>
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4621      	mov	r1, r4
 8005f32:	f7ff ff5f 	bl	8005df4 <__sflush_r>
 8005f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f38:	07da      	lsls	r2, r3, #31
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	d4e4      	bmi.n	8005f08 <_fflush_r+0xc>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	059b      	lsls	r3, r3, #22
 8005f42:	d4e1      	bmi.n	8005f08 <_fflush_r+0xc>
 8005f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f46:	f7ff fb43 	bl	80055d0 <__retarget_lock_release_recursive>
 8005f4a:	e7dd      	b.n	8005f08 <_fflush_r+0xc>

08005f4c <fiprintf>:
 8005f4c:	b40e      	push	{r1, r2, r3}
 8005f4e:	b503      	push	{r0, r1, lr}
 8005f50:	4601      	mov	r1, r0
 8005f52:	ab03      	add	r3, sp, #12
 8005f54:	4805      	ldr	r0, [pc, #20]	@ (8005f6c <fiprintf+0x20>)
 8005f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	f000 f88f 	bl	8006080 <_vfiprintf_r>
 8005f62:	b002      	add	sp, #8
 8005f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f68:	b003      	add	sp, #12
 8005f6a:	4770      	bx	lr
 8005f6c:	2000001c 	.word	0x2000001c

08005f70 <memmove>:
 8005f70:	4288      	cmp	r0, r1
 8005f72:	b510      	push	{r4, lr}
 8005f74:	eb01 0402 	add.w	r4, r1, r2
 8005f78:	d902      	bls.n	8005f80 <memmove+0x10>
 8005f7a:	4284      	cmp	r4, r0
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	d807      	bhi.n	8005f90 <memmove+0x20>
 8005f80:	1e43      	subs	r3, r0, #1
 8005f82:	42a1      	cmp	r1, r4
 8005f84:	d008      	beq.n	8005f98 <memmove+0x28>
 8005f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f8e:	e7f8      	b.n	8005f82 <memmove+0x12>
 8005f90:	4402      	add	r2, r0
 8005f92:	4601      	mov	r1, r0
 8005f94:	428a      	cmp	r2, r1
 8005f96:	d100      	bne.n	8005f9a <memmove+0x2a>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa2:	e7f7      	b.n	8005f94 <memmove+0x24>

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	@ (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fa fe60 	bl	8000c74 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20004ba8 	.word	0x20004ba8

08005fc4 <abort>:
 8005fc4:	b508      	push	{r3, lr}
 8005fc6:	2006      	movs	r0, #6
 8005fc8:	f000 fa2e 	bl	8006428 <raise>
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7fa fdd9 	bl	8000b84 <_exit>

08005fd2 <_realloc_r>:
 8005fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	4614      	mov	r4, r2
 8005fda:	460d      	mov	r5, r1
 8005fdc:	b921      	cbnz	r1, 8005fe8 <_realloc_r+0x16>
 8005fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	f7ff bb96 	b.w	8005714 <_malloc_r>
 8005fe8:	b92a      	cbnz	r2, 8005ff6 <_realloc_r+0x24>
 8005fea:	f7ff fb1f 	bl	800562c <_free_r>
 8005fee:	4625      	mov	r5, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff6:	f000 fa33 	bl	8006460 <_malloc_usable_size_r>
 8005ffa:	4284      	cmp	r4, r0
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	d802      	bhi.n	8006006 <_realloc_r+0x34>
 8006000:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006004:	d8f4      	bhi.n	8005ff0 <_realloc_r+0x1e>
 8006006:	4621      	mov	r1, r4
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff fb83 	bl	8005714 <_malloc_r>
 800600e:	4680      	mov	r8, r0
 8006010:	b908      	cbnz	r0, 8006016 <_realloc_r+0x44>
 8006012:	4645      	mov	r5, r8
 8006014:	e7ec      	b.n	8005ff0 <_realloc_r+0x1e>
 8006016:	42b4      	cmp	r4, r6
 8006018:	4622      	mov	r2, r4
 800601a:	4629      	mov	r1, r5
 800601c:	bf28      	it	cs
 800601e:	4632      	movcs	r2, r6
 8006020:	f7ff fad7 	bl	80055d2 <memcpy>
 8006024:	4629      	mov	r1, r5
 8006026:	4638      	mov	r0, r7
 8006028:	f7ff fb00 	bl	800562c <_free_r>
 800602c:	e7f1      	b.n	8006012 <_realloc_r+0x40>

0800602e <__sfputc_r>:
 800602e:	6893      	ldr	r3, [r2, #8]
 8006030:	3b01      	subs	r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	b410      	push	{r4}
 8006036:	6093      	str	r3, [r2, #8]
 8006038:	da08      	bge.n	800604c <__sfputc_r+0x1e>
 800603a:	6994      	ldr	r4, [r2, #24]
 800603c:	42a3      	cmp	r3, r4
 800603e:	db01      	blt.n	8006044 <__sfputc_r+0x16>
 8006040:	290a      	cmp	r1, #10
 8006042:	d103      	bne.n	800604c <__sfputc_r+0x1e>
 8006044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006048:	f000 b932 	b.w	80062b0 <__swbuf_r>
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	1c58      	adds	r0, r3, #1
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	7019      	strb	r1, [r3, #0]
 8006054:	4608      	mov	r0, r1
 8006056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800605a:	4770      	bx	lr

0800605c <__sfputs_r>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	4614      	mov	r4, r2
 8006064:	18d5      	adds	r5, r2, r3
 8006066:	42ac      	cmp	r4, r5
 8006068:	d101      	bne.n	800606e <__sfputs_r+0x12>
 800606a:	2000      	movs	r0, #0
 800606c:	e007      	b.n	800607e <__sfputs_r+0x22>
 800606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006072:	463a      	mov	r2, r7
 8006074:	4630      	mov	r0, r6
 8006076:	f7ff ffda 	bl	800602e <__sfputc_r>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d1f3      	bne.n	8006066 <__sfputs_r+0xa>
 800607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006080 <_vfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	460d      	mov	r5, r1
 8006086:	b09d      	sub	sp, #116	@ 0x74
 8006088:	4614      	mov	r4, r2
 800608a:	4698      	mov	r8, r3
 800608c:	4606      	mov	r6, r0
 800608e:	b118      	cbz	r0, 8006098 <_vfiprintf_r+0x18>
 8006090:	6a03      	ldr	r3, [r0, #32]
 8006092:	b90b      	cbnz	r3, 8006098 <_vfiprintf_r+0x18>
 8006094:	f7ff f972 	bl	800537c <__sinit>
 8006098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d405      	bmi.n	80060aa <_vfiprintf_r+0x2a>
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	059a      	lsls	r2, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_vfiprintf_r+0x2a>
 80060a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a6:	f7ff fa92 	bl	80055ce <__retarget_lock_acquire_recursive>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	071b      	lsls	r3, r3, #28
 80060ae:	d501      	bpl.n	80060b4 <_vfiprintf_r+0x34>
 80060b0:	692b      	ldr	r3, [r5, #16]
 80060b2:	b99b      	cbnz	r3, 80060dc <_vfiprintf_r+0x5c>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 f938 	bl	800632c <__swsetup_r>
 80060bc:	b170      	cbz	r0, 80060dc <_vfiprintf_r+0x5c>
 80060be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c0:	07dc      	lsls	r4, r3, #31
 80060c2:	d504      	bpl.n	80060ce <_vfiprintf_r+0x4e>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b01d      	add	sp, #116	@ 0x74
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	0598      	lsls	r0, r3, #22
 80060d2:	d4f7      	bmi.n	80060c4 <_vfiprintf_r+0x44>
 80060d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060d6:	f7ff fa7b 	bl	80055d0 <__retarget_lock_release_recursive>
 80060da:	e7f3      	b.n	80060c4 <_vfiprintf_r+0x44>
 80060dc:	2300      	movs	r3, #0
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e0:	2320      	movs	r3, #32
 80060e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ea:	2330      	movs	r3, #48	@ 0x30
 80060ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800629c <_vfiprintf_r+0x21c>
 80060f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060f4:	f04f 0901 	mov.w	r9, #1
 80060f8:	4623      	mov	r3, r4
 80060fa:	469a      	mov	sl, r3
 80060fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006100:	b10a      	cbz	r2, 8006106 <_vfiprintf_r+0x86>
 8006102:	2a25      	cmp	r2, #37	@ 0x25
 8006104:	d1f9      	bne.n	80060fa <_vfiprintf_r+0x7a>
 8006106:	ebba 0b04 	subs.w	fp, sl, r4
 800610a:	d00b      	beq.n	8006124 <_vfiprintf_r+0xa4>
 800610c:	465b      	mov	r3, fp
 800610e:	4622      	mov	r2, r4
 8006110:	4629      	mov	r1, r5
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffa2 	bl	800605c <__sfputs_r>
 8006118:	3001      	adds	r0, #1
 800611a:	f000 80a7 	beq.w	800626c <_vfiprintf_r+0x1ec>
 800611e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006120:	445a      	add	r2, fp
 8006122:	9209      	str	r2, [sp, #36]	@ 0x24
 8006124:	f89a 3000 	ldrb.w	r3, [sl]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 809f 	beq.w	800626c <_vfiprintf_r+0x1ec>
 800612e:	2300      	movs	r3, #0
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006138:	f10a 0a01 	add.w	sl, sl, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	9307      	str	r3, [sp, #28]
 8006140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006144:	931a      	str	r3, [sp, #104]	@ 0x68
 8006146:	4654      	mov	r4, sl
 8006148:	2205      	movs	r2, #5
 800614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614e:	4853      	ldr	r0, [pc, #332]	@ (800629c <_vfiprintf_r+0x21c>)
 8006150:	f7fa f84e 	bl	80001f0 <memchr>
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	b9d8      	cbnz	r0, 8006190 <_vfiprintf_r+0x110>
 8006158:	06d1      	lsls	r1, r2, #27
 800615a:	bf44      	itt	mi
 800615c:	2320      	movmi	r3, #32
 800615e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006162:	0713      	lsls	r3, r2, #28
 8006164:	bf44      	itt	mi
 8006166:	232b      	movmi	r3, #43	@ 0x2b
 8006168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800616c:	f89a 3000 	ldrb.w	r3, [sl]
 8006170:	2b2a      	cmp	r3, #42	@ 0x2a
 8006172:	d015      	beq.n	80061a0 <_vfiprintf_r+0x120>
 8006174:	9a07      	ldr	r2, [sp, #28]
 8006176:	4654      	mov	r4, sl
 8006178:	2000      	movs	r0, #0
 800617a:	f04f 0c0a 	mov.w	ip, #10
 800617e:	4621      	mov	r1, r4
 8006180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006184:	3b30      	subs	r3, #48	@ 0x30
 8006186:	2b09      	cmp	r3, #9
 8006188:	d94b      	bls.n	8006222 <_vfiprintf_r+0x1a2>
 800618a:	b1b0      	cbz	r0, 80061ba <_vfiprintf_r+0x13a>
 800618c:	9207      	str	r2, [sp, #28]
 800618e:	e014      	b.n	80061ba <_vfiprintf_r+0x13a>
 8006190:	eba0 0308 	sub.w	r3, r0, r8
 8006194:	fa09 f303 	lsl.w	r3, r9, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	46a2      	mov	sl, r4
 800619e:	e7d2      	b.n	8006146 <_vfiprintf_r+0xc6>
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	1d19      	adds	r1, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9103      	str	r1, [sp, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfbb      	ittet	lt
 80061ac:	425b      	neglt	r3, r3
 80061ae:	f042 0202 	orrlt.w	r2, r2, #2
 80061b2:	9307      	strge	r3, [sp, #28]
 80061b4:	9307      	strlt	r3, [sp, #28]
 80061b6:	bfb8      	it	lt
 80061b8:	9204      	strlt	r2, [sp, #16]
 80061ba:	7823      	ldrb	r3, [r4, #0]
 80061bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80061be:	d10a      	bne.n	80061d6 <_vfiprintf_r+0x156>
 80061c0:	7863      	ldrb	r3, [r4, #1]
 80061c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061c4:	d132      	bne.n	800622c <_vfiprintf_r+0x1ac>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	9203      	str	r2, [sp, #12]
 80061ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061d2:	3402      	adds	r4, #2
 80061d4:	9305      	str	r3, [sp, #20]
 80061d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062ac <_vfiprintf_r+0x22c>
 80061da:	7821      	ldrb	r1, [r4, #0]
 80061dc:	2203      	movs	r2, #3
 80061de:	4650      	mov	r0, sl
 80061e0:	f7fa f806 	bl	80001f0 <memchr>
 80061e4:	b138      	cbz	r0, 80061f6 <_vfiprintf_r+0x176>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	eba0 000a 	sub.w	r0, r0, sl
 80061ec:	2240      	movs	r2, #64	@ 0x40
 80061ee:	4082      	lsls	r2, r0
 80061f0:	4313      	orrs	r3, r2
 80061f2:	3401      	adds	r4, #1
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fa:	4829      	ldr	r0, [pc, #164]	@ (80062a0 <_vfiprintf_r+0x220>)
 80061fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006200:	2206      	movs	r2, #6
 8006202:	f7f9 fff5 	bl	80001f0 <memchr>
 8006206:	2800      	cmp	r0, #0
 8006208:	d03f      	beq.n	800628a <_vfiprintf_r+0x20a>
 800620a:	4b26      	ldr	r3, [pc, #152]	@ (80062a4 <_vfiprintf_r+0x224>)
 800620c:	bb1b      	cbnz	r3, 8006256 <_vfiprintf_r+0x1d6>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	3307      	adds	r3, #7
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	3308      	adds	r3, #8
 8006218:	9303      	str	r3, [sp, #12]
 800621a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621c:	443b      	add	r3, r7
 800621e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006220:	e76a      	b.n	80060f8 <_vfiprintf_r+0x78>
 8006222:	fb0c 3202 	mla	r2, ip, r2, r3
 8006226:	460c      	mov	r4, r1
 8006228:	2001      	movs	r0, #1
 800622a:	e7a8      	b.n	800617e <_vfiprintf_r+0xfe>
 800622c:	2300      	movs	r3, #0
 800622e:	3401      	adds	r4, #1
 8006230:	9305      	str	r3, [sp, #20]
 8006232:	4619      	mov	r1, r3
 8006234:	f04f 0c0a 	mov.w	ip, #10
 8006238:	4620      	mov	r0, r4
 800623a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800623e:	3a30      	subs	r2, #48	@ 0x30
 8006240:	2a09      	cmp	r2, #9
 8006242:	d903      	bls.n	800624c <_vfiprintf_r+0x1cc>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0c6      	beq.n	80061d6 <_vfiprintf_r+0x156>
 8006248:	9105      	str	r1, [sp, #20]
 800624a:	e7c4      	b.n	80061d6 <_vfiprintf_r+0x156>
 800624c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006250:	4604      	mov	r4, r0
 8006252:	2301      	movs	r3, #1
 8006254:	e7f0      	b.n	8006238 <_vfiprintf_r+0x1b8>
 8006256:	ab03      	add	r3, sp, #12
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	462a      	mov	r2, r5
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <_vfiprintf_r+0x228>)
 800625e:	a904      	add	r1, sp, #16
 8006260:	4630      	mov	r0, r6
 8006262:	f3af 8000 	nop.w
 8006266:	4607      	mov	r7, r0
 8006268:	1c78      	adds	r0, r7, #1
 800626a:	d1d6      	bne.n	800621a <_vfiprintf_r+0x19a>
 800626c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	d405      	bmi.n	800627e <_vfiprintf_r+0x1fe>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d402      	bmi.n	800627e <_vfiprintf_r+0x1fe>
 8006278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800627a:	f7ff f9a9 	bl	80055d0 <__retarget_lock_release_recursive>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	065b      	lsls	r3, r3, #25
 8006282:	f53f af1f 	bmi.w	80060c4 <_vfiprintf_r+0x44>
 8006286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006288:	e71e      	b.n	80060c8 <_vfiprintf_r+0x48>
 800628a:	ab03      	add	r3, sp, #12
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	462a      	mov	r2, r5
 8006290:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <_vfiprintf_r+0x228>)
 8006292:	a904      	add	r1, sp, #16
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff fc8f 	bl	8005bb8 <_printf_i>
 800629a:	e7e4      	b.n	8006266 <_vfiprintf_r+0x1e6>
 800629c:	0800672f 	.word	0x0800672f
 80062a0:	08006739 	.word	0x08006739
 80062a4:	00000000 	.word	0x00000000
 80062a8:	0800605d 	.word	0x0800605d
 80062ac:	08006735 	.word	0x08006735

080062b0 <__swbuf_r>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	460e      	mov	r6, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	4605      	mov	r5, r0
 80062b8:	b118      	cbz	r0, 80062c2 <__swbuf_r+0x12>
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	b90b      	cbnz	r3, 80062c2 <__swbuf_r+0x12>
 80062be:	f7ff f85d 	bl	800537c <__sinit>
 80062c2:	69a3      	ldr	r3, [r4, #24]
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	071a      	lsls	r2, r3, #28
 80062ca:	d501      	bpl.n	80062d0 <__swbuf_r+0x20>
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	b943      	cbnz	r3, 80062e2 <__swbuf_r+0x32>
 80062d0:	4621      	mov	r1, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 f82a 	bl	800632c <__swsetup_r>
 80062d8:	b118      	cbz	r0, 80062e2 <__swbuf_r+0x32>
 80062da:	f04f 37ff 	mov.w	r7, #4294967295
 80062de:	4638      	mov	r0, r7
 80062e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	6922      	ldr	r2, [r4, #16]
 80062e6:	1a98      	subs	r0, r3, r2
 80062e8:	6963      	ldr	r3, [r4, #20]
 80062ea:	b2f6      	uxtb	r6, r6
 80062ec:	4283      	cmp	r3, r0
 80062ee:	4637      	mov	r7, r6
 80062f0:	dc05      	bgt.n	80062fe <__swbuf_r+0x4e>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff fe01 	bl	8005efc <_fflush_r>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d1ed      	bne.n	80062da <__swbuf_r+0x2a>
 80062fe:	68a3      	ldr	r3, [r4, #8]
 8006300:	3b01      	subs	r3, #1
 8006302:	60a3      	str	r3, [r4, #8]
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	6022      	str	r2, [r4, #0]
 800630a:	701e      	strb	r6, [r3, #0]
 800630c:	6962      	ldr	r2, [r4, #20]
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	429a      	cmp	r2, r3
 8006312:	d004      	beq.n	800631e <__swbuf_r+0x6e>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	07db      	lsls	r3, r3, #31
 8006318:	d5e1      	bpl.n	80062de <__swbuf_r+0x2e>
 800631a:	2e0a      	cmp	r6, #10
 800631c:	d1df      	bne.n	80062de <__swbuf_r+0x2e>
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f7ff fdeb 	bl	8005efc <_fflush_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	d0d9      	beq.n	80062de <__swbuf_r+0x2e>
 800632a:	e7d6      	b.n	80062da <__swbuf_r+0x2a>

0800632c <__swsetup_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4b29      	ldr	r3, [pc, #164]	@ (80063d4 <__swsetup_r+0xa8>)
 8006330:	4605      	mov	r5, r0
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	460c      	mov	r4, r1
 8006336:	b118      	cbz	r0, 8006340 <__swsetup_r+0x14>
 8006338:	6a03      	ldr	r3, [r0, #32]
 800633a:	b90b      	cbnz	r3, 8006340 <__swsetup_r+0x14>
 800633c:	f7ff f81e 	bl	800537c <__sinit>
 8006340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006344:	0719      	lsls	r1, r3, #28
 8006346:	d422      	bmi.n	800638e <__swsetup_r+0x62>
 8006348:	06da      	lsls	r2, r3, #27
 800634a:	d407      	bmi.n	800635c <__swsetup_r+0x30>
 800634c:	2209      	movs	r2, #9
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	e033      	b.n	80063c4 <__swsetup_r+0x98>
 800635c:	0758      	lsls	r0, r3, #29
 800635e:	d512      	bpl.n	8006386 <__swsetup_r+0x5a>
 8006360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006362:	b141      	cbz	r1, 8006376 <__swsetup_r+0x4a>
 8006364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006368:	4299      	cmp	r1, r3
 800636a:	d002      	beq.n	8006372 <__swsetup_r+0x46>
 800636c:	4628      	mov	r0, r5
 800636e:	f7ff f95d 	bl	800562c <_free_r>
 8006372:	2300      	movs	r3, #0
 8006374:	6363      	str	r3, [r4, #52]	@ 0x34
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	2300      	movs	r3, #0
 8006380:	6063      	str	r3, [r4, #4]
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f043 0308 	orr.w	r3, r3, #8
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	b94b      	cbnz	r3, 80063a6 <__swsetup_r+0x7a>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800639c:	d003      	beq.n	80063a6 <__swsetup_r+0x7a>
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f88b 	bl	80064bc <__smakebuf_r>
 80063a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063aa:	f013 0201 	ands.w	r2, r3, #1
 80063ae:	d00a      	beq.n	80063c6 <__swsetup_r+0x9a>
 80063b0:	2200      	movs	r2, #0
 80063b2:	60a2      	str	r2, [r4, #8]
 80063b4:	6962      	ldr	r2, [r4, #20]
 80063b6:	4252      	negs	r2, r2
 80063b8:	61a2      	str	r2, [r4, #24]
 80063ba:	6922      	ldr	r2, [r4, #16]
 80063bc:	b942      	cbnz	r2, 80063d0 <__swsetup_r+0xa4>
 80063be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063c2:	d1c5      	bne.n	8006350 <__swsetup_r+0x24>
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	0799      	lsls	r1, r3, #30
 80063c8:	bf58      	it	pl
 80063ca:	6962      	ldrpl	r2, [r4, #20]
 80063cc:	60a2      	str	r2, [r4, #8]
 80063ce:	e7f4      	b.n	80063ba <__swsetup_r+0x8e>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7f7      	b.n	80063c4 <__swsetup_r+0x98>
 80063d4:	2000001c 	.word	0x2000001c

080063d8 <_raise_r>:
 80063d8:	291f      	cmp	r1, #31
 80063da:	b538      	push	{r3, r4, r5, lr}
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	d904      	bls.n	80063ec <_raise_r+0x14>
 80063e2:	2316      	movs	r3, #22
 80063e4:	6003      	str	r3, [r0, #0]
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063ee:	b112      	cbz	r2, 80063f6 <_raise_r+0x1e>
 80063f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063f4:	b94b      	cbnz	r3, 800640a <_raise_r+0x32>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f830 	bl	800645c <_getpid_r>
 80063fc:	4622      	mov	r2, r4
 80063fe:	4601      	mov	r1, r0
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006406:	f000 b817 	b.w	8006438 <_kill_r>
 800640a:	2b01      	cmp	r3, #1
 800640c:	d00a      	beq.n	8006424 <_raise_r+0x4c>
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	d103      	bne.n	800641a <_raise_r+0x42>
 8006412:	2316      	movs	r3, #22
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	2001      	movs	r0, #1
 8006418:	e7e7      	b.n	80063ea <_raise_r+0x12>
 800641a:	2100      	movs	r1, #0
 800641c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006420:	4620      	mov	r0, r4
 8006422:	4798      	blx	r3
 8006424:	2000      	movs	r0, #0
 8006426:	e7e0      	b.n	80063ea <_raise_r+0x12>

08006428 <raise>:
 8006428:	4b02      	ldr	r3, [pc, #8]	@ (8006434 <raise+0xc>)
 800642a:	4601      	mov	r1, r0
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f7ff bfd3 	b.w	80063d8 <_raise_r>
 8006432:	bf00      	nop
 8006434:	2000001c 	.word	0x2000001c

08006438 <_kill_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d07      	ldr	r5, [pc, #28]	@ (8006458 <_kill_r+0x20>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	4611      	mov	r1, r2
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	f7fa fb8d 	bl	8000b64 <_kill>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d102      	bne.n	8006454 <_kill_r+0x1c>
 800644e:	682b      	ldr	r3, [r5, #0]
 8006450:	b103      	cbz	r3, 8006454 <_kill_r+0x1c>
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	bd38      	pop	{r3, r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	20004ba8 	.word	0x20004ba8

0800645c <_getpid_r>:
 800645c:	f7fa bb7a 	b.w	8000b54 <_getpid>

08006460 <_malloc_usable_size_r>:
 8006460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006464:	1f18      	subs	r0, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfbc      	itt	lt
 800646a:	580b      	ldrlt	r3, [r1, r0]
 800646c:	18c0      	addlt	r0, r0, r3
 800646e:	4770      	bx	lr

08006470 <__swhatbuf_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	2900      	cmp	r1, #0
 800647a:	b096      	sub	sp, #88	@ 0x58
 800647c:	4615      	mov	r5, r2
 800647e:	461e      	mov	r6, r3
 8006480:	da0d      	bge.n	800649e <__swhatbuf_r+0x2e>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	bf14      	ite	ne
 800648e:	2340      	movne	r3, #64	@ 0x40
 8006490:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006494:	2000      	movs	r0, #0
 8006496:	6031      	str	r1, [r6, #0]
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	b016      	add	sp, #88	@ 0x58
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	466a      	mov	r2, sp
 80064a0:	f000 f848 	bl	8006534 <_fstat_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	dbec      	blt.n	8006482 <__swhatbuf_r+0x12>
 80064a8:	9901      	ldr	r1, [sp, #4]
 80064aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064b2:	4259      	negs	r1, r3
 80064b4:	4159      	adcs	r1, r3
 80064b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064ba:	e7eb      	b.n	8006494 <__swhatbuf_r+0x24>

080064bc <__smakebuf_r>:
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c0:	079d      	lsls	r5, r3, #30
 80064c2:	4606      	mov	r6, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	d507      	bpl.n	80064d8 <__smakebuf_r+0x1c>
 80064c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2301      	movs	r3, #1
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	b003      	add	sp, #12
 80064d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d8:	ab01      	add	r3, sp, #4
 80064da:	466a      	mov	r2, sp
 80064dc:	f7ff ffc8 	bl	8006470 <__swhatbuf_r>
 80064e0:	9f00      	ldr	r7, [sp, #0]
 80064e2:	4605      	mov	r5, r0
 80064e4:	4639      	mov	r1, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff f914 	bl	8005714 <_malloc_r>
 80064ec:	b948      	cbnz	r0, 8006502 <__smakebuf_r+0x46>
 80064ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f2:	059a      	lsls	r2, r3, #22
 80064f4:	d4ee      	bmi.n	80064d4 <__smakebuf_r+0x18>
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	e7e2      	b.n	80064c8 <__smakebuf_r+0xc>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	6020      	str	r0, [r4, #0]
 8006506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006512:	b15b      	cbz	r3, 800652c <__smakebuf_r+0x70>
 8006514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006518:	4630      	mov	r0, r6
 800651a:	f000 f81d 	bl	8006558 <_isatty_r>
 800651e:	b128      	cbz	r0, 800652c <__smakebuf_r+0x70>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	431d      	orrs	r5, r3
 8006530:	81a5      	strh	r5, [r4, #12]
 8006532:	e7cf      	b.n	80064d4 <__smakebuf_r+0x18>

08006534 <_fstat_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	@ (8006554 <_fstat_r+0x20>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fa fb6f 	bl	8000c24 <_fstat>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_fstat_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_fstat_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	20004ba8 	.word	0x20004ba8

08006558 <_isatty_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d06      	ldr	r5, [pc, #24]	@ (8006574 <_isatty_r+0x1c>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fa fb6e 	bl	8000c44 <_isatty>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_isatty_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_isatty_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20004ba8 	.word	0x20004ba8

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
