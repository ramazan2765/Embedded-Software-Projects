
FreeRTOS_TaskManager_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006570  08006570  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00007570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006578  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  20000060  080065d8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  080065d8  00008cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bce5  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388d  00000000  00000000  00023d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00027608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c6  00000000  00000000  00028df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038bc  00000000  00000000  0002a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b064  00000000  00000000  0002d972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ae1  00000000  00000000  000489d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e94b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000694c  00000000  00000000  000e94fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000efe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064b8 	.word	0x080064b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080064b8 	.word	0x080064b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_GPIO_EXTI_Callback>:

SemaphoreHandle_t xSemaphore_Button;


/* Definitions for defaultTask */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_15) {
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800051c:	d114      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x3c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
        xSemaphoreGiveFromISR(xSemaphore_Button, &xHigherPriorityTaskWoken);
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <HAL_GPIO_EXTI_Callback+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f107 020c 	add.w	r2, r7, #12
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f003 faf5 	bl	8003b1c <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d007      	beq.n	8000548 <HAL_GPIO_EXTI_Callback+0x3c>
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_GPIO_EXTI_Callback+0x48>)
 800053a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	f3bf 8f4f 	dsb	sy
 8000544:	f3bf 8f6f 	isb	sy
    }
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000138 	.word	0x20000138
 8000554:	e000ed04 	.word	0xe000ed04

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fc61 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f88b 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f9a5 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056a:	f000 f8f1 	bl	8000750 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800056e:	f000 f977 	bl	8000860 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000572:	f000 f91b 	bl	80007ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	xQueue_SensorData = xQueueCreate(10, sizeof(sensorData_t));
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	200a      	movs	r0, #10
 800057c:	f003 f89d 	bl	80036ba <xQueueGenericCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a30      	ldr	r2, [pc, #192]	@ (8000644 <main+0xec>)
 8000584:	6013      	str	r3, [r2, #0]
	if (xQueue_SensorData == NULL) {
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <main+0xec>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d115      	bne.n	80005ba <main+0x62>
		char err[] = "Queue is not created\r\n";
 800058e:	4b2e      	ldr	r3, [pc, #184]	@ (8000648 <main+0xf0>)
 8000590:	463c      	mov	r4, r7
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0003 	ldmia.w	r5, {r0, r1}
 800059c:	6020      	str	r0, [r4, #0]
 800059e:	3404      	adds	r4, #4
 80005a0:	8021      	strh	r1, [r4, #0]
 80005a2:	3402      	adds	r4, #2
 80005a4:	0c0b      	lsrs	r3, r1, #16
 80005a6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) err, sizeof(err), HAL_MAX_DELAY);
 80005a8:	4639      	mov	r1, r7
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2217      	movs	r2, #23
 80005b0:	4826      	ldr	r0, [pc, #152]	@ (800064c <main+0xf4>)
 80005b2:	f002 fae7 	bl	8002b84 <HAL_UART_Transmit>
		while (1)
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <main+0x5e>
			;  //lock
	}

	xQueue_Events = xQueueCreate(10, sizeof(Event_t));
 80005ba:	2200      	movs	r2, #0
 80005bc:	210c      	movs	r1, #12
 80005be:	200a      	movs	r0, #10
 80005c0:	f003 f87b 	bl	80036ba <xQueueGenericCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <main+0xf8>)
 80005c8:	6013      	str	r3, [r2, #0]
	xSemaphore_Button = xSemaphoreCreateBinary();
 80005ca:	2203      	movs	r2, #3
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f003 f873 	bl	80036ba <xQueueGenericCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <main+0xfc>)
 80005d8:	6013      	str	r3, [r2, #0]
	xMutex_I2C = xSemaphoreCreateMutex();
 80005da:	2001      	movs	r0, #1
 80005dc:	f003 f8e5 	bl	80037aa <xQueueCreateMutex>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <main+0x100>)
 80005e4:	6013      	str	r3, [r2, #0]


	xTaskCreate(TaskSensor, "Sensor", 256, NULL, 4, NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2304      	movs	r3, #4
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005f4:	4919      	ldr	r1, [pc, #100]	@ (800065c <main+0x104>)
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <main+0x108>)
 80005f8:	f003 fef8 	bl	80043ec <xTaskCreate>
	xTaskCreate(TaskButton, "Button", 256, NULL, 3, NULL);
 80005fc:	2300      	movs	r3, #0
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2303      	movs	r3, #3
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800060a:	4916      	ldr	r1, [pc, #88]	@ (8000664 <main+0x10c>)
 800060c:	4816      	ldr	r0, [pc, #88]	@ (8000668 <main+0x110>)
 800060e:	f003 feed 	bl	80043ec <xTaskCreate>
	xTaskCreate(TaskUart, "UART", 256, NULL, 2, NULL);
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2302      	movs	r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000620:	4912      	ldr	r1, [pc, #72]	@ (800066c <main+0x114>)
 8000622:	4813      	ldr	r0, [pc, #76]	@ (8000670 <main+0x118>)
 8000624:	f003 fee2 	bl	80043ec <xTaskCreate>
	xTaskCreate(TaskLed, "LED", 128, NULL, 1, NULL);
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	490f      	ldr	r1, [pc, #60]	@ (8000674 <main+0x11c>)
 8000636:	4810      	ldr	r0, [pc, #64]	@ (8000678 <main+0x120>)
 8000638:	f003 fed8 	bl	80043ec <xTaskCreate>

	vTaskStartScheduler();
 800063c:	f004 f86a 	bl	8004714 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0xe8>
 8000644:	2000013c 	.word	0x2000013c
 8000648:	080064ec 	.word	0x080064ec
 800064c:	200000f0 	.word	0x200000f0
 8000650:	20000140 	.word	0x20000140
 8000654:	20000138 	.word	0x20000138
 8000658:	20000144 	.word	0x20000144
 800065c:	080064d0 	.word	0x080064d0
 8000660:	08000985 	.word	0x08000985
 8000664:	080064d8 	.word	0x080064d8
 8000668:	080009bd 	.word	0x080009bd
 800066c:	080064e0 	.word	0x080064e0
 8000670:	08000a15 	.word	0x08000a15
 8000674:	080064e8 	.word	0x080064e8
 8000678:	08000a4d 	.word	0x08000a4d

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fe24 	bl	80062d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	@ (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d8:	230a      	movs	r3, #10
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006f4:	2348      	movs	r3, #72	@ 0x48
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ffc5 	bl	8001694 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f9be 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fa27 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 f9a8 	bl	8000a90 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	@ 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f000 fe3d 	bl	800140c <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f97a 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <MX_RTC_Init+0xac>)
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_RTC_Init+0xb0>)
 80007c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_RTC_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <MX_RTC_Init+0xac>)
 80007d2:	227f      	movs	r2, #127	@ 0x7f
 80007d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_RTC_Init+0xac>)
 80007d8:	22ff      	movs	r2, #255	@ 0xff
 80007da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_RTC_Init+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_RTC_Init+0xac>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_RTC_Init+0xac>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ee:	481a      	ldr	r0, [pc, #104]	@ (8000858 <MX_RTC_Init+0xac>)
 80007f0:	f001 fcca 	bl	8002188 <HAL_RTC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f949 	bl	8000a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 80007fe:	2321      	movs	r3, #33	@ 0x21
 8000800:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8000802:	2330      	movs	r3, #48	@ 0x30
 8000804:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000806:	2300      	movs	r3, #0
 8000808:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2201      	movs	r2, #1
 8000816:	4619      	mov	r1, r3
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <MX_RTC_Init+0xac>)
 800081a:	f001 fd36 	bl	800228a <HAL_RTC_SetTime>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f934 	bl	8000a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000828:	2304      	movs	r3, #4
 800082a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800082c:	2310      	movs	r3, #16
 800082e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8000830:	2310      	movs	r3, #16
 8000832:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x25;
 8000834:	2325      	movs	r3, #37	@ 0x25
 8000836:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	2201      	movs	r2, #1
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_RTC_Init+0xac>)
 8000840:	f001 fdbd 	bl	80023be <HAL_RTC_SetDate>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800084a:	f000 f921 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000d0 	.word	0x200000d0
 800085c:	40002800 	.word	0x40002800

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f002 f924 	bl	8002ae4 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8f5 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000f0 	.word	0x200000f0
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_GPIO_Init+0xc4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_GPIO_Init+0xc4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2116      	movs	r1, #22
 8000922:	4816      	ldr	r0, [pc, #88]	@ (800097c <MX_GPIO_Init+0xc8>)
 8000924:	f000 fd26 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4810      	ldr	r0, [pc, #64]	@ (8000980 <MX_GPIO_Init+0xcc>)
 8000940:	f000 fb94 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000944:	2316      	movs	r3, #22
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4808      	ldr	r0, [pc, #32]	@ (800097c <MX_GPIO_Init+0xc8>)
 800095c:	f000 fb86 	bl	800106c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2105      	movs	r1, #5
 8000964:	2028      	movs	r0, #40	@ 0x28
 8000966:	f000 fb57 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096a:	2028      	movs	r0, #40	@ 0x28
 800096c:	f000 fb70 	bl	8001050 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800

08000984 <TaskSensor>:

/* USER CODE BEGIN 4 */

void TaskSensor(void *pvParameters) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	char msg[] = "Task4 Running\r\n";
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <TaskSensor+0x30>)
 800098e:	f107 0408 	add.w	r4, r7, #8
 8000992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (;;) {
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000998:	f107 0108 	add.w	r1, r7, #8
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	2210      	movs	r2, #16
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <TaskSensor+0x34>)
 80009a4:	f002 f8ee 	bl	8002b84 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(2000));
 80009a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ac:	f003 fe7c 	bl	80046a8 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 80009b0:	bf00      	nop
 80009b2:	e7f1      	b.n	8000998 <TaskSensor+0x14>
 80009b4:	08006504 	.word	0x08006504
 80009b8:	200000f0 	.word	0x200000f0

080009bc <TaskButton>:
	}

}
void TaskButton(void *pvParameters) {
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	char msg[] = "Button pressed!\r\n";
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <TaskButton+0x4c>)
 80009c6:	f107 040c 	add.w	r4, r7, #12
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	8023      	strh	r3, [r4, #0]

	    for (;;) {
	        if (xSemaphoreTake(xSemaphore_Button, portMAX_DELAY) == pdTRUE) {
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <TaskButton+0x50>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fa0f 	bl	8003e00 <xQueueSemaphoreTake>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d1f5      	bne.n	80009d4 <TaskButton+0x18>
	        	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET); // LED2 sabit yan
 80009e8:	2201      	movs	r2, #1
 80009ea:	2104      	movs	r1, #4
 80009ec:	4808      	ldr	r0, [pc, #32]	@ (8000a10 <TaskButton+0x54>)
 80009ee:	f000 fcc1 	bl	8001374 <HAL_GPIO_WritePin>
	            vTaskDelay(pdMS_TO_TICKS(500));                   // 500 ms bekle
 80009f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f6:	f003 fe57 	bl	80046a8 <vTaskDelay>
	        	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET); // LED2 söndür
 80009fa:	2200      	movs	r2, #0
 80009fc:	2104      	movs	r1, #4
 80009fe:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <TaskButton+0x54>)
 8000a00:	f000 fcb8 	bl	8001374 <HAL_GPIO_WritePin>
	        if (xSemaphoreTake(xSemaphore_Button, portMAX_DELAY) == pdTRUE) {
 8000a04:	e7e6      	b.n	80009d4 <TaskButton+0x18>
 8000a06:	bf00      	nop
 8000a08:	08006514 	.word	0x08006514
 8000a0c:	20000138 	.word	0x20000138
 8000a10:	40020000 	.word	0x40020000

08000a14 <TaskUart>:
	        }
	    }
}
void TaskUart(void *pvParameters) {
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	char msg[] = "Task2 Running\r\n";
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <TaskUart+0x30>)
 8000a1e:	f107 0408 	add.w	r4, r7, #8
 8000a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (;;) {

		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000a28:	f107 0108 	add.w	r1, r7, #8
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2210      	movs	r2, #16
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <TaskUart+0x34>)
 8000a34:	f002 f8a6 	bl	8002b84 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(4000));
 8000a38:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a3c:	f003 fe34 	bl	80046a8 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000a40:	bf00      	nop
 8000a42:	e7f1      	b.n	8000a28 <TaskUart+0x14>
 8000a44:	08006528 	.word	0x08006528
 8000a48:	200000f0 	.word	0x200000f0

08000a4c <TaskLed>:
	}
}
void TaskLed(void *pvParameters) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]


		for (;;) {
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000a54:	2102      	movs	r1, #2
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <TaskLed+0x1c>)
 8000a58:	f000 fca5 	bl	80013a6 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(500));
 8000a5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a60:	f003 fe22 	bl	80046a8 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000a64:	bf00      	nop
 8000a66:	e7f5      	b.n	8000a54 <TaskLed+0x8>
 8000a68:	40020000 	.word	0x40020000

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a7e:	f000 f9f3 	bl	8000e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010000 	.word	0x40010000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	@ (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fa99 	bl	8001018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b42:	2304      	movs	r3, #4
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b4e:	f000 fa8d 	bl	800106c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <HAL_RTC_MspInit+0x50>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d111      	bne.n	8000bcc <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f9f6 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000bc2:	f7ff ff65 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <HAL_RTC_MspInit+0x54>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40002800 	.word	0x40002800
 8000bd8:	42470e3c 	.word	0x42470e3c

08000bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_UART_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12c      	bne.n	8000c58 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_UART_MspInit+0x8c>)
 8000c54:	f000 fa0a 	bl	800106c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <HAL_InitTick+0xd0>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c84:	4a2d      	ldr	r2, [pc, #180]	@ (8000d3c <HAL_InitTick+0xd0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <HAL_InitTick+0xd0>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f94e 	bl	8001f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca8:	f001 f938 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8000cac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb0:	4a23      	ldr	r2, [pc, #140]	@ (8000d40 <HAL_InitTick+0xd4>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cbe:	4a22      	ldr	r2, [pc, #136]	@ (8000d48 <HAL_InitTick+0xdc>)
 8000cc0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cca:	4a1e      	ldr	r2, [pc, #120]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ce2:	4818      	ldr	r0, [pc, #96]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000ce4:	f001 fc90 	bl	8002608 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11b      	bne.n	8000d2e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cf6:	4813      	ldr	r0, [pc, #76]	@ (8000d44 <HAL_InitTick+0xd8>)
 8000cf8:	f001 fce0 	bl	80026bc <HAL_TIM_Base_Start_IT>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d111      	bne.n	8000d2e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d0a:	2019      	movs	r0, #25
 8000d0c:	f000 f9a0 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	d808      	bhi.n	8000d28 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d16:	2200      	movs	r2, #0
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f000 f97c 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_InitTick+0xe0>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e002      	b.n	8000d2e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3730      	adds	r7, #48	@ 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	20000148 	.word	0x20000148
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	20000004 	.word	0x20000004

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d8e:	f001 fcf7 	bl	8002780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000148 	.word	0x20000148

08000d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000da0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000da4:	f000 fb1a 	bl	80013dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f005 fad1 	bl	80063a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fba9 	bl	8000558 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e14:	08006578 	.word	0x08006578
  ldr r2, =_sbss
 8000e18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e1c:	20004cb8 	.word	0x20004cb8

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f8d8 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f7ff ff0a 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe20 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000190 	.word	0x20000190

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000190 	.word	0x20000190

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e159      	b.n	800133c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8148 	bne.w	8001336 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a2 	beq.w	8001336 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a56      	ldr	r2, [pc, #344]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <HAL_GPIO_Init+0x2ec>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	@ (800135c <HAL_GPIO_Init+0x2f0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x202>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a48      	ldr	r2, [pc, #288]	@ (8001360 <HAL_GPIO_Init+0x2f4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x1fe>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a47      	ldr	r2, [pc, #284]	@ (8001364 <HAL_GPIO_Init+0x2f8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x1fa>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a46      	ldr	r2, [pc, #280]	@ (8001368 <HAL_GPIO_Init+0x2fc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x1f6>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_GPIO_Init+0x300>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x1f2>
 800125a:	2304      	movs	r3, #4
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800125e:	2307      	movs	r3, #7
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x204>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x204>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	@ (8001358 <HAL_GPIO_Init+0x2ec>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_GPIO_Init+0x304>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f aea2 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	400b      	ands	r3, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f886 	bl	800050c <HAL_GPIO_EXTI_Callback>
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12b      	b.n	8001676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fb5e 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2224      	movs	r2, #36	@ 0x24
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800145e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800146e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001470:	f000 fd40 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8001474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a81      	ldr	r2, [pc, #516]	@ (8001680 <HAL_I2C_Init+0x274>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d807      	bhi.n	8001490 <HAL_I2C_Init+0x84>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a80      	ldr	r2, [pc, #512]	@ (8001684 <HAL_I2C_Init+0x278>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	e006      	b.n	800149e <HAL_I2C_Init+0x92>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a7d      	ldr	r2, [pc, #500]	@ (8001688 <HAL_I2C_Init+0x27c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	bf94      	ite	ls
 8001498:	2301      	movls	r3, #1
 800149a:	2300      	movhi	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0e7      	b.n	8001676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a78      	ldr	r2, [pc, #480]	@ (800168c <HAL_I2C_Init+0x280>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001680 <HAL_I2C_Init+0x274>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d802      	bhi.n	80014e0 <HAL_I2C_Init+0xd4>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	e009      	b.n	80014f4 <HAL_I2C_Init+0xe8>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a69      	ldr	r2, [pc, #420]	@ (8001690 <HAL_I2C_Init+0x284>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	3301      	adds	r3, #1
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001506:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	495c      	ldr	r1, [pc, #368]	@ (8001680 <HAL_I2C_Init+0x274>)
 8001510:	428b      	cmp	r3, r1
 8001512:	d819      	bhi.n	8001548 <HAL_I2C_Init+0x13c>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e59      	subs	r1, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001522:	1c59      	adds	r1, r3, #1
 8001524:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001528:	400b      	ands	r3, r1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <HAL_I2C_Init+0x138>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e59      	subs	r1, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	e051      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001544:	2304      	movs	r3, #4
 8001546:	e04f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d111      	bne.n	8001574 <HAL_I2C_Init+0x168>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e58      	subs	r0, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e012      	b.n	800159a <HAL_I2C_Init+0x18e>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e58      	subs	r0, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	0099      	lsls	r1, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Init+0x196>
 800159e:	2301      	movs	r3, #1
 80015a0:	e022      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10e      	bne.n	80015c8 <HAL_I2C_Init+0x1bc>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e58      	subs	r0, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6809      	ldr	r1, [r1, #0]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6911      	ldr	r1, [r2, #16]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68d2      	ldr	r2, [r2, #12]
 8001622:	4311      	orrs	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	000186a0 	.word	0x000186a0
 8001684:	001e847f 	.word	0x001e847f
 8001688:	003d08ff 	.word	0x003d08ff
 800168c:	431bde83 	.word	0x431bde83
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e267      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d075      	beq.n	800179e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b2:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d00c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016be:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d112      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4b82      	ldr	r3, [pc, #520]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05b      	beq.n	800179c <HAL_RCC_OscConfig+0x108>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d157      	bne.n	800179c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e242      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x74>
 80016fa:	4b76      	ldr	r3, [pc, #472]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a75      	ldr	r2, [pc, #468]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a6f      	ldr	r2, [pc, #444]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b6d      	ldr	r3, [pc, #436]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6c      	ldr	r2, [pc, #432]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 800172c:	4b69      	ldr	r3, [pc, #420]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a68      	ldr	r2, [pc, #416]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a65      	ldr	r2, [pc, #404]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fba0 	bl	8000e90 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fb9c 	bl	8000e90 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e207      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xc0>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb8c 	bl	8000e90 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fb88 	bl	8000e90 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1f3      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0xe8>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x152>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e1c7      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4937      	ldr	r1, [pc, #220]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e03a      	b.n	8001872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_RCC_OscConfig+0x244>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fb41 	bl	8000e90 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fb3d 	bl	8000e90 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1a8      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4925      	ldr	r1, [pc, #148]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x244>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fb20 	bl	8000e90 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fb1c 	bl	8000e90 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e187      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d036      	beq.n	80018ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_RCC_OscConfig+0x248>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fb00 	bl	8000e90 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fafc 	bl	8000e90 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e167      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80018a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x200>
 80018b2:	e01b      	b.n	80018ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x248>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fae9 	bl	8000e90 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	e00e      	b.n	80018e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fae5 	bl	8000e90 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d907      	bls.n	80018e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e150      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	42470000 	.word	0x42470000
 80018dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b88      	ldr	r3, [pc, #544]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ea      	bne.n	80018c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8097 	beq.w	8001a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b81      	ldr	r3, [pc, #516]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a7c      	ldr	r2, [pc, #496]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b77      	ldr	r3, [pc, #476]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d118      	bne.n	8001968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b74      	ldr	r3, [pc, #464]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a73      	ldr	r2, [pc, #460]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff faa5 	bl	8000e90 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff faa1 	bl	8000e90 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e10c      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x2ea>
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	4a63      	ldr	r2, [pc, #396]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	@ 0x70
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x324>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x30c>
 8001986:	4b5f      	ldr	r3, [pc, #380]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6713      	str	r3, [r2, #112]	@ 0x70
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	4a5b      	ldr	r2, [pc, #364]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	@ 0x70
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x324>
 80019a0:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a4:	4a57      	ldr	r2, [pc, #348]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ac:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	4a54      	ldr	r2, [pc, #336]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa66 	bl	8000e90 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa62 	bl	8000e90 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0cb      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ee      	beq.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ea:	e014      	b.n	8001a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa50 	bl	8000e90 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff fa4c 	bl	8000e90 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0b5      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ee      	bne.n	80019f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b39      	ldr	r3, [pc, #228]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a38      	ldr	r2, [pc, #224]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a1 	beq.w	8001b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a32:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d05c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d141      	bne.n	8001aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa20 	bl	8000e90 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fa1c 	bl	8000e90 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e087      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	491b      	ldr	r1, [pc, #108]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f9f5 	bl	8000e90 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f9f1 	bl	8000e90 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e05c      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x416>
 8001ac8:	e054      	b.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f9de 	bl	8000e90 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f9da 	bl	8000e90 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e045      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
 8001af6:	e03d      	b.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e038      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4ec>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d028      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d121      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d11a      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0cc      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b68      	ldr	r3, [pc, #416]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d90c      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b65      	ldr	r3, [pc, #404]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b63      	ldr	r3, [pc, #396]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b8      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd8:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4a58      	ldr	r2, [pc, #352]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001be2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b50      	ldr	r3, [pc, #320]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	494d      	ldr	r1, [pc, #308]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d044      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b47      	ldr	r3, [pc, #284]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d119      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e07f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e067      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4934      	ldr	r1, [pc, #208]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff f90c 	bl	8000e90 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff f908 	bl	8000e90 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d20c      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e032      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4916      	ldr	r1, [pc, #88]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	490e      	ldr	r1, [pc, #56]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0a:	f000 f821 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	490a      	ldr	r1, [pc, #40]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	5ccb      	ldrb	r3, [r1, r3]
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff9e 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	08006550 	.word	0x08006550
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d54:	b090      	sub	sp, #64	@ 0x40
 8001d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d68:	4b59      	ldr	r3, [pc, #356]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d00d      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x40>
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	f200 80a1 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x16c>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d82:	e09b      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d88:	e09b      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d8e:	e098      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d90:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	2200      	movs	r2, #0
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001db8:	2100      	movs	r1, #0
 8001dba:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dbc:	fb03 f201 	mul.w	r2, r3, r1
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	fb00 f303 	mul.w	r3, r0, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a43      	ldr	r2, [pc, #268]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dca:	fba0 1202 	umull	r1, r2, r0, r2
 8001dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd6:	4413      	add	r3, r2
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	61fa      	str	r2, [r7, #28]
 8001de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dea:	f7fe f9f9 	bl	80001e0 <__aeabi_uldivmod>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4613      	mov	r3, r2
 8001df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001df6:	e053      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df8:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	2200      	movs	r2, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	617a      	str	r2, [r7, #20]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e0a:	f04f 0b00 	mov.w	fp, #0
 8001e0e:	4652      	mov	r2, sl
 8001e10:	465b      	mov	r3, fp
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	0159      	lsls	r1, r3, #5
 8001e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e20:	0150      	lsls	r0, r2, #5
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	ebb2 080a 	subs.w	r8, r2, sl
 8001e2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e42:	ebb2 0408 	subs.w	r4, r2, r8
 8001e46:	eb63 0509 	sbc.w	r5, r3, r9
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	00eb      	lsls	r3, r5, #3
 8001e54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e58:	00e2      	lsls	r2, r4, #3
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	eb14 030a 	adds.w	r3, r4, sl
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	eb45 030b 	adc.w	r3, r5, fp
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e76:	4629      	mov	r1, r5
 8001e78:	028b      	lsls	r3, r1, #10
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e80:	4621      	mov	r1, r4
 8001e82:	028a      	lsls	r2, r1, #10
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e94:	f7fe f9a4 	bl	80001e0 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001eb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3740      	adds	r7, #64	@ 0x40
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	017d7840 	.word	0x017d7840

08001edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08006560 	.word	0x08006560

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f20:	f7ff ffdc 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08006560 	.word	0x08006560

08001f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	220f      	movs	r2, #15
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_RCC_GetClockConfig+0x60>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0207 	and.w	r2, r3, #7
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d038      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fd0:	4b68      	ldr	r3, [pc, #416]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd6:	f7fe ff5b 	bl	8000e90 <HAL_GetTick>
 8001fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fde:	f7fe ff57 	bl	8000e90 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0bd      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ff0:	4b61      	ldr	r3, [pc, #388]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	071b      	lsls	r3, r3, #28
 800200e:	495a      	ldr	r1, [pc, #360]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002016:	4b57      	ldr	r3, [pc, #348]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800201c:	f7fe ff38 	bl	8000e90 <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002024:	f7fe ff34 	bl	8000e90 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e09a      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002036:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8083 	beq.w	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a47      	ldr	r2, [pc, #284]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002060:	4b45      	ldr	r3, [pc, #276]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800206c:	4b43      	ldr	r3, [pc, #268]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a42      	ldr	r2, [pc, #264]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002076:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002078:	f7fe ff0a 	bl	8000e90 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe ff06 	bl	8000e90 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e06c      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002092:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209e:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d02f      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d028      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020d2:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d114      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fed4 	bl	8000e90 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fed0 	bl	8000e90 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e034      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ee      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800211a:	d10d      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800212c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002130:	4911      	ldr	r1, [pc, #68]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002142:	6093      	str	r3, [r2, #8]
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	4909      	ldr	r1, [pc, #36]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7d1a      	ldrb	r2, [r3, #20]
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002168:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	42470068 	.word	0x42470068
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	42470e40 	.word	0x42470e40
 8002184:	424711e0 	.word	0x424711e0

08002188 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e073      	b.n	8002282 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f5b      	ldrb	r3, [r3, #29]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fcea 	bl	8000b84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d055      	beq.n	8002270 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	22ca      	movs	r2, #202	@ 0xca
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2253      	movs	r2, #83	@ 0x53
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f99d 	bl	8002514 <RTC_EnterInitMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d12c      	bne.n	800223e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80021f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021f6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9a4 	bl	8002582 <RTC_ExitInitMode>
 800223a:	4603      	mov	r3, r0
 800223c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d110      	bne.n	8002266 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	22ff      	movs	r2, #255	@ 0xff
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
 800226e:	e001      	b.n	8002274 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800228a:	b590      	push	{r4, r7, lr}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	7f1b      	ldrb	r3, [r3, #28]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_RTC_SetTime+0x1c>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e087      	b.n	80023b6 <HAL_RTC_SetTime+0x12c>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d126      	bne.n	8002306 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f97b 	bl	80025cc <RTC_ByteToBcd2>
 80022d6:	4603      	mov	r3, r0
 80022d8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f974 	bl	80025cc <RTC_ByteToBcd2>
 80022e4:	4603      	mov	r3, r0
 80022e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022e8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	789b      	ldrb	r3, [r3, #2]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f96c 	bl	80025cc <RTC_ByteToBcd2>
 80022f4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022f6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e018      	b.n	8002338 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002326:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800232c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	78db      	ldrb	r3, [r3, #3]
 8002332:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22ca      	movs	r2, #202	@ 0xca
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2253      	movs	r2, #83	@ 0x53
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f8e3 	bl	8002514 <RTC_EnterInitMode>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d120      	bne.n	800239a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002362:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002366:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002376:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f8f6 	bl	8002582 <RTC_ExitInitMode>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	22ff      	movs	r2, #255	@ 0xff
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]

  return status;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}

080023be <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023be:	b590      	push	{r4, r7, lr}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	7f1b      	ldrb	r3, [r3, #28]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_RTC_SetDate+0x1c>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e071      	b.n	80024be <HAL_RTC_SetDate+0x100>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10e      	bne.n	800240a <HAL_RTC_SetDate+0x4c>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	f023 0310 	bic.w	r3, r3, #16
 8002400:	b2db      	uxtb	r3, r3
 8002402:	330a      	adds	r3, #10
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11c      	bne.n	800244a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	78db      	ldrb	r3, [r3, #3]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f8d9 	bl	80025cc <RTC_ByteToBcd2>
 800241a:	4603      	mov	r3, r0
 800241c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f8d2 	bl	80025cc <RTC_ByteToBcd2>
 8002428:	4603      	mov	r3, r0
 800242a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800242c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	789b      	ldrb	r3, [r3, #2]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f8ca 	bl	80025cc <RTC_ByteToBcd2>
 8002438:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800243a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00e      	b.n	8002468 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002456:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800245c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22ca      	movs	r2, #202	@ 0xca
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2253      	movs	r2, #83	@ 0x53
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f84b 	bl	8002514 <RTC_EnterInitMode>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10c      	bne.n	80024a2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002492:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002496:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f872 	bl	8002582 <RTC_ExitInitMode>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]

  return status;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
	...

080024c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_RTC_WaitForSynchro+0x48>)
 80024da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024dc:	f7fe fcd8 	bl	8000e90 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024e4:	f7fe fcd4 	bl	8000e90 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024f2:	d901      	bls.n	80024f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e007      	b.n	8002508 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ee      	beq.n	80024e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	00013f5f 	.word	0x00013f5f

08002514 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d122      	bne.n	8002578 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002540:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7fe fca5 	bl	8000e90 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002548:	e00c      	b.n	8002564 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800254a:	f7fe fca1 	bl	8000e90 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002558:	d904      	bls.n	8002564 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <RTC_EnterInitMode+0x64>
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d1e8      	bne.n	800254a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff8b 	bl	80024c8 <HAL_RTC_WaitForSynchro>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80025da:	e005      	b.n	80025e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3301      	adds	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	3b0a      	subs	r3, #10
 80025e6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d8f6      	bhi.n	80025dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e041      	b.n	800269e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f839 	bl	80026a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 f9b2 	bl	80029b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e044      	b.n	800275e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_TIM_Base_Start_IT+0xb0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d018      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x6c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fe:	d013      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x6c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <HAL_TIM_Base_Start_IT+0xb4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00e      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x6c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_TIM_Base_Start_IT+0xb8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d009      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x6c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_TIM_Base_Start_IT+0xbc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x6c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a16      	ldr	r2, [pc, #88]	@ (800277c <HAL_TIM_Base_Start_IT+0xc0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d111      	bne.n	800274c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d010      	beq.n	800275c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e007      	b.n	800275c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40014000 	.word	0x40014000

08002780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0202 	mvn.w	r2, #2
 80027b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8d2 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8c4 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8d5 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0204 	mvn.w	r2, #4
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8ac 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f89e 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8af 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0208 	mvn.w	r2, #8
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f886 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f878 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f889 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d020      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0210 	mvn.w	r2, #16
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2208      	movs	r2, #8
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f860 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f852 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f863 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0201 	mvn.w	r2, #1
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f8c0 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8e0 	bl	8002ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f834 	bl	800299c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0220 	mvn.w	r2, #32
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8b2 	bl	8002abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a37      	ldr	r2, [pc, #220]	@ (8002aa0 <TIM_Base_SetConfig+0xf0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00f      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ce:	d00b      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <TIM_Base_SetConfig+0xf4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a33      	ldr	r2, [pc, #204]	@ (8002aa8 <TIM_Base_SetConfig+0xf8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <TIM_Base_SetConfig+0xfc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d108      	bne.n	80029fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <TIM_Base_SetConfig+0xf0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01b      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a08:	d017      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a25      	ldr	r2, [pc, #148]	@ (8002aa4 <TIM_Base_SetConfig+0xf4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a24      	ldr	r2, [pc, #144]	@ (8002aa8 <TIM_Base_SetConfig+0xf8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <TIM_Base_SetConfig+0xfc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <TIM_Base_SetConfig+0x100>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <TIM_Base_SetConfig+0x104>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a20      	ldr	r2, [pc, #128]	@ (8002ab8 <TIM_Base_SetConfig+0x108>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <TIM_Base_SetConfig+0xf0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d103      	bne.n	8002a7a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	40014800 	.word	0x40014800

08002abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e042      	b.n	8002b7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f866 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	@ 0x24
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f973 	bl	8002e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d175      	bne.n	8002c90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_UART_Transmit+0x2c>
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e06e      	b.n	8002c92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2221      	movs	r2, #33	@ 0x21
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe f965 	bl	8000e90 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_UART_Transmit+0x6c>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e003      	b.n	8002bf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bf8:	e02e      	b.n	8002c58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f848 	bl	8002c9a <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e03a      	b.n	8002c92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3302      	adds	r3, #2
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e007      	b.n	8002c4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1cb      	bne.n	8002bfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2140      	movs	r1, #64	@ 0x40
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f814 	bl	8002c9a <UART_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e006      	b.n	8002c92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002caa:	e03b      	b.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d037      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe f8ec 	bl	8000e90 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <UART_WaitOnFlagUntilTimeout+0x30>
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e03a      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d023      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d020      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d01d      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d116      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f81d 	bl	8002d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2208      	movs	r2, #8
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e00f      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d0b4      	beq.n	8002cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b095      	sub	sp, #84	@ 0x54
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d74:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3314      	adds	r3, #20
 8002da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d119      	bne.n	8002df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f023 0310 	bic.w	r3, r3, #16
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de4:	61ba      	str	r2, [r7, #24]
 8002de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	613b      	str	r3, [r7, #16]
   return(result);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e06:	bf00      	nop
 8002e08:	3754      	adds	r7, #84	@ 0x54
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b0c0      	sub	sp, #256	@ 0x100
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	ea40 0301 	orr.w	r3, r0, r1
 8002e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e6c:	f021 010c 	bic.w	r1, r1, #12
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	6999      	ldr	r1, [r3, #24]
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	ea40 0301 	orr.w	r3, r0, r1
 8002e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80030e0 <UART_SetConfig+0x2cc>)
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <UART_SetConfig+0xa0>
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b8d      	ldr	r3, [pc, #564]	@ (80030e4 <UART_SetConfig+0x2d0>)
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d104      	bne.n	8002ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7ff f832 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8002eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ebc:	e003      	b.n	8002ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7ff f819 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed0:	f040 810c 	bne.w	80030ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ede:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	1891      	adds	r1, r2, r2
 8002eec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	eb12 0801 	adds.w	r8, r2, r1
 8002efc:	4629      	mov	r1, r5
 8002efe:	eb43 0901 	adc.w	r9, r3, r1
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f16:	4690      	mov	r8, r2
 8002f18:	4699      	mov	r9, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	eb18 0303 	adds.w	r3, r8, r3
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f24:	462b      	mov	r3, r5
 8002f26:	eb49 0303 	adc.w	r3, r9, r3
 8002f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f42:	460b      	mov	r3, r1
 8002f44:	18db      	adds	r3, r3, r3
 8002f46:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f48:	4613      	mov	r3, r2
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f58:	f7fd f942 	bl	80001e0 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <UART_SetConfig+0x2d4>)
 8002f62:	fba3 2302 	umull	r2, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	011c      	lsls	r4, r3, #4
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	1891      	adds	r1, r2, r2
 8002f82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f84:	415b      	adcs	r3, r3
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb43 0b01 	adc.w	fp, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fac:	4692      	mov	sl, r2
 8002fae:	469b      	mov	fp, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	18db      	adds	r3, r3, r3
 8002fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fde:	4613      	mov	r3, r2
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fee:	f7fd f8f7 	bl	80001e0 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <UART_SetConfig+0x2d4>)
 8002ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2264      	movs	r2, #100	@ 0x64
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	1acb      	subs	r3, r1, r3
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800300e:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <UART_SetConfig+0x2d4>)
 8003010:	fba3 2302 	umull	r2, r3, r3, r2
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800301c:	441c      	add	r4, r3
 800301e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003028:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800302c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	1891      	adds	r1, r2, r2
 8003036:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003038:	415b      	adcs	r3, r3
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003040:	4641      	mov	r1, r8
 8003042:	1851      	adds	r1, r2, r1
 8003044:	6339      	str	r1, [r7, #48]	@ 0x30
 8003046:	4649      	mov	r1, r9
 8003048:	414b      	adcs	r3, r1
 800304a:	637b      	str	r3, [r7, #52]	@ 0x34
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003058:	4659      	mov	r1, fp
 800305a:	00cb      	lsls	r3, r1, #3
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003062:	4651      	mov	r1, sl
 8003064:	00ca      	lsls	r2, r1, #3
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	4603      	mov	r3, r0
 800306c:	4642      	mov	r2, r8
 800306e:	189b      	adds	r3, r3, r2
 8003070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003074:	464b      	mov	r3, r9
 8003076:	460a      	mov	r2, r1
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800308c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003094:	460b      	mov	r3, r1
 8003096:	18db      	adds	r3, r3, r3
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	4613      	mov	r3, r2
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030aa:	f7fd f899 	bl	80001e0 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <UART_SetConfig+0x2d4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	@ 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3332      	adds	r3, #50	@ 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <UART_SetConfig+0x2d4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 0207 	and.w	r2, r3, #7
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030dc:	e106      	b.n	80032ec <UART_SetConfig+0x4d8>
 80030de:	bf00      	nop
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40011400 	.word	0x40011400
 80030e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030fe:	4642      	mov	r2, r8
 8003100:	464b      	mov	r3, r9
 8003102:	1891      	adds	r1, r2, r2
 8003104:	6239      	str	r1, [r7, #32]
 8003106:	415b      	adcs	r3, r3
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310e:	4641      	mov	r1, r8
 8003110:	1854      	adds	r4, r2, r1
 8003112:	4649      	mov	r1, r9
 8003114:	eb43 0501 	adc.w	r5, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	00eb      	lsls	r3, r5, #3
 8003122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003126:	00e2      	lsls	r2, r4, #3
 8003128:	4614      	mov	r4, r2
 800312a:	461d      	mov	r5, r3
 800312c:	4643      	mov	r3, r8
 800312e:	18e3      	adds	r3, r4, r3
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003134:	464b      	mov	r3, r9
 8003136:	eb45 0303 	adc.w	r3, r5, r3
 800313a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800314a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800315a:	4629      	mov	r1, r5
 800315c:	008b      	lsls	r3, r1, #2
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003164:	4621      	mov	r1, r4
 8003166:	008a      	lsls	r2, r1, #2
 8003168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800316c:	f7fd f838 	bl	80001e0 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b60      	ldr	r3, [pc, #384]	@ (80032f8 <UART_SetConfig+0x4e4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011c      	lsls	r4, r3, #4
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003188:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800318c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	61b9      	str	r1, [r7, #24]
 8003198:	415b      	adcs	r3, r3
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a0:	4641      	mov	r1, r8
 80031a2:	1851      	adds	r1, r2, r1
 80031a4:	6139      	str	r1, [r7, #16]
 80031a6:	4649      	mov	r1, r9
 80031a8:	414b      	adcs	r3, r1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b8:	4659      	mov	r1, fp
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c2:	4651      	mov	r1, sl
 80031c4:	00ca      	lsls	r2, r1, #3
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	4642      	mov	r2, r8
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031d4:	464b      	mov	r3, r9
 80031d6:	460a      	mov	r2, r1
 80031d8:	eb42 0303 	adc.w	r3, r2, r3
 80031dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031f8:	4649      	mov	r1, r9
 80031fa:	008b      	lsls	r3, r1, #2
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003202:	4641      	mov	r1, r8
 8003204:	008a      	lsls	r2, r1, #2
 8003206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800320a:	f7fc ffe9 	bl	80001e0 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <UART_SetConfig+0x4e4>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	@ 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	@ 0x32
 8003228:	4a33      	ldr	r2, [pc, #204]	@ (80032f8 <UART_SetConfig+0x4e4>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003234:	441c      	add	r4, r3
 8003236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323a:	2200      	movs	r2, #0
 800323c:	673b      	str	r3, [r7, #112]	@ 0x70
 800323e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	415b      	adcs	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003254:	4641      	mov	r1, r8
 8003256:	1851      	adds	r1, r2, r1
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	4649      	mov	r1, r9
 800325c:	414b      	adcs	r3, r1
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800326c:	4659      	mov	r1, fp
 800326e:	00cb      	lsls	r3, r1, #3
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003276:	4651      	mov	r1, sl
 8003278:	00ca      	lsls	r2, r1, #3
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	4603      	mov	r3, r0
 8003280:	4642      	mov	r2, r8
 8003282:	189b      	adds	r3, r3, r2
 8003284:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003286:	464b      	mov	r3, r9
 8003288:	460a      	mov	r2, r1
 800328a:	eb42 0303 	adc.w	r3, r2, r3
 800328e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	663b      	str	r3, [r7, #96]	@ 0x60
 800329a:	667a      	str	r2, [r7, #100]	@ 0x64
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032a8:	4649      	mov	r1, r9
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b2:	4641      	mov	r1, r8
 80032b4:	008a      	lsls	r2, r1, #2
 80032b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ba:	f7fc ff91 	bl	80001e0 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <UART_SetConfig+0x4e4>)
 80032c4:	fba3 1302 	umull	r1, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2164      	movs	r1, #100	@ 0x64
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	@ 0x32
 80032d6:	4a08      	ldr	r2, [pc, #32]	@ (80032f8 <UART_SetConfig+0x4e4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4422      	add	r2, r4
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032f2:	46bd      	mov	sp, r7
 80032f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f8:	51eb851f 	.word	0x51eb851f

080032fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <SysTick_Handler+0x1c>)
 8003302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003304:	f001 fe6a 	bl	8004fdc <xTaskGetSchedulerState>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800330e:	f002 fd63 	bl	8005dd8 <xPortSysTickHandler>
  }
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <vApplicationGetIdleTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	@ (800334c <vApplicationGetIdleTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	@ 0x80
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000194 	.word	0x20000194
 800334c:	2000023c 	.word	0x2000023c

08003350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a07      	ldr	r2, [pc, #28]	@ (800337c <vApplicationGetTimerTaskMemory+0x2c>)
 8003360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a06      	ldr	r2, [pc, #24]	@ (8003380 <vApplicationGetTimerTaskMemory+0x30>)
 8003366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	2000043c 	.word	0x2000043c
 8003380:	200004e4 	.word	0x200004e4

08003384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00c      	b.n	8003460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3308      	adds	r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <vListInsert+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d2f6      	bcs.n	800344e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003518:	f002 fbce 	bl	8005cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	3b01      	subs	r3, #1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fb68 	bl	8004c50 <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <xQueueGenericReset+0xd0>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e009      	b.n	80035ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3310      	adds	r3, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fef1 	bl	8003384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff feec 	bl	8003384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ac:	f002 fbb6 	bl	8005d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	@ 0x38
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <xQueueGenericCreateStatic+0x56>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <xQueueGenericCreateStatic+0x5a>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <xQueueGenericCreateStatic+0x5c>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	623b      	str	r3, [r7, #32]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <xQueueGenericCreateStatic+0x84>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <xQueueGenericCreateStatic+0x88>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <xQueueGenericCreateStatic+0x8a>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fb      	str	r3, [r7, #28]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003666:	2350      	movs	r3, #80	@ 0x50
 8003668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d00b      	beq.n	8003688 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003688:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800369c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f840 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3730      	adds	r7, #48	@ 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	613b      	str	r3, [r7, #16]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3350      	adds	r3, #80	@ 0x50
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fc01 	bl	8005efc <pvPortMalloc>
 80036fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3350      	adds	r3, #80	@ 0x50
 800370a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f805 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003726:	69bb      	ldr	r3, [r7, #24]
	}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e002      	b.n	8003752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800375e:	2101      	movs	r1, #1
 8003760:	69b8      	ldr	r0, [r7, #24]
 8003762:	f7ff fec3 	bl	80034ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f81d 	bl	80037dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	461a      	mov	r2, r3
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f7ff ff79 	bl	80036ba <xQueueGenericCreate>
 80037c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ffd3 	bl	8003776 <prvInitialiseMutex>

		return xNewQueue;
 80037d0:	68fb      	ldr	r3, [r7, #12]
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	@ 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xQueueGenericSend+0x34>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <xQueueGenericSend+0x42>
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericSend+0x46>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericSend+0x48>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueGenericSend+0x64>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSend+0x72>
 8003846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSend+0x76>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSend+0x78>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <xQueueGenericSend+0x94>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003870:	f001 fbb4 	bl	8004fdc <xTaskGetSchedulerState>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <xQueueGenericSend+0xa4>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <xQueueGenericSend+0xa8>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <xQueueGenericSend+0xaa>
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	61fb      	str	r3, [r7, #28]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038a2:	f002 fa09 	bl	8005cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <xQueueGenericSend+0xdc>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d129      	bne.n	800390c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038be:	f000 fbc7 	bl	8004050 <prvCopyDataToQueue>
 80038c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	3324      	adds	r3, #36	@ 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f9bd 	bl	8004c50 <xTaskRemoveFromEventList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038dc:	4b3f      	ldr	r3, [pc, #252]	@ (80039dc <xQueueGenericSend+0x200>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	e00a      	b.n	8003904 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038f4:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <xQueueGenericSend+0x200>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003904:	f002 fa0a 	bl	8005d1c <vPortExitCritical>
				return pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	e063      	b.n	80039d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003912:	f002 fa03 	bl	8005d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003916:	2300      	movs	r3, #0
 8003918:	e05c      	b.n	80039d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4618      	mov	r0, r3
 8003926:	f001 f9f7 	bl	8004d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800392e:	f002 f9f5 	bl	8005d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003932:	f000 ff5f 	bl	80047f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003936:	f002 f9bf 	bl	8005cb8 <vPortEnterCritical>
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003940:	b25b      	sxtb	r3, r3
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d103      	bne.n	8003950 <xQueueGenericSend+0x174>
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d103      	bne.n	8003966 <xQueueGenericSend+0x18a>
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003966:	f002 f9d9 	bl	8005d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800396a:	1d3a      	adds	r2, r7, #4
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f9e6 	bl	8004d44 <xTaskCheckForTimeOut>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d124      	bne.n	80039c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800397e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003980:	f000 fc5e 	bl	8004240 <prvIsQueueFull>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	3310      	adds	r3, #16
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f90a 	bl	8004bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800399a:	f000 fbe9 	bl	8004170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800399e:	f000 ff37 	bl	8004810 <xTaskResumeAll>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f af7c 	bne.w	80038a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	@ (80039dc <xQueueGenericSend+0x200>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	e772      	b.n	80038a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039be:	f000 fbd7 	bl	8004170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c2:	f000 ff25 	bl	8004810 <xTaskResumeAll>
 80039c6:	e76c      	b.n	80038a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ca:	f000 fbd1 	bl	8004170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ce:	f000 ff1f 	bl	8004810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3738      	adds	r7, #56	@ 0x38
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b090      	sub	sp, #64	@ 0x40
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSendFromISR+0x3e>
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <xQueueGenericSendFromISR+0x42>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericSendFromISR+0x44>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d103      	bne.n	8003a4e <xQueueGenericSendFromISR+0x6e>
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSendFromISR+0x72>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSendFromISR+0x74>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	623b      	str	r3, [r7, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a70:	f002 fa02 	bl	8005e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a74:	f3ef 8211 	mrs	r2, BASEPRI
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	61fa      	str	r2, [r7, #28]
 8003a8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <xQueueGenericSendFromISR+0xc2>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d12f      	bne.n	8003b02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ab8:	f000 faca 	bl	8004050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003abc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d112      	bne.n	8003aec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	3324      	adds	r3, #36	@ 0x24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f8bc 	bl	8004c50 <xTaskRemoveFromEventList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e007      	b.n	8003afc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003af0:	3301      	adds	r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	b25a      	sxtb	r2, r3
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b00:	e001      	b.n	8003b06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3740      	adds	r7, #64	@ 0x40
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08e      	sub	sp, #56	@ 0x38
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	623b      	str	r3, [r7, #32]
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61fb      	str	r3, [r7, #28]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueGiveFromISR+0x5c>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueGiveFromISR+0x60>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueGiveFromISR+0x62>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	61bb      	str	r3, [r7, #24]
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b9a:	f002 f96d 	bl	8005e78 <vPortValidateInterruptPriority>
	__asm volatile
 8003b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	617a      	str	r2, [r7, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003bb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d22b      	bcs.n	8003c22 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d112      	bne.n	8003c0c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	3324      	adds	r3, #36	@ 0x24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f82c 	bl	8004c50 <xTaskRemoveFromEventList>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e007      	b.n	8003c1c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c10:	3301      	adds	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	b25a      	sxtb	r2, r3
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c20:	e001      	b.n	8003c26 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f383 8811 	msr	BASEPRI, r3
}
 8003c30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3738      	adds	r7, #56	@ 0x38
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	@ 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xQueueReceive+0x32>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	623b      	str	r3, [r7, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <xQueueReceive+0x40>
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <xQueueReceive+0x44>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <xQueueReceive+0x46>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <xQueueReceive+0x62>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	61fb      	str	r3, [r7, #28]
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c9e:	f001 f99d 	bl	8004fdc <xTaskGetSchedulerState>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <xQueueReceive+0x72>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <xQueueReceive+0x76>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueReceive+0x78>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <xQueueReceive+0x94>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61bb      	str	r3, [r7, #24]
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cd0:	f001 fff2 	bl	8005cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01f      	beq.n	8003d20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ce4:	f000 fa1e 	bl	8004124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00f      	beq.n	8003d18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ffa7 	bl	8004c50 <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d08:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <xQueueReceive+0x1c0>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d18:	f002 f800 	bl	8005d1c <vPortExitCritical>
				return pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e069      	b.n	8003df4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d26:	f001 fff9 	bl	8005d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e062      	b.n	8003df4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffed 	bl	8004d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d42:	f001 ffeb 	bl	8005d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d46:	f000 fd55 	bl	80047f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d4a:	f001 ffb5 	bl	8005cb8 <vPortEnterCritical>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d103      	bne.n	8003d64 <xQueueReceive+0x128>
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d103      	bne.n	8003d7a <xQueueReceive+0x13e>
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d7a:	f001 ffcf 	bl	8005d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d7e:	1d3a      	adds	r2, r7, #4
 8003d80:	f107 0310 	add.w	r3, r7, #16
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 ffdc 	bl	8004d44 <xTaskCheckForTimeOut>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d123      	bne.n	8003dda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d94:	f000 fa3e 	bl	8004214 <prvIsQueueEmpty>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	3324      	adds	r3, #36	@ 0x24
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 ff00 	bl	8004bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dae:	f000 f9df 	bl	8004170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db2:	f000 fd2d 	bl	8004810 <xTaskResumeAll>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d189      	bne.n	8003cd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <xQueueReceive+0x1c0>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e780      	b.n	8003cd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd0:	f000 f9ce 	bl	8004170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dd4:	f000 fd1c 	bl	8004810 <xTaskResumeAll>
 8003dd8:	e77a      	b.n	8003cd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ddc:	f000 f9c8 	bl	8004170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de0:	f000 fd16 	bl	8004810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003de6:	f000 fa15 	bl	8004214 <prvIsQueueEmpty>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f43f af6f 	beq.w	8003cd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003df2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3730      	adds	r7, #48	@ 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	@ 0x38
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	623b      	str	r3, [r7, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e54:	f001 f8c2 	bl	8004fdc <xTaskGetSchedulerState>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <xQueueSemaphoreTake+0x64>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xQueueSemaphoreTake+0x68>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xQueueSemaphoreTake+0x6a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61bb      	str	r3, [r7, #24]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e86:	f001 ff17 	bl	8005cb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d024      	beq.n	8003ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ea6:	f001 fa13 	bl	80052d0 <pvTaskIncrementMutexHeldCount>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fec7 	bl	8004c50 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b54      	ldr	r3, [pc, #336]	@ (800401c <xQueueSemaphoreTake+0x21c>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ed8:	f001 ff20 	bl	8005d1c <vPortExitCritical>
				return pdPASS;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e098      	b.n	8004012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d112      	bne.n	8003f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617b      	str	r3, [r7, #20]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f04:	f001 ff0a 	bl	8005d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e082      	b.n	8004012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fefe 	bl	8004d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f20:	f001 fefc 	bl	8005d1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f24:	f000 fc66 	bl	80047f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f28:	f001 fec6 	bl	8005cb8 <vPortEnterCritical>
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d103      	bne.n	8003f42 <xQueueSemaphoreTake+0x142>
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d103      	bne.n	8003f58 <xQueueSemaphoreTake+0x158>
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f58:	f001 fee0 	bl	8005d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 feed 	bl	8004d44 <xTaskCheckForTimeOut>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d132      	bne.n	8003fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f72:	f000 f94f 	bl	8004214 <prvIsQueueEmpty>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d026      	beq.n	8003fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f84:	f001 fe98 	bl	8005cb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f843 	bl	8005018 <xTaskPriorityInherit>
 8003f92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f94:	f001 fec2 	bl	8005d1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	3324      	adds	r3, #36	@ 0x24
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fe03 	bl	8004bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa8:	f000 f8e2 	bl	8004170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fac:	f000 fc30 	bl	8004810 <xTaskResumeAll>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f47f af67 	bne.w	8003e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fb8:	4b18      	ldr	r3, [pc, #96]	@ (800401c <xQueueSemaphoreTake+0x21c>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	e75d      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fcc:	f000 f8d0 	bl	8004170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fd0:	f000 fc1e 	bl	8004810 <xTaskResumeAll>
 8003fd4:	e757      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd8:	f000 f8ca 	bl	8004170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fdc:	f000 fc18 	bl	8004810 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fe2:	f000 f917 	bl	8004214 <prvIsQueueEmpty>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f af4c 	beq.w	8003e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ff4:	f001 fe60 	bl	8005cb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ffa:	f000 f811 	bl	8004020 <prvGetDisinheritPriorityAfterTimeout>
 8003ffe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f8de 	bl	80051c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800400c:	f001 fe86 	bl	8005d1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	@ 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e001      	b.n	8004042 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004042:	68fb      	ldr	r3, [r7, #12]
	}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10d      	bne.n	800408a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d14d      	bne.n	8004112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f834 	bl	80050e8 <xTaskPriorityDisinherit>
 8004080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	e043      	b.n	8004112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6858      	ldr	r0, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	461a      	mov	r2, r3
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	f002 f9a8 	bl	80063f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d32b      	bcc.n	8004112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	e026      	b.n	8004112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68d8      	ldr	r0, [r3, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	461a      	mov	r2, r3
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	f002 f98e 	bl	80063f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	425b      	negs	r3, r3
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d207      	bcs.n	8004100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	425b      	negs	r3, r3
 80040fa:	441a      	add	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d105      	bne.n	8004112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3b01      	subs	r3, #1
 8004110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800411a:	697b      	ldr	r3, [r7, #20]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	441a      	add	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d303      	bcc.n	8004158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68d9      	ldr	r1, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	461a      	mov	r2, r3
 8004162:	6838      	ldr	r0, [r7, #0]
 8004164:	f002 f944 	bl	80063f0 <memcpy>
	}
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004178:	f001 fd9e 	bl	8005cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004184:	e011      	b.n	80041aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	@ 0x24
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fd5c 	bl	8004c50 <xTaskRemoveFromEventList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800419e:	f000 fe35 	bl	8004e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dce9      	bgt.n	8004186 <prvUnlockQueue+0x16>
 80041b2:	e000      	b.n	80041b6 <prvUnlockQueue+0x46>
					break;
 80041b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	22ff      	movs	r2, #255	@ 0xff
 80041ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041be:	f001 fdad 	bl	8005d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041c2:	f001 fd79 	bl	8005cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ce:	e011      	b.n	80041f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3310      	adds	r3, #16
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fd37 	bl	8004c50 <xTaskRemoveFromEventList>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041e8:	f000 fe10 	bl	8004e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dce9      	bgt.n	80041d0 <prvUnlockQueue+0x60>
 80041fc:	e000      	b.n	8004200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	22ff      	movs	r2, #255	@ 0xff
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004208:	f001 fd88 	bl	8005d1c <vPortExitCritical>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800421c:	f001 fd4c 	bl	8005cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e001      	b.n	8004232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004232:	f001 fd73 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004248:	f001 fd36 	bl	8005cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	429a      	cmp	r2, r3
 8004256:	d102      	bne.n	800425e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e001      	b.n	8004262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f001 fd5b 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e014      	b.n	80042aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004280:	4a0f      	ldr	r2, [pc, #60]	@ (80042c0 <vQueueAddToRegistry+0x50>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800428c:	490c      	ldr	r1, [pc, #48]	@ (80042c0 <vQueueAddToRegistry+0x50>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004296:	4a0a      	ldr	r2, [pc, #40]	@ (80042c0 <vQueueAddToRegistry+0x50>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042a2:	e006      	b.n	80042b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b07      	cmp	r3, #7
 80042ae:	d9e7      	bls.n	8004280 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200008e4 	.word	0x200008e4

080042c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042d4:	f001 fcf0 	bl	8005cb8 <vPortEnterCritical>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d103      	bne.n	80042ee <vQueueWaitForMessageRestricted+0x2a>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d103      	bne.n	8004304 <vQueueWaitForMessageRestricted+0x40>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004304:	f001 fd0a 	bl	8005d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3324      	adds	r3, #36	@ 0x24
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fc6d 	bl	8004bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f7ff ff26 	bl	8004170 <prvUnlockQueue>
	}
 8004324:	bf00      	nop
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af04      	add	r7, sp, #16
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	61fb      	str	r3, [r7, #28]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004376:	23a8      	movs	r3, #168	@ 0xa8
 8004378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2ba8      	cmp	r3, #168	@ 0xa8
 800437e:	d00b      	beq.n	8004398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	61bb      	str	r3, [r7, #24]
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01e      	beq.n	80043de <xTaskCreateStatic+0xb2>
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043b8:	2300      	movs	r3, #0
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	9302      	str	r3, [sp, #8]
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f851 	bl	8004478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043d8:	f000 f8f6 	bl	80045c8 <prvAddNewTaskToReadyList>
 80043dc:	e001      	b.n	80043e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043e2:	697b      	ldr	r3, [r7, #20]
	}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	@ 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	@ 0x30
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fd7b 	bl	8005efc <pvPortMalloc>
 8004406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800440e:	20a8      	movs	r0, #168	@ 0xa8
 8004410:	f001 fd74 	bl	8005efc <pvPortMalloc>
 8004414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
 8004422:	e005      	b.n	8004430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f001 fe37 	bl	8006098 <vPortFree>
 800442a:	e001      	b.n	8004430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	2300      	movs	r3, #0
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f80f 	bl	8004478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800445a:	69f8      	ldr	r0, [r7, #28]
 800445c:	f000 f8b4 	bl	80045c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004460:	2301      	movs	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e002      	b.n	800446c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800446c:	69bb      	ldr	r3, [r7, #24]
	}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	461a      	mov	r2, r3
 8004490:	21a5      	movs	r1, #165	@ 0xa5
 8004492:	f001 ff21 	bl	80062d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a0:	3b01      	subs	r3, #1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	617b      	str	r3, [r7, #20]
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	e7fd      	b.n	80044ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e012      	b.n	8004504 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	7819      	ldrb	r1, [r3, #0]
 80044e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	3334      	adds	r3, #52	@ 0x34
 80044ee:	460a      	mov	r2, r1
 80044f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d9e9      	bls.n	80044de <prvInitialiseNewTask+0x66>
 800450a:	e000      	b.n	800450e <prvInitialiseNewTask+0x96>
			{
				break;
 800450c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004516:	e003      	b.n	8004520 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	2b37      	cmp	r3, #55	@ 0x37
 8004524:	d901      	bls.n	800452a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004526:	2337      	movs	r3, #55	@ 0x37
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004534:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe ff3f 	bl	80033c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	3318      	adds	r3, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe ff3a 	bl	80033c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	3354      	adds	r3, #84	@ 0x54
 800457a:	224c      	movs	r2, #76	@ 0x4c
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f001 feaa 	bl	80062d8 <memset>
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <prvInitialiseNewTask+0x144>)
 8004588:	659a      	str	r2, [r3, #88]	@ 0x58
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	4a0c      	ldr	r2, [pc, #48]	@ (80045c0 <prvInitialiseNewTask+0x148>)
 800458e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <prvInitialiseNewTask+0x14c>)
 8004594:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	69b8      	ldr	r0, [r7, #24]
 800459c:	f001 fa5a 	bl	8005a54 <pxPortInitialiseStack>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b2:	bf00      	nop
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20004b78 	.word	0x20004b78
 80045c0:	20004be0 	.word	0x20004be0
 80045c4:	20004c48 	.word	0x20004c48

080045c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d0:	f001 fb72 	bl	8005cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d4:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	4a2c      	ldr	r2, [pc, #176]	@ (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045de:	4b2c      	ldr	r3, [pc, #176]	@ (8004690 <prvAddNewTaskToReadyList+0xc8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <prvAddNewTaskToReadyList+0xc8>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045ec:	4b27      	ldr	r3, [pc, #156]	@ (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d110      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f4:	f000 fc2e 	bl	8004e54 <prvInitialiseTaskLists>
 80045f8:	e00d      	b.n	8004616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045fa:	4b26      	ldr	r3, [pc, #152]	@ (8004694 <prvAddNewTaskToReadyList+0xcc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004602:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d802      	bhi.n	8004616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004610:	4a1f      	ldr	r2, [pc, #124]	@ (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <prvAddNewTaskToReadyList+0xd0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	4a1e      	ldr	r2, [pc, #120]	@ (8004698 <prvAddNewTaskToReadyList+0xd0>)
 800461e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004620:	4b1d      	ldr	r3, [pc, #116]	@ (8004698 <prvAddNewTaskToReadyList+0xd0>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462c:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <prvAddNewTaskToReadyList+0xd4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <prvAddNewTaskToReadyList+0x74>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <prvAddNewTaskToReadyList+0xd4>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a15      	ldr	r2, [pc, #84]	@ (80046a0 <prvAddNewTaskToReadyList+0xd8>)
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7fe fec3 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004658:	f001 fb60 	bl	8005d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800465c:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <prvAddNewTaskToReadyList+0xcc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004664:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	429a      	cmp	r2, r3
 8004670:	d207      	bcs.n	8004682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <prvAddNewTaskToReadyList+0xdc>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000df8 	.word	0x20000df8
 8004690:	20000924 	.word	0x20000924
 8004694:	20000e04 	.word	0x20000e04
 8004698:	20000e14 	.word	0x20000e14
 800469c:	20000e00 	.word	0x20000e00
 80046a0:	20000928 	.word	0x20000928
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <vTaskDelay+0x64>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <vTaskDelay+0x32>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60bb      	str	r3, [r7, #8]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046da:	f000 f88b 	bl	80047f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046de:	2100      	movs	r1, #0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fe09 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046e6:	f000 f893 	bl	8004810 <xTaskResumeAll>
 80046ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <vTaskDelay+0x68>)
 80046f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000e20 	.word	0x20000e20
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	@ 0x28
 8004718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004722:	463a      	mov	r2, r7
 8004724:	1d39      	adds	r1, r7, #4
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fdf6 	bl	800331c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	9202      	str	r2, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	2300      	movs	r3, #0
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	460a      	mov	r2, r1
 8004742:	4924      	ldr	r1, [pc, #144]	@ (80047d4 <vTaskStartScheduler+0xc0>)
 8004744:	4824      	ldr	r0, [pc, #144]	@ (80047d8 <vTaskStartScheduler+0xc4>)
 8004746:	f7ff fdf1 	bl	800432c <xTaskCreateStatic>
 800474a:	4603      	mov	r3, r0
 800474c:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <vTaskStartScheduler+0xc8>)
 800474e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004750:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <vTaskStartScheduler+0xc8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e001      	b.n	8004762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d102      	bne.n	800476e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004768:	f000 fe1a 	bl	80053a0 <xTimerCreateTimerTask>
 800476c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d11b      	bne.n	80047ac <vTaskStartScheduler+0x98>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	613b      	str	r3, [r7, #16]
}
 8004786:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004788:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <vTaskStartScheduler+0xcc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3354      	adds	r3, #84	@ 0x54
 800478e:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <vTaskStartScheduler+0xd0>)
 8004790:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <vTaskStartScheduler+0xd4>)
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <vTaskStartScheduler+0xd8>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047a0:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <vTaskStartScheduler+0xdc>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047a6:	f001 f9e3 	bl	8005b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047aa:	e00f      	b.n	80047cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d10b      	bne.n	80047cc <vTaskStartScheduler+0xb8>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60fb      	str	r3, [r7, #12]
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <vTaskStartScheduler+0xb4>
}
 80047cc:	bf00      	nop
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08006538 	.word	0x08006538
 80047d8:	08004e25 	.word	0x08004e25
 80047dc:	20000e1c 	.word	0x20000e1c
 80047e0:	20000924 	.word	0x20000924
 80047e4:	20000010 	.word	0x20000010
 80047e8:	20000e18 	.word	0x20000e18
 80047ec:	20000e04 	.word	0x20000e04
 80047f0:	20000dfc 	.word	0x20000dfc

080047f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047f8:	4b04      	ldr	r3, [pc, #16]	@ (800480c <vTaskSuspendAll+0x18>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a03      	ldr	r2, [pc, #12]	@ (800480c <vTaskSuspendAll+0x18>)
 8004800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20000e20 	.word	0x20000e20

08004810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800481e:	4b42      	ldr	r3, [pc, #264]	@ (8004928 <xTaskResumeAll+0x118>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xTaskResumeAll+0x2e>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	603b      	str	r3, [r7, #0]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800483e:	f001 fa3b 	bl	8005cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004842:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <xTaskResumeAll+0x118>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	4a37      	ldr	r2, [pc, #220]	@ (8004928 <xTaskResumeAll+0x118>)
 800484a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484c:	4b36      	ldr	r3, [pc, #216]	@ (8004928 <xTaskResumeAll+0x118>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d162      	bne.n	800491a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <xTaskResumeAll+0x11c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05e      	beq.n	800491a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800485c:	e02f      	b.n	80048be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <xTaskResumeAll+0x120>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3318      	adds	r3, #24
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fe14 	bl	8003498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fe0f 	bl	8003498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487e:	4b2d      	ldr	r3, [pc, #180]	@ (8004934 <xTaskResumeAll+0x124>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d903      	bls.n	800488e <xTaskResumeAll+0x7e>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	4a2a      	ldr	r2, [pc, #168]	@ (8004934 <xTaskResumeAll+0x124>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a27      	ldr	r2, [pc, #156]	@ (8004938 <xTaskResumeAll+0x128>)
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7fe fd9a 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ae:	4b23      	ldr	r3, [pc, #140]	@ (800493c <xTaskResumeAll+0x12c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048b8:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <xTaskResumeAll+0x130>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048be:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <xTaskResumeAll+0x120>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1cb      	bne.n	800485e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048cc:	f000 fb66 	bl	8004f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004944 <xTaskResumeAll+0x134>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048dc:	f000 f846 	bl	800496c <xTaskIncrementTick>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80048e6:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <xTaskResumeAll+0x130>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f1      	bne.n	80048dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80048f8:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <xTaskResumeAll+0x134>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <xTaskResumeAll+0x130>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800490a:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <xTaskResumeAll+0x138>)
 800490c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f001 f9ff 	bl	8005d1c <vPortExitCritical>

	return xAlreadyYielded;
 800491e:	68bb      	ldr	r3, [r7, #8]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000e20 	.word	0x20000e20
 800492c:	20000df8 	.word	0x20000df8
 8004930:	20000db8 	.word	0x20000db8
 8004934:	20000e00 	.word	0x20000e00
 8004938:	20000928 	.word	0x20000928
 800493c:	20000924 	.word	0x20000924
 8004940:	20000e0c 	.word	0x20000e0c
 8004944:	20000e08 	.word	0x20000e08
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004952:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <xTaskGetTickCount+0x1c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004958:	687b      	ldr	r3, [r7, #4]
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000dfc 	.word	0x20000dfc

0800496c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004976:	4b4f      	ldr	r3, [pc, #316]	@ (8004ab4 <xTaskIncrementTick+0x148>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f040 8090 	bne.w	8004aa0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004980:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab8 <xTaskIncrementTick+0x14c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004988:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab8 <xTaskIncrementTick+0x14c>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d121      	bne.n	80049d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004994:	4b49      	ldr	r3, [pc, #292]	@ (8004abc <xTaskIncrementTick+0x150>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <xTaskIncrementTick+0x46>
 80049b6:	4b41      	ldr	r3, [pc, #260]	@ (8004abc <xTaskIncrementTick+0x150>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	4b40      	ldr	r3, [pc, #256]	@ (8004ac0 <xTaskIncrementTick+0x154>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3e      	ldr	r2, [pc, #248]	@ (8004abc <xTaskIncrementTick+0x150>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac0 <xTaskIncrementTick+0x154>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac4 <xTaskIncrementTick+0x158>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac4 <xTaskIncrementTick+0x158>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	f000 fae2 	bl	8004f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049d8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <xTaskIncrementTick+0x15c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d349      	bcc.n	8004a76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e2:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <xTaskIncrementTick+0x150>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ec:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <xTaskIncrementTick+0x15c>)
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	601a      	str	r2, [r3, #0]
					break;
 80049f4:	e03f      	b.n	8004a76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f6:	4b31      	ldr	r3, [pc, #196]	@ (8004abc <xTaskIncrementTick+0x150>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d203      	bcs.n	8004a16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <xTaskIncrementTick+0x15c>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a14:	e02f      	b.n	8004a76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fd3c 	bl	8003498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3318      	adds	r3, #24
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fd33 	bl	8003498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a36:	4b25      	ldr	r3, [pc, #148]	@ (8004acc <xTaskIncrementTick+0x160>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d903      	bls.n	8004a46 <xTaskIncrementTick+0xda>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a22      	ldr	r2, [pc, #136]	@ (8004acc <xTaskIncrementTick+0x160>)
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <xTaskIncrementTick+0x164>)
 8004a54:	441a      	add	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe fcbe 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <xTaskIncrementTick+0x168>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3b8      	bcc.n	80049e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a74:	e7b5      	b.n	80049e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a76:	4b17      	ldr	r3, [pc, #92]	@ (8004ad4 <xTaskIncrementTick+0x168>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7c:	4914      	ldr	r1, [pc, #80]	@ (8004ad0 <xTaskIncrementTick+0x164>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d901      	bls.n	8004a92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a92:	4b11      	ldr	r3, [pc, #68]	@ (8004ad8 <xTaskIncrementTick+0x16c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e004      	b.n	8004aaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8004adc <xTaskIncrementTick+0x170>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8004adc <xTaskIncrementTick+0x170>)
 8004aa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aaa:	697b      	ldr	r3, [r7, #20]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000e20 	.word	0x20000e20
 8004ab8:	20000dfc 	.word	0x20000dfc
 8004abc:	20000db0 	.word	0x20000db0
 8004ac0:	20000db4 	.word	0x20000db4
 8004ac4:	20000e10 	.word	0x20000e10
 8004ac8:	20000e18 	.word	0x20000e18
 8004acc:	20000e00 	.word	0x20000e00
 8004ad0:	20000928 	.word	0x20000928
 8004ad4:	20000924 	.word	0x20000924
 8004ad8:	20000e0c 	.word	0x20000e0c
 8004adc:	20000e08 	.word	0x20000e08

08004ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b94 <vTaskSwitchContext+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aee:	4b2a      	ldr	r3, [pc, #168]	@ (8004b98 <vTaskSwitchContext+0xb8>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af4:	e047      	b.n	8004b86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004af6:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <vTaskSwitchContext+0xb8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <vTaskSwitchContext+0xbc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e011      	b.n	8004b28 <vTaskSwitchContext+0x48>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <vTaskSwitchContext+0x42>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <vTaskSwitchContext+0x3e>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	491d      	ldr	r1, [pc, #116]	@ (8004ba0 <vTaskSwitchContext+0xc0>)
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0e3      	beq.n	8004b04 <vTaskSwitchContext+0x24>
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4a16      	ldr	r2, [pc, #88]	@ (8004ba0 <vTaskSwitchContext+0xc0>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d104      	bne.n	8004b6c <vTaskSwitchContext+0x8c>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba4 <vTaskSwitchContext+0xc4>)
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <vTaskSwitchContext+0xbc>)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <vTaskSwitchContext+0xc4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3354      	adds	r3, #84	@ 0x54
 8004b82:	4a09      	ldr	r2, [pc, #36]	@ (8004ba8 <vTaskSwitchContext+0xc8>)
 8004b84:	6013      	str	r3, [r2, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000e20 	.word	0x20000e20
 8004b98:	20000e0c 	.word	0x20000e0c
 8004b9c:	20000e00 	.word	0x20000e00
 8004ba0:	20000928 	.word	0x20000928
 8004ba4:	20000924 	.word	0x20000924
 8004ba8:	20000010 	.word	0x20000010

08004bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60fb      	str	r3, [r7, #12]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bd4:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <vTaskPlaceOnEventList+0x48>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3318      	adds	r3, #24
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fe fc22 	bl	8003426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004be2:	2101      	movs	r1, #1
 8004be4:	6838      	ldr	r0, [r7, #0]
 8004be6:	f000 fb87 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000924 	.word	0x20000924

08004bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	617b      	str	r3, [r7, #20]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4619      	mov	r1, r3
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7fe fbd7 	bl	80033de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	68b8      	ldr	r0, [r7, #8]
 8004c40:	f000 fb5a 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
	}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000924 	.word	0x20000924

08004c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60fb      	str	r3, [r7, #12]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3318      	adds	r3, #24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fc08 	bl	8003498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c88:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <xTaskRemoveFromEventList+0xb0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11d      	bne.n	8004ccc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fbff 	bl	8003498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c9e:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <xTaskRemoveFromEventList+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d903      	bls.n	8004cae <xTaskRemoveFromEventList+0x5e>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <xTaskRemoveFromEventList+0xb4>)
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4a13      	ldr	r2, [pc, #76]	@ (8004d08 <xTaskRemoveFromEventList+0xb8>)
 8004cbc:	441a      	add	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fe fb8a 	bl	80033de <vListInsertEnd>
 8004cca:	e005      	b.n	8004cd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	480e      	ldr	r0, [pc, #56]	@ (8004d0c <xTaskRemoveFromEventList+0xbc>)
 8004cd4:	f7fe fb83 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <xTaskRemoveFromEventList+0xc0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d905      	bls.n	8004cf2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <xTaskRemoveFromEventList+0xc4>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e001      	b.n	8004cf6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cf6:	697b      	ldr	r3, [r7, #20]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000e20 	.word	0x20000e20
 8004d04:	20000e00 	.word	0x20000e00
 8004d08:	20000928 	.word	0x20000928
 8004d0c:	20000db8 	.word	0x20000db8
 8004d10:	20000924 	.word	0x20000924
 8004d14:	20000e0c 	.word	0x20000e0c

08004d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <vTaskInternalSetTimeOutState+0x24>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <vTaskInternalSetTimeOutState+0x28>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20000e10 	.word	0x20000e10
 8004d40:	20000dfc 	.word	0x20000dfc

08004d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	613b      	str	r3, [r7, #16]
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d8a:	f000 ff95 	bl	8005cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e04 <xTaskCheckForTimeOut+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d102      	bne.n	8004dae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e023      	b.n	8004df6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <xTaskCheckForTimeOut+0xc4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d007      	beq.n	8004dca <xTaskCheckForTimeOut+0x86>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e015      	b.n	8004df6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d20b      	bcs.n	8004dec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff99 	bl	8004d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e004      	b.n	8004df6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f000 ff91 	bl	8005d1c <vPortExitCritical>

	return xReturn;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000dfc 	.word	0x20000dfc
 8004e08:	20000e10 	.word	0x20000e10

08004e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <vTaskMissedYield+0x14>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000e0c 	.word	0x20000e0c

08004e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e2c:	f000 f852 	bl	8004ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <prvIdleTask+0x28>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d9f9      	bls.n	8004e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <prvIdleTask+0x2c>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e48:	e7f0      	b.n	8004e2c <prvIdleTask+0x8>
 8004e4a:	bf00      	nop
 8004e4c:	20000928 	.word	0x20000928
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	e00c      	b.n	8004e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4a12      	ldr	r2, [pc, #72]	@ (8004eb4 <prvInitialiseTaskLists+0x60>)
 8004e6c:	4413      	add	r3, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fa88 	bl	8003384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b37      	cmp	r3, #55	@ 0x37
 8004e7e:	d9ef      	bls.n	8004e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e80:	480d      	ldr	r0, [pc, #52]	@ (8004eb8 <prvInitialiseTaskLists+0x64>)
 8004e82:	f7fe fa7f 	bl	8003384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e86:	480d      	ldr	r0, [pc, #52]	@ (8004ebc <prvInitialiseTaskLists+0x68>)
 8004e88:	f7fe fa7c 	bl	8003384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e8c:	480c      	ldr	r0, [pc, #48]	@ (8004ec0 <prvInitialiseTaskLists+0x6c>)
 8004e8e:	f7fe fa79 	bl	8003384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e92:	480c      	ldr	r0, [pc, #48]	@ (8004ec4 <prvInitialiseTaskLists+0x70>)
 8004e94:	f7fe fa76 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e98:	480b      	ldr	r0, [pc, #44]	@ (8004ec8 <prvInitialiseTaskLists+0x74>)
 8004e9a:	f7fe fa73 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <prvInitialiseTaskLists+0x78>)
 8004ea0:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <prvInitialiseTaskLists+0x64>)
 8004ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <prvInitialiseTaskLists+0x7c>)
 8004ea6:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <prvInitialiseTaskLists+0x68>)
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000928 	.word	0x20000928
 8004eb8:	20000d88 	.word	0x20000d88
 8004ebc:	20000d9c 	.word	0x20000d9c
 8004ec0:	20000db8 	.word	0x20000db8
 8004ec4:	20000dcc 	.word	0x20000dcc
 8004ec8:	20000de4 	.word	0x20000de4
 8004ecc:	20000db0 	.word	0x20000db0
 8004ed0:	20000db4 	.word	0x20000db4

08004ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eda:	e019      	b.n	8004f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004edc:	f000 feec 	bl	8005cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee0:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <prvCheckTasksWaitingTermination+0x50>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fad3 	bl	8003498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <prvCheckTasksWaitingTermination+0x54>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8004f28 <prvCheckTasksWaitingTermination+0x54>)
 8004efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004efc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <prvCheckTasksWaitingTermination+0x58>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	4a0a      	ldr	r2, [pc, #40]	@ (8004f2c <prvCheckTasksWaitingTermination+0x58>)
 8004f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f06:	f000 ff09 	bl	8005d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f810 	bl	8004f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <prvCheckTasksWaitingTermination+0x58>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e1      	bne.n	8004edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000dcc 	.word	0x20000dcc
 8004f28:	20000df8 	.word	0x20000df8
 8004f2c:	20000de0 	.word	0x20000de0

08004f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3354      	adds	r3, #84	@ 0x54
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 f9d3 	bl	80062e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 f8a1 	bl	8006098 <vPortFree>
				vPortFree( pxTCB );
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 f89e 	bl	8006098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f5c:	e019      	b.n	8004f92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d103      	bne.n	8004f70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 f895 	bl	8006098 <vPortFree>
	}
 8004f6e:	e010      	b.n	8004f92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d00b      	beq.n	8004f92 <prvDeleteTCB+0x62>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60fb      	str	r3, [r7, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <prvDeleteTCB+0x5e>
	}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <prvResetNextTaskUnblockTime+0x38>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fb4:	e008      	b.n	8004fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <prvResetNextTaskUnblockTime+0x38>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fc6:	6013      	str	r3, [r2, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000db0 	.word	0x20000db0
 8004fd8:	20000e18 	.word	0x20000e18

08004fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <xTaskGetSchedulerState+0x34>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fea:	2301      	movs	r3, #1
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	e008      	b.n	8005002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff0:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <xTaskGetSchedulerState+0x38>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	e001      	b.n	8005002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005002:	687b      	ldr	r3, [r7, #4]
	}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000e04 	.word	0x20000e04
 8005014:	20000e20 	.word	0x20000e20

08005018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d051      	beq.n	80050d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005032:	4b2a      	ldr	r3, [pc, #168]	@ (80050dc <xTaskPriorityInherit+0xc4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	429a      	cmp	r2, r3
 800503a:	d241      	bcs.n	80050c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db06      	blt.n	8005052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005044:	4b25      	ldr	r3, [pc, #148]	@ (80050dc <xTaskPriorityInherit+0xc4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4a1f      	ldr	r2, [pc, #124]	@ (80050e0 <xTaskPriorityInherit+0xc8>)
 8005064:	4413      	add	r3, r2
 8005066:	4299      	cmp	r1, r3
 8005068:	d122      	bne.n	80050b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3304      	adds	r3, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fa12 	bl	8003498 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005074:	4b19      	ldr	r3, [pc, #100]	@ (80050dc <xTaskPriorityInherit+0xc4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	4b18      	ldr	r3, [pc, #96]	@ (80050e4 <xTaskPriorityInherit+0xcc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <xTaskPriorityInherit+0x7a>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <xTaskPriorityInherit+0xcc>)
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a10      	ldr	r2, [pc, #64]	@ (80050e0 <xTaskPriorityInherit+0xc8>)
 80050a0:	441a      	add	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe f998 	bl	80033de <vListInsertEnd>
 80050ae:	e004      	b.n	80050ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <xTaskPriorityInherit+0xc4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e008      	b.n	80050d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <xTaskPriorityInherit+0xc4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d201      	bcs.n	80050d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050d2:	68fb      	ldr	r3, [r7, #12]
	}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000924 	.word	0x20000924
 80050e0:	20000928 	.word	0x20000928
 80050e4:	20000e00 	.word	0x20000e00

080050e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d058      	beq.n	80051b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050fe:	4b2f      	ldr	r3, [pc, #188]	@ (80051bc <xTaskPriorityDisinherit+0xd4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d00b      	beq.n	8005120 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	e7fd      	b.n	800511c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60bb      	str	r3, [r7, #8]
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005152:	429a      	cmp	r2, r3
 8005154:	d02c      	beq.n	80051b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d128      	bne.n	80051b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe f998 	bl	8003498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005180:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <xTaskPriorityDisinherit+0xd8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d903      	bls.n	8005190 <xTaskPriorityDisinherit+0xa8>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <xTaskPriorityDisinherit+0xd8>)
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <xTaskPriorityDisinherit+0xdc>)
 800519e:	441a      	add	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7fe f919 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051b0:	697b      	ldr	r3, [r7, #20]
	}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000924 	.word	0x20000924
 80051c0:	20000e00 	.word	0x20000e00
 80051c4:	20000928 	.word	0x20000928

080051c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80051d6:	2301      	movs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d06c      	beq.n	80052ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60fb      	str	r3, [r7, #12]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d902      	bls.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	e002      	b.n	8005216 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005214:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d04c      	beq.n	80052ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	d147      	bne.n	80052ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800522a:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	d10b      	bne.n	800524c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60bb      	str	r3, [r7, #8]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db04      	blt.n	800526a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	6959      	ldr	r1, [r3, #20]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a13      	ldr	r2, [pc, #76]	@ (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800527a:	4413      	add	r3, r2
 800527c:	4299      	cmp	r1, r3
 800527e:	d11c      	bne.n	80052ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe f907 	bl	8003498 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528e:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d903      	bls.n	800529e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a0c      	ldr	r2, [pc, #48]	@ (80052cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a07      	ldr	r2, [pc, #28]	@ (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80052ac:	441a      	add	r2, r3
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7fe f892 	bl	80033de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ba:	bf00      	nop
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000924 	.word	0x20000924
 80052c8:	20000928 	.word	0x20000928
 80052cc:	20000e00 	.word	0x20000e00

080052d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80052d4:	4b07      	ldr	r3, [pc, #28]	@ (80052f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80052dc:	4b05      	ldr	r3, [pc, #20]	@ (80052f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052e2:	3201      	adds	r2, #1
 80052e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80052e6:	4b03      	ldr	r3, [pc, #12]	@ (80052f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80052e8:	681b      	ldr	r3, [r3, #0]
	}
 80052ea:	4618      	mov	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000924 	.word	0x20000924

080052f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005302:	4b21      	ldr	r3, [pc, #132]	@ (8005388 <prvAddCurrentTaskToDelayedList+0x90>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005308:	4b20      	ldr	r3, [pc, #128]	@ (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe f8c2 	bl	8003498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d10a      	bne.n	8005332 <prvAddCurrentTaskToDelayedList+0x3a>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4819      	ldr	r0, [pc, #100]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x98>)
 800532c:	f7fe f857 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005330:	e026      	b.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4413      	add	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d209      	bcs.n	800535e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534a:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe f865 	bl	8003426 <vListInsert>
}
 800535c:	e010      	b.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800535e:	4b0e      	ldr	r3, [pc, #56]	@ (8005398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f7fe f85b 	bl	8003426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	d202      	bcs.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800537a:	4a08      	ldr	r2, [pc, #32]	@ (800539c <prvAddCurrentTaskToDelayedList+0xa4>)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000dfc 	.word	0x20000dfc
 800538c:	20000924 	.word	0x20000924
 8005390:	20000de4 	.word	0x20000de4
 8005394:	20000db4 	.word	0x20000db4
 8005398:	20000db0 	.word	0x20000db0
 800539c:	20000e18 	.word	0x20000e18

080053a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	@ 0x28
 80053a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053aa:	f000 fb13 	bl	80059d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005424 <xTimerCreateTimerTask+0x84>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d021      	beq.n	80053fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0108 	add.w	r1, r7, #8
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fd ffc1 	bl	8003350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	9202      	str	r2, [sp, #8]
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	2302      	movs	r3, #2
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2300      	movs	r3, #0
 80053de:	460a      	mov	r2, r1
 80053e0:	4911      	ldr	r1, [pc, #68]	@ (8005428 <xTimerCreateTimerTask+0x88>)
 80053e2:	4812      	ldr	r0, [pc, #72]	@ (800542c <xTimerCreateTimerTask+0x8c>)
 80053e4:	f7fe ffa2 	bl	800432c <xTaskCreateStatic>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <xTimerCreateTimerTask+0x90>)
 80053ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053ee:	4b10      	ldr	r3, [pc, #64]	@ (8005430 <xTimerCreateTimerTask+0x90>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005418:	697b      	ldr	r3, [r7, #20]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000e54 	.word	0x20000e54
 8005428:	08006540 	.word	0x08006540
 800542c:	0800556d 	.word	0x0800556d
 8005430:	20000e58 	.word	0x20000e58

08005434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <xTimerGenericCommand+0x30>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	623b      	str	r3, [r7, #32]
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005464:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <xTimerGenericCommand+0x98>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02a      	beq.n	80054c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b05      	cmp	r3, #5
 800547c:	dc18      	bgt.n	80054b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800547e:	f7ff fdad 	bl	8004fdc <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b02      	cmp	r3, #2
 8005486:	d109      	bne.n	800549c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005488:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <xTimerGenericCommand+0x98>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f107 0110 	add.w	r1, r7, #16
 8005490:	2300      	movs	r3, #0
 8005492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005494:	f7fe f9a2 	bl	80037dc <xQueueGenericSend>
 8005498:	6278      	str	r0, [r7, #36]	@ 0x24
 800549a:	e012      	b.n	80054c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800549c:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <xTimerGenericCommand+0x98>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	f107 0110 	add.w	r1, r7, #16
 80054a4:	2300      	movs	r3, #0
 80054a6:	2200      	movs	r2, #0
 80054a8:	f7fe f998 	bl	80037dc <xQueueGenericSend>
 80054ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80054ae:	e008      	b.n	80054c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <xTimerGenericCommand+0x98>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	f107 0110 	add.w	r1, r7, #16
 80054b8:	2300      	movs	r3, #0
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	f7fe fa90 	bl	80039e0 <xQueueGenericSendFromISR>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	@ 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000e54 	.word	0x20000e54

080054d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054da:	4b23      	ldr	r3, [pc, #140]	@ (8005568 <prvProcessExpiredTimer+0x98>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd ffd5 	bl	8003498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d023      	beq.n	8005544 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	18d1      	adds	r1, r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	f000 f8d5 	bl	80056b8 <prvInsertTimerInActiveList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	2100      	movs	r1, #0
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7ff ff88 	bl	8005434 <xTimerGenericCommand>
 8005524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d114      	bne.n	8005556 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	60fb      	str	r3, [r7, #12]
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	4798      	blx	r3
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000e4c 	.word	0x20000e4c

0800556c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f859 	bl	8005630 <prvGetNextExpireTime>
 800557e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4619      	mov	r1, r3
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f805 	bl	8005594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800558a:	f000 f8d7 	bl	800573c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800558e:	bf00      	nop
 8005590:	e7f0      	b.n	8005574 <prvTimerTask+0x8>
	...

08005594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800559e:	f7ff f929 	bl	80047f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f866 	bl	8005678 <prvSampleTimeNow>
 80055ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d130      	bne.n	8005616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <prvProcessTimerOrBlockTask+0x3c>
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d806      	bhi.n	80055d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055c2:	f7ff f925 	bl	8004810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff81 	bl	80054d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055ce:	e024      	b.n	800561a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055d6:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <prvProcessTimerOrBlockTask+0x90>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <prvProcessTimerOrBlockTask+0x50>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <prvProcessTimerOrBlockTask+0x52>
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005628 <prvProcessTimerOrBlockTask+0x94>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fe fe65 	bl	80042c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055fa:	f7ff f909 	bl	8004810 <xTaskResumeAll>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005604:	4b09      	ldr	r3, [pc, #36]	@ (800562c <prvProcessTimerOrBlockTask+0x98>)
 8005606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	f3bf 8f6f 	isb	sy
}
 8005614:	e001      	b.n	800561a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005616:	f7ff f8fb 	bl	8004810 <xTaskResumeAll>
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000e50 	.word	0x20000e50
 8005628:	20000e54 	.word	0x20000e54
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005638:	4b0e      	ldr	r3, [pc, #56]	@ (8005674 <prvGetNextExpireTime+0x44>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <prvGetNextExpireTime+0x16>
 8005642:	2201      	movs	r2, #1
 8005644:	e000      	b.n	8005648 <prvGetNextExpireTime+0x18>
 8005646:	2200      	movs	r2, #0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d105      	bne.n	8005660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005654:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <prvGetNextExpireTime+0x44>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e001      	b.n	8005664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000e4c 	.word	0x20000e4c

08005678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005680:	f7ff f964 	bl	800494c <xTaskGetTickCount>
 8005684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <prvSampleTimeNow+0x3c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	429a      	cmp	r2, r3
 800568e:	d205      	bcs.n	800569c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005690:	f000 f93a 	bl	8005908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e002      	b.n	80056a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056a2:	4a04      	ldr	r2, [pc, #16]	@ (80056b4 <prvSampleTimeNow+0x3c>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000e5c 	.word	0x20000e5c

080056b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d812      	bhi.n	8005704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e01b      	b.n	800572a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b10      	ldr	r3, [pc, #64]	@ (8005734 <prvInsertTimerInActiveList+0x7c>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fd fe92 	bl	8003426 <vListInsert>
 8005702:	e012      	b.n	800572a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d206      	bcs.n	800571a <prvInsertTimerInActiveList+0x62>
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e007      	b.n	800572a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800571a:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <prvInsertTimerInActiveList+0x80>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3304      	adds	r3, #4
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7fd fe7e 	bl	8003426 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800572a:	697b      	ldr	r3, [r7, #20]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000e50 	.word	0x20000e50
 8005738:	20000e4c 	.word	0x20000e4c

0800573c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	@ 0x38
 8005740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005742:	e0ce      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	da19      	bge.n	800577e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	3304      	adds	r3, #4
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	61fb      	str	r3, [r7, #28]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005774:	6850      	ldr	r0, [r2, #4]
 8005776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	4611      	mov	r1, r2
 800577c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f2c0 80ae 	blt.w	80058e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd fe7e 	bl	8003498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800579c:	463b      	mov	r3, r7
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff ff6a 	bl	8005678 <prvSampleTimeNow>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	f200 8097 	bhi.w	80058dc <prvProcessReceivedCommands+0x1a0>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <prvProcessReceivedCommands+0x78>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057dd 	.word	0x080057dd
 80057c0:	08005853 	.word	0x08005853
 80057c4:	08005867 	.word	0x08005867
 80057c8:	080058b3 	.word	0x080058b3
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057dd 	.word	0x080057dd
 80057d4:	08005853 	.word	0x08005853
 80057d8:	08005867 	.word	0x08005867
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	18d1      	adds	r1, r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057fc:	f7ff ff5c 	bl	80056b8 <prvInsertTimerInActiveList>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d06c      	beq.n	80058e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800580c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d061      	beq.n	80058e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	441a      	add	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	2100      	movs	r1, #0
 800582c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800582e:	f7ff fe01 	bl	8005434 <xTimerGenericCommand>
 8005832:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d152      	bne.n	80058e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	61bb      	str	r3, [r7, #24]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005864:	e03d      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	617b      	str	r3, [r7, #20]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	18d1      	adds	r1, r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ac:	f7ff ff04 	bl	80056b8 <prvInsertTimerInActiveList>
					break;
 80058b0:	e017      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c2:	f000 fbe9 	bl	8006098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058c6:	e00c      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058da:	e002      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80058dc:	bf00      	nop
 80058de:	e000      	b.n	80058e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80058e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058e2:	4b08      	ldr	r3, [pc, #32]	@ (8005904 <prvProcessReceivedCommands+0x1c8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1d39      	adds	r1, r7, #4
 80058e8:	2200      	movs	r2, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f9a6 	bl	8003c3c <xQueueReceive>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f47f af26 	bne.w	8005744 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3730      	adds	r7, #48	@ 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000e54 	.word	0x20000e54

08005908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800590e:	e049      	b.n	80059a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005910:	4b2e      	ldr	r3, [pc, #184]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591a:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3304      	adds	r3, #4
 8005928:	4618      	mov	r0, r3
 800592a:	f7fd fdb5 	bl	8003498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02f      	beq.n	80059a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d90e      	bls.n	8005974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005962:	4b1a      	ldr	r3, [pc, #104]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7fd fd5a 	bl	8003426 <vListInsert>
 8005972:	e017      	b.n	80059a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	2100      	movs	r1, #0
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff fd58 	bl	8005434 <xTimerGenericCommand>
 8005984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	603b      	str	r3, [r7, #0]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059a4:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1b0      	bne.n	8005910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <prvSwitchTimerLists+0xc8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <prvSwitchTimerLists+0xc4>)
 80059ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059bc:	4a04      	ldr	r2, [pc, #16]	@ (80059d0 <prvSwitchTimerLists+0xc8>)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6013      	str	r3, [r2, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000e4c 	.word	0x20000e4c
 80059d0:	20000e50 	.word	0x20000e50

080059d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059da:	f000 f96d 	bl	8005cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059de:	4b15      	ldr	r3, [pc, #84]	@ (8005a34 <prvCheckForValidListAndQueue+0x60>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d120      	bne.n	8005a28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059e6:	4814      	ldr	r0, [pc, #80]	@ (8005a38 <prvCheckForValidListAndQueue+0x64>)
 80059e8:	f7fd fccc 	bl	8003384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059ec:	4813      	ldr	r0, [pc, #76]	@ (8005a3c <prvCheckForValidListAndQueue+0x68>)
 80059ee:	f7fd fcc9 	bl	8003384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059f2:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <prvCheckForValidListAndQueue+0x6c>)
 80059f4:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <prvCheckForValidListAndQueue+0x64>)
 80059f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <prvCheckForValidListAndQueue+0x70>)
 80059fa:	4a10      	ldr	r2, [pc, #64]	@ (8005a3c <prvCheckForValidListAndQueue+0x68>)
 80059fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <prvCheckForValidListAndQueue+0x74>)
 8005a04:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <prvCheckForValidListAndQueue+0x78>)
 8005a06:	2110      	movs	r1, #16
 8005a08:	200a      	movs	r0, #10
 8005a0a:	f7fd fdd9 	bl	80035c0 <xQueueGenericCreateStatic>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4a08      	ldr	r2, [pc, #32]	@ (8005a34 <prvCheckForValidListAndQueue+0x60>)
 8005a12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a14:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <prvCheckForValidListAndQueue+0x60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <prvCheckForValidListAndQueue+0x60>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	490b      	ldr	r1, [pc, #44]	@ (8005a50 <prvCheckForValidListAndQueue+0x7c>)
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fc24 	bl	8004270 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a28:	f000 f978 	bl	8005d1c <vPortExitCritical>
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000e54 	.word	0x20000e54
 8005a38:	20000e24 	.word	0x20000e24
 8005a3c:	20000e38 	.word	0x20000e38
 8005a40:	20000e4c 	.word	0x20000e4c
 8005a44:	20000e50 	.word	0x20000e50
 8005a48:	20000f00 	.word	0x20000f00
 8005a4c:	20000e60 	.word	0x20000e60
 8005a50:	08006548 	.word	0x08006548

08005a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b04      	subs	r3, #4
 8005a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b04      	subs	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3b04      	subs	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a84:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab8 <pxPortInitialiseStack+0x64>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3b14      	subs	r3, #20
 8005a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f06f 0202 	mvn.w	r2, #2
 8005aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3b20      	subs	r3, #32
 8005aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	08005abd 	.word	0x08005abd

08005abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ac6:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <prvTaskExitError+0x58>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d00b      	beq.n	8005ae8 <prvTaskExitError+0x2c>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <prvTaskExitError+0x28>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60bb      	str	r3, [r7, #8]
}
 8005afa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005afc:	bf00      	nop
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0fc      	beq.n	8005afe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2000000c 	.word	0x2000000c
	...

08005b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b20:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <pxCurrentTCBConst2>)
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2a:	f380 8809 	msr	PSP, r0
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
 8005b3a:	4770      	bx	lr
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst2>:
 8005b40:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b48:	4808      	ldr	r0, [pc, #32]	@ (8005b6c <prvPortStartFirstTask+0x24>)
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	6800      	ldr	r0, [r0, #0]
 8005b4e:	f380 8808 	msr	MSP, r0
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8814 	msr	CONTROL, r0
 8005b5a:	b662      	cpsie	i
 8005b5c:	b661      	cpsie	f
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	df00      	svc	0
 8005b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b6a:	bf00      	nop
 8005b6c:	e000ed08 	.word	0xe000ed08

08005b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b76:	4b47      	ldr	r3, [pc, #284]	@ (8005c94 <xPortStartScheduler+0x124>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a47      	ldr	r2, [pc, #284]	@ (8005c98 <xPortStartScheduler+0x128>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10b      	bne.n	8005b98 <xPortStartScheduler+0x28>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b98:	4b3e      	ldr	r3, [pc, #248]	@ (8005c94 <xPortStartScheduler+0x124>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c9c <xPortStartScheduler+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10b      	bne.n	8005bba <xPortStartScheduler+0x4a>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	613b      	str	r3, [r7, #16]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bba:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <xPortStartScheduler+0x130>)
 8005bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	22ff      	movs	r2, #255	@ 0xff
 8005bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <xPortStartScheduler+0x134>)
 8005be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005be2:	4b31      	ldr	r3, [pc, #196]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005be4:	2207      	movs	r2, #7
 8005be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005be8:	e009      	b.n	8005bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005bea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b80      	cmp	r3, #128	@ 0x80
 8005c08:	d0ef      	beq.n	8005bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1c3 0307 	rsb	r3, r3, #7
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d00b      	beq.n	8005c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c40:	4a19      	ldr	r2, [pc, #100]	@ (8005ca8 <xPortStartScheduler+0x138>)
 8005c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c4c:	4b17      	ldr	r3, [pc, #92]	@ (8005cac <xPortStartScheduler+0x13c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <xPortStartScheduler+0x13c>)
 8005c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <xPortStartScheduler+0x13c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	@ (8005cac <xPortStartScheduler+0x13c>)
 8005c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c64:	f000 f8da 	bl	8005e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c68:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <xPortStartScheduler+0x140>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c6e:	f000 f8f9 	bl	8005e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c72:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <xPortStartScheduler+0x144>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb4 <xPortStartScheduler+0x144>)
 8005c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c7e:	f7ff ff63 	bl	8005b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c82:	f7fe ff2d 	bl	8004ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8005c86:	f7ff ff19 	bl	8005abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	e000ed00 	.word	0xe000ed00
 8005c98:	410fc271 	.word	0x410fc271
 8005c9c:	410fc270 	.word	0x410fc270
 8005ca0:	e000e400 	.word	0xe000e400
 8005ca4:	20000f50 	.word	0x20000f50
 8005ca8:	20000f54 	.word	0x20000f54
 8005cac:	e000ed20 	.word	0xe000ed20
 8005cb0:	2000000c 	.word	0x2000000c
 8005cb4:	e000ef34 	.word	0xe000ef34

08005cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
}
 8005cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <vPortEnterCritical+0x5c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8005d14 <vPortEnterCritical+0x5c>)
 8005cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <vPortEnterCritical+0x5c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d110      	bne.n	8005d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <vPortEnterCritical+0x60>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	603b      	str	r3, [r7, #0]
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	e7fd      	b.n	8005d02 <vPortEnterCritical+0x4a>
	}
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d22:	4b12      	ldr	r3, [pc, #72]	@ (8005d6c <vPortExitCritical+0x50>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <vPortExitCritical+0x26>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d42:	4b0a      	ldr	r3, [pc, #40]	@ (8005d6c <vPortExitCritical+0x50>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a08      	ldr	r2, [pc, #32]	@ (8005d6c <vPortExitCritical+0x50>)
 8005d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d4c:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <vPortExitCritical+0x50>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <vPortExitCritical+0x44>
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f383 8811 	msr	BASEPRI, r3
}
 8005d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	2000000c 	.word	0x2000000c

08005d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d70:	f3ef 8009 	mrs	r0, PSP
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4b15      	ldr	r3, [pc, #84]	@ (8005dd0 <pxCurrentTCBConst>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f01e 0f10 	tst.w	lr, #16
 8005d80:	bf08      	it	eq
 8005d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	6010      	str	r0, [r2, #0]
 8005d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d94:	f380 8811 	msr	BASEPRI, r0
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f7fe fe9e 	bl	8004ae0 <vTaskSwitchContext>
 8005da4:	f04f 0000 	mov.w	r0, #0
 8005da8:	f380 8811 	msr	BASEPRI, r0
 8005dac:	bc09      	pop	{r0, r3}
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	6808      	ldr	r0, [r1, #0]
 8005db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db6:	f01e 0f10 	tst.w	lr, #16
 8005dba:	bf08      	it	eq
 8005dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005dc0:	f380 8809 	msr	PSP, r0
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst>:
 8005dd0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	607b      	str	r3, [r7, #4]
}
 8005df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005df2:	f7fe fdbb 	bl	800496c <xTaskIncrementTick>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <xPortSysTickHandler+0x40>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f383 8811 	msr	BASEPRI, r3
}
 8005e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e20:	4b0b      	ldr	r3, [pc, #44]	@ (8005e50 <vPortSetupTimerInterrupt+0x34>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <vPortSetupTimerInterrupt+0x38>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e58 <vPortSetupTimerInterrupt+0x3c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <vPortSetupTimerInterrupt+0x40>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <vPortSetupTimerInterrupt+0x44>)
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e3e:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <vPortSetupTimerInterrupt+0x34>)
 8005e40:	2207      	movs	r2, #7
 8005e42:	601a      	str	r2, [r3, #0]
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e010 	.word	0xe000e010
 8005e54:	e000e018 	.word	0xe000e018
 8005e58:	20000000 	.word	0x20000000
 8005e5c:	10624dd3 	.word	0x10624dd3
 8005e60:	e000e014 	.word	0xe000e014

08005e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e74 <vPortEnableVFP+0x10>
 8005e68:	6801      	ldr	r1, [r0, #0]
 8005e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e6e:	6001      	str	r1, [r0, #0]
 8005e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e72:	bf00      	nop
 8005e74:	e000ed88 	.word	0xe000ed88

08005e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e7e:	f3ef 8305 	mrs	r3, IPSR
 8005e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d915      	bls.n	8005eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e8a:	4a18      	ldr	r2, [pc, #96]	@ (8005eec <vPortValidateInterruptPriority+0x74>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e94:	4b16      	ldr	r3, [pc, #88]	@ (8005ef0 <vPortValidateInterruptPriority+0x78>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	7afa      	ldrb	r2, [r7, #11]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d20b      	bcs.n	8005eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef4 <vPortValidateInterruptPriority+0x7c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef8 <vPortValidateInterruptPriority+0x80>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d90b      	bls.n	8005ede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	603b      	str	r3, [r7, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <vPortValidateInterruptPriority+0x62>
	}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	e000e3f0 	.word	0xe000e3f0
 8005ef0:	20000f50 	.word	0x20000f50
 8005ef4:	e000ed0c 	.word	0xe000ed0c
 8005ef8:	20000f54 	.word	0x20000f54

08005efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	@ 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f08:	f7fe fc74 	bl	80047f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8006080 <pvPortMalloc+0x184>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f14:	f000 f924 	bl	8006160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f18:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <pvPortMalloc+0x188>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 8095 	bne.w	8006050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d015      	beq.n	8005f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f023 0307 	bic.w	r3, r3, #7
 8005f44:	3308      	adds	r3, #8
 8005f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <pvPortMalloc+0x6e>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	617b      	str	r3, [r7, #20]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d06f      	beq.n	8006050 <pvPortMalloc+0x154>
 8005f70:	4b45      	ldr	r3, [pc, #276]	@ (8006088 <pvPortMalloc+0x18c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d86a      	bhi.n	8006050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f7a:	4b44      	ldr	r3, [pc, #272]	@ (800608c <pvPortMalloc+0x190>)
 8005f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f7e:	4b43      	ldr	r3, [pc, #268]	@ (800608c <pvPortMalloc+0x190>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f84:	e004      	b.n	8005f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <pvPortMalloc+0xa6>
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f1      	bne.n	8005f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fa2:	4b37      	ldr	r3, [pc, #220]	@ (8006080 <pvPortMalloc+0x184>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d051      	beq.n	8006050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d920      	bls.n	8006010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <pvPortMalloc+0xfc>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800600a:	69b8      	ldr	r0, [r7, #24]
 800600c:	f000 f90a 	bl	8006224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006010:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <pvPortMalloc+0x18c>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	4a1b      	ldr	r2, [pc, #108]	@ (8006088 <pvPortMalloc+0x18c>)
 800601c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <pvPortMalloc+0x18c>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <pvPortMalloc+0x194>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d203      	bcs.n	8006032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800602a:	4b17      	ldr	r3, [pc, #92]	@ (8006088 <pvPortMalloc+0x18c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <pvPortMalloc+0x194>)
 8006030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <pvPortMalloc+0x188>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	431a      	orrs	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006046:	4b13      	ldr	r3, [pc, #76]	@ (8006094 <pvPortMalloc+0x198>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	4a11      	ldr	r2, [pc, #68]	@ (8006094 <pvPortMalloc+0x198>)
 800604e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006050:	f7fe fbde 	bl	8004810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <pvPortMalloc+0x17a>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60fb      	str	r3, [r7, #12]
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	e7fd      	b.n	8006072 <pvPortMalloc+0x176>
	return pvReturn;
 8006076:	69fb      	ldr	r3, [r7, #28]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	@ 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20004b60 	.word	0x20004b60
 8006084:	20004b74 	.word	0x20004b74
 8006088:	20004b64 	.word	0x20004b64
 800608c:	20004b58 	.word	0x20004b58
 8006090:	20004b68 	.word	0x20004b68
 8006094:	20004b6c 	.word	0x20004b6c

08006098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d04f      	beq.n	800614a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060aa:	2308      	movs	r3, #8
 80060ac:	425b      	negs	r3, r3
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <vPortFree+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <vPortFree+0x46>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <vPortFree+0x66>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60bb      	str	r3, [r7, #8]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4b14      	ldr	r3, [pc, #80]	@ (8006154 <vPortFree+0xbc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01e      	beq.n	800614a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11a      	bne.n	800614a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	4b0e      	ldr	r3, [pc, #56]	@ (8006154 <vPortFree+0xbc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	43db      	mvns	r3, r3
 800611e:	401a      	ands	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006124:	f7fe fb66 	bl	80047f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <vPortFree+0xc0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4413      	add	r3, r2
 8006132:	4a09      	ldr	r2, [pc, #36]	@ (8006158 <vPortFree+0xc0>)
 8006134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006136:	6938      	ldr	r0, [r7, #16]
 8006138:	f000 f874 	bl	8006224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <vPortFree+0xc4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	4a06      	ldr	r2, [pc, #24]	@ (800615c <vPortFree+0xc4>)
 8006144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006146:	f7fe fb63 	bl	8004810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800614a:	bf00      	nop
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20004b74 	.word	0x20004b74
 8006158:	20004b64 	.word	0x20004b64
 800615c:	20004b70 	.word	0x20004b70

08006160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800616a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <prvHeapInit+0xac>)
 800616e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00c      	beq.n	8006194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3307      	adds	r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	4a1f      	ldr	r2, [pc, #124]	@ (800620c <prvHeapInit+0xac>)
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006198:	4a1d      	ldr	r2, [pc, #116]	@ (8006210 <prvHeapInit+0xb0>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800619e:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <prvHeapInit+0xb0>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061ac:	2208      	movs	r2, #8
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <prvHeapInit+0xb4>)
 80061c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061c2:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <prvHeapInit+0xb4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ca:	4b12      	ldr	r3, [pc, #72]	@ (8006214 <prvHeapInit+0xb4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006214 <prvHeapInit+0xb4>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006218 <prvHeapInit+0xb8>)
 80061ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4a09      	ldr	r2, [pc, #36]	@ (800621c <prvHeapInit+0xbc>)
 80061f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061f8:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <prvHeapInit+0xc0>)
 80061fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061fe:	601a      	str	r2, [r3, #0]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000f58 	.word	0x20000f58
 8006210:	20004b58 	.word	0x20004b58
 8006214:	20004b60 	.word	0x20004b60
 8006218:	20004b68 	.word	0x20004b68
 800621c:	20004b64 	.word	0x20004b64
 8006220:	20004b74 	.word	0x20004b74

08006224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800622c:	4b28      	ldr	r3, [pc, #160]	@ (80062d0 <prvInsertBlockIntoFreeList+0xac>)
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e002      	b.n	8006238 <prvInsertBlockIntoFreeList+0x14>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d8f7      	bhi.n	8006232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d108      	bne.n	8006266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	441a      	add	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d118      	bne.n	80062ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b15      	ldr	r3, [pc, #84]	@ (80062d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d00d      	beq.n	80062a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	441a      	add	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e008      	b.n	80062b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062a2:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <prvInsertBlockIntoFreeList+0xb0>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e003      	b.n	80062b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d002      	beq.n	80062c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20004b58 	.word	0x20004b58
 80062d4:	20004b60 	.word	0x20004b60

080062d8 <memset>:
 80062d8:	4402      	add	r2, r0
 80062da:	4603      	mov	r3, r0
 80062dc:	4293      	cmp	r3, r2
 80062de:	d100      	bne.n	80062e2 <memset+0xa>
 80062e0:	4770      	bx	lr
 80062e2:	f803 1b01 	strb.w	r1, [r3], #1
 80062e6:	e7f9      	b.n	80062dc <memset+0x4>

080062e8 <_reclaim_reent>:
 80062e8:	4b2d      	ldr	r3, [pc, #180]	@ (80063a0 <_reclaim_reent+0xb8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4283      	cmp	r3, r0
 80062ee:	b570      	push	{r4, r5, r6, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	d053      	beq.n	800639c <_reclaim_reent+0xb4>
 80062f4:	69c3      	ldr	r3, [r0, #28]
 80062f6:	b31b      	cbz	r3, 8006340 <_reclaim_reent+0x58>
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	b163      	cbz	r3, 8006316 <_reclaim_reent+0x2e>
 80062fc:	2500      	movs	r5, #0
 80062fe:	69e3      	ldr	r3, [r4, #28]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	5959      	ldr	r1, [r3, r5]
 8006304:	b9b1      	cbnz	r1, 8006334 <_reclaim_reent+0x4c>
 8006306:	3504      	adds	r5, #4
 8006308:	2d80      	cmp	r5, #128	@ 0x80
 800630a:	d1f8      	bne.n	80062fe <_reclaim_reent+0x16>
 800630c:	69e3      	ldr	r3, [r4, #28]
 800630e:	4620      	mov	r0, r4
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	f000 f87b 	bl	800640c <_free_r>
 8006316:	69e3      	ldr	r3, [r4, #28]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	b111      	cbz	r1, 8006322 <_reclaim_reent+0x3a>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f875 	bl	800640c <_free_r>
 8006322:	69e3      	ldr	r3, [r4, #28]
 8006324:	689d      	ldr	r5, [r3, #8]
 8006326:	b15d      	cbz	r5, 8006340 <_reclaim_reent+0x58>
 8006328:	4629      	mov	r1, r5
 800632a:	4620      	mov	r0, r4
 800632c:	682d      	ldr	r5, [r5, #0]
 800632e:	f000 f86d 	bl	800640c <_free_r>
 8006332:	e7f8      	b.n	8006326 <_reclaim_reent+0x3e>
 8006334:	680e      	ldr	r6, [r1, #0]
 8006336:	4620      	mov	r0, r4
 8006338:	f000 f868 	bl	800640c <_free_r>
 800633c:	4631      	mov	r1, r6
 800633e:	e7e1      	b.n	8006304 <_reclaim_reent+0x1c>
 8006340:	6961      	ldr	r1, [r4, #20]
 8006342:	b111      	cbz	r1, 800634a <_reclaim_reent+0x62>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f861 	bl	800640c <_free_r>
 800634a:	69e1      	ldr	r1, [r4, #28]
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x6c>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f85c 	bl	800640c <_free_r>
 8006354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x76>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f857 	bl	800640c <_free_r>
 800635e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006360:	b111      	cbz	r1, 8006368 <_reclaim_reent+0x80>
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f852 	bl	800640c <_free_r>
 8006368:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800636a:	b111      	cbz	r1, 8006372 <_reclaim_reent+0x8a>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f84d 	bl	800640c <_free_r>
 8006372:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006374:	b111      	cbz	r1, 800637c <_reclaim_reent+0x94>
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f848 	bl	800640c <_free_r>
 800637c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800637e:	b111      	cbz	r1, 8006386 <_reclaim_reent+0x9e>
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f843 	bl	800640c <_free_r>
 8006386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006388:	b111      	cbz	r1, 8006390 <_reclaim_reent+0xa8>
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f83e 	bl	800640c <_free_r>
 8006390:	6a23      	ldr	r3, [r4, #32]
 8006392:	b11b      	cbz	r3, 800639c <_reclaim_reent+0xb4>
 8006394:	4620      	mov	r0, r4
 8006396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800639a:	4718      	bx	r3
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	bf00      	nop
 80063a0:	20000010 	.word	0x20000010

080063a4 <__libc_init_array>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4d0d      	ldr	r5, [pc, #52]	@ (80063dc <__libc_init_array+0x38>)
 80063a8:	4c0d      	ldr	r4, [pc, #52]	@ (80063e0 <__libc_init_array+0x3c>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	2600      	movs	r6, #0
 80063b0:	42a6      	cmp	r6, r4
 80063b2:	d109      	bne.n	80063c8 <__libc_init_array+0x24>
 80063b4:	4d0b      	ldr	r5, [pc, #44]	@ (80063e4 <__libc_init_array+0x40>)
 80063b6:	4c0c      	ldr	r4, [pc, #48]	@ (80063e8 <__libc_init_array+0x44>)
 80063b8:	f000 f87e 	bl	80064b8 <_init>
 80063bc:	1b64      	subs	r4, r4, r5
 80063be:	10a4      	asrs	r4, r4, #2
 80063c0:	2600      	movs	r6, #0
 80063c2:	42a6      	cmp	r6, r4
 80063c4:	d105      	bne.n	80063d2 <__libc_init_array+0x2e>
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063cc:	4798      	blx	r3
 80063ce:	3601      	adds	r6, #1
 80063d0:	e7ee      	b.n	80063b0 <__libc_init_array+0xc>
 80063d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d6:	4798      	blx	r3
 80063d8:	3601      	adds	r6, #1
 80063da:	e7f2      	b.n	80063c2 <__libc_init_array+0x1e>
 80063dc:	08006570 	.word	0x08006570
 80063e0:	08006570 	.word	0x08006570
 80063e4:	08006570 	.word	0x08006570
 80063e8:	08006574 	.word	0x08006574

080063ec <__retarget_lock_acquire_recursive>:
 80063ec:	4770      	bx	lr

080063ee <__retarget_lock_release_recursive>:
 80063ee:	4770      	bx	lr

080063f0 <memcpy>:
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f8:	d100      	bne.n	80063fc <memcpy+0xc>
 80063fa:	4770      	bx	lr
 80063fc:	b510      	push	{r4, lr}
 80063fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006406:	4291      	cmp	r1, r2
 8006408:	d1f9      	bne.n	80063fe <memcpy+0xe>
 800640a:	bd10      	pop	{r4, pc}

0800640c <_free_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	d041      	beq.n	8006498 <_free_r+0x8c>
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f0c      	subs	r4, r1, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	18e4      	addlt	r4, r4, r3
 8006420:	f000 f83e 	bl	80064a0 <__malloc_lock>
 8006424:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <_free_r+0x90>)
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	b933      	cbnz	r3, 8006438 <_free_r+0x2c>
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	4628      	mov	r0, r5
 8006430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006434:	f000 b83a 	b.w	80064ac <__malloc_unlock>
 8006438:	42a3      	cmp	r3, r4
 800643a:	d908      	bls.n	800644e <_free_r+0x42>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	1821      	adds	r1, r4, r0
 8006440:	428b      	cmp	r3, r1
 8006442:	bf01      	itttt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	1809      	addeq	r1, r1, r0
 800644a:	6021      	streq	r1, [r4, #0]
 800644c:	e7ed      	b.n	800642a <_free_r+0x1e>
 800644e:	461a      	mov	r2, r3
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b10b      	cbz	r3, 8006458 <_free_r+0x4c>
 8006454:	42a3      	cmp	r3, r4
 8006456:	d9fa      	bls.n	800644e <_free_r+0x42>
 8006458:	6811      	ldr	r1, [r2, #0]
 800645a:	1850      	adds	r0, r2, r1
 800645c:	42a0      	cmp	r0, r4
 800645e:	d10b      	bne.n	8006478 <_free_r+0x6c>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	4401      	add	r1, r0
 8006464:	1850      	adds	r0, r2, r1
 8006466:	4283      	cmp	r3, r0
 8006468:	6011      	str	r1, [r2, #0]
 800646a:	d1e0      	bne.n	800642e <_free_r+0x22>
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	4408      	add	r0, r1
 8006474:	6010      	str	r0, [r2, #0]
 8006476:	e7da      	b.n	800642e <_free_r+0x22>
 8006478:	d902      	bls.n	8006480 <_free_r+0x74>
 800647a:	230c      	movs	r3, #12
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	e7d6      	b.n	800642e <_free_r+0x22>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428b      	cmp	r3, r1
 8006486:	bf04      	itt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	6063      	str	r3, [r4, #4]
 800648e:	bf04      	itt	eq
 8006490:	1809      	addeq	r1, r1, r0
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	6054      	str	r4, [r2, #4]
 8006496:	e7ca      	b.n	800642e <_free_r+0x22>
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	20004cb4 	.word	0x20004cb4

080064a0 <__malloc_lock>:
 80064a0:	4801      	ldr	r0, [pc, #4]	@ (80064a8 <__malloc_lock+0x8>)
 80064a2:	f7ff bfa3 	b.w	80063ec <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	20004cb0 	.word	0x20004cb0

080064ac <__malloc_unlock>:
 80064ac:	4801      	ldr	r0, [pc, #4]	@ (80064b4 <__malloc_unlock+0x8>)
 80064ae:	f7ff bf9e 	b.w	80063ee <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	20004cb0 	.word	0x20004cb0

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
